# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `cucumber-core` gem.
# Please instead update this file by running `bin/tapioca gem cucumber-core`.

module Cucumber
  class << self
    # source://cucumber/8.0.0/lib/cucumber/deprecate.rb#52
    def deprecate(*args); end

    # source://cucumber/8.0.0/lib/cucumber/platform.rb#21
    def file_mode(mode, encoding = T.unsafe(nil)); end

    # source://cucumber/8.0.0/lib/cucumber.rb#15
    def logger; end

    # source://cucumber/8.0.0/lib/cucumber.rb#23
    def logger=(logger); end

    # source://cucumber/8.0.0/lib/cucumber/platform.rb#18
    def use_full_backtrace; end

    # source://cucumber/8.0.0/lib/cucumber/platform.rb#18
    def use_full_backtrace=(_arg0); end

    # source://cucumber/8.0.0/lib/cucumber.rb#13
    def use_legacy_autoloader; end

    # source://cucumber/8.0.0/lib/cucumber.rb#13
    def use_legacy_autoloader=(_arg0); end

    # source://cucumber/8.0.0/lib/cucumber.rb#13
    def wants_to_quit; end

    # source://cucumber/8.0.0/lib/cucumber.rb#13
    def wants_to_quit=(_arg0); end
  end
end

class Cucumber::Ambiguous < ::StandardError
  # source://cucumber/8.0.0/lib/cucumber/errors.rb#37
  def initialize(step_name, step_definitions, used_guess); end
end

class Cucumber::AmbiguousStepMatch
  # source://cucumber/8.0.0/lib/cucumber/step_match.rb#146
  def initialize(error); end

  # source://cucumber/8.0.0/lib/cucumber/step_match.rb#150
  def activate(test_step); end
end

# source://cucumber/8.0.0/lib/cucumber/platform.rb#11
Cucumber::BINARY = T.let(T.unsafe(nil), String)

module Cucumber::CiEnvironment
  extend ::Cucumber::CiEnvironment::VariableExpression

  private

  # source://cucumber-ci-environment/9.1.0/lib/cucumber/ci_environment.rb#20
  def detect(ci_environment, env); end

  # source://cucumber-ci-environment/9.1.0/lib/cucumber/ci_environment.rb#10
  def detect_ci_environment(env); end

  # source://cucumber-ci-environment/9.1.0/lib/cucumber/ci_environment.rb#35
  def detect_git(ci_environment, env); end

  # source://cucumber-ci-environment/9.1.0/lib/cucumber/ci_environment.rb#54
  def detect_revision(ci_environment, env); end

  # source://cucumber-ci-environment/9.1.0/lib/cucumber/ci_environment.rb#66
  def remove_userinfo_from_url(value); end

  class << self
    # source://cucumber-ci-environment/9.1.0/lib/cucumber/ci_environment.rb#20
    def detect(ci_environment, env); end

    # source://cucumber-ci-environment/9.1.0/lib/cucumber/ci_environment.rb#10
    def detect_ci_environment(env); end

    # source://cucumber-ci-environment/9.1.0/lib/cucumber/ci_environment.rb#35
    def detect_git(ci_environment, env); end

    # source://cucumber-ci-environment/9.1.0/lib/cucumber/ci_environment.rb#54
    def detect_revision(ci_environment, env); end

    # source://cucumber-ci-environment/9.1.0/lib/cucumber/ci_environment.rb#66
    def remove_userinfo_from_url(value); end
  end
end

# source://cucumber-ci-environment/9.1.0/lib/cucumber/ci_environment.rb#8
Cucumber::CiEnvironment::CI_ENVIRONMENTS_PATH = T.let(T.unsafe(nil), String)

module Cucumber::CiEnvironment::VariableExpression
  # source://cucumber-ci-environment/9.1.0/lib/cucumber/ci_environment/variable_expression.rb#4
  def evaluate(expression, env); end

  # source://cucumber-ci-environment/9.1.0/lib/cucumber/ci_environment/variable_expression.rb#31
  def get_value(variable, env); end
end

module Cucumber::Cli; end

class Cucumber::Cli::Configuration
  include ::Cucumber::Constantize

  # source://cucumber/8.0.0/lib/cucumber/cli/configuration.rb#22
  def initialize(out_stream = T.unsafe(nil), error_stream = T.unsafe(nil)); end

  # source://cucumber/8.0.0/lib/cucumber/cli/configuration.rb#61
  def dry_run?; end

  # source://cucumber/8.0.0/lib/cucumber/cli/configuration.rb#65
  def expand?; end

  # source://cucumber/8.0.0/lib/cucumber/cli/configuration.rb#69
  def fail_fast?; end

  # source://cucumber/8.0.0/lib/cucumber/cli/configuration.rb#101
  def filters; end

  # source://cucumber/8.0.0/lib/cucumber/cli/configuration.rb#105
  def formats; end

  # source://cucumber/8.0.0/lib/cucumber/cli/configuration.rb#57
  def guess?; end

  # source://cucumber/8.0.0/lib/cucumber/cli/configuration.rb#81
  def log; end

  # source://cucumber/8.0.0/lib/cucumber/cli/configuration.rb#97
  def name_regexps; end

  # source://cucumber/8.0.0/lib/cucumber/cli/configuration.rb#20
  def out_stream; end

  # source://cucumber/8.0.0/lib/cucumber/cli/configuration.rb#28
  def parse!(args); end

  # source://cucumber/8.0.0/lib/cucumber/cli/configuration.rb#109
  def paths; end

  # source://cucumber/8.0.0/lib/cucumber/cli/configuration.rb#41
  def randomize?; end

  # source://cucumber/8.0.0/lib/cucumber/cli/configuration.rb#73
  def retry_attempts; end

  # source://cucumber/8.0.0/lib/cucumber/cli/configuration.rb#45
  def seed; end

  # source://cucumber/8.0.0/lib/cucumber/cli/configuration.rb#77
  def snippet_type; end

  # source://cucumber/8.0.0/lib/cucumber/cli/configuration.rb#49
  def strict; end

  # source://cucumber/8.0.0/lib/cucumber/cli/configuration.rb#93
  def tag_expressions; end

  # source://cucumber/8.0.0/lib/cucumber/cli/configuration.rb#89
  def tag_limits; end

  # source://cucumber/8.0.0/lib/cucumber/cli/configuration.rb#113
  def to_hash; end

  # source://cucumber/8.0.0/lib/cucumber/cli/configuration.rb#37
  def verbose?; end

  # source://cucumber/8.0.0/lib/cucumber/cli/configuration.rb#53
  def wip?; end

  private

  # source://cucumber/8.0.0/lib/cucumber/cli/configuration.rb#141
  def add_default_formatter; end

  # source://cucumber/8.0.0/lib/cucumber/cli/configuration.rb#131
  def arrange_formats; end

  # source://cucumber/8.0.0/lib/cucumber/cli/configuration.rb#149
  def formatter_missing?; end

  # source://cucumber/8.0.0/lib/cucumber/cli/configuration.rb#145
  def needs_default_formatter?; end

  # source://cucumber/8.0.0/lib/cucumber/cli/configuration.rb#153
  def publish_only?; end

  # source://cucumber/8.0.0/lib/cucumber/cli/configuration.rb#125
  def set_environment_variables; end
end

class Cucumber::Cli::Configuration::LogFormatter < ::Logger::Formatter
  # source://cucumber/8.0.0/lib/cucumber/cli/configuration.rb#120
  def call(_severity, _time, _progname, msg); end
end

class Cucumber::Cli::Main
  # source://cucumber/8.0.0/lib/cucumber/cli/main.rb#17
  def initialize(args, out = T.unsafe(nil), err = T.unsafe(nil), kernel = T.unsafe(nil)); end

  # source://cucumber/8.0.0/lib/cucumber/cli/main.rb#58
  def configuration; end

  # source://cucumber/8.0.0/lib/cucumber/cli/main.rb#24
  def execute!(existing_runtime = T.unsafe(nil)); end

  private

  # source://cucumber/8.0.0/lib/cucumber/cli/main.rb#67
  def exit_ok; end

  # source://cucumber/8.0.0/lib/cucumber/cli/main.rb#71
  def exit_tests_failed; end

  # source://cucumber/8.0.0/lib/cucumber/cli/main.rb#75
  def exit_unable_to_finish; end

  # source://cucumber/8.0.0/lib/cucumber/cli/main.rb#80
  def exit_unable_to_finish!; end

  # source://cucumber/8.0.0/lib/cucumber/cli/main.rb#93
  def runtime(existing_runtime); end

  # source://cucumber/8.0.0/lib/cucumber/cli/main.rb#84
  def trap_interrupt; end

  class << self
    # source://cucumber/8.0.0/lib/cucumber/cli/main.rb#12
    def execute(args); end
  end
end

class Cucumber::Cli::Options
  # source://cucumber/8.0.0/lib/cucumber/cli/options.rb#72
  def initialize(out_stream = T.unsafe(nil), error_stream = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://cucumber/8.0.0/lib/cucumber/cli/options.rb#86
  def [](key); end

  # source://cucumber/8.0.0/lib/cucumber/cli/options.rb#90
  def []=(key, value); end

  # source://cucumber/8.0.0/lib/cucumber/cli/options.rb#180
  def check_formatter_stream_conflicts; end

  # source://cucumber/8.0.0/lib/cucumber/cli/options.rb#172
  def custom_profiles; end

  # source://cucumber/8.0.0/lib/cucumber/cli/options.rb#176
  def filters; end

  # source://cucumber/8.0.0/lib/cucumber/cli/options.rb#94
  def parse!(args); end

  # source://cucumber/8.0.0/lib/cucumber/cli/options.rb#187
  def to_hash; end

  protected

  # source://cucumber/8.0.0/lib/cucumber/cli/options.rb#193
  def expanded_args; end

  # source://cucumber/8.0.0/lib/cucumber/cli/options.rb#193
  def options; end

  # source://cucumber/8.0.0/lib/cucumber/cli/options.rb#193
  def profiles; end

  private

  # source://cucumber/8.0.0/lib/cucumber/cli/options.rb#403
  def add_option(option, value); end

  # source://cucumber/8.0.0/lib/cucumber/cli/options.rb#435
  def add_profile(p); end

  # source://cucumber/8.0.0/lib/cucumber/cli/options.rb#407
  def add_tag(value); end

  # source://cucumber/8.0.0/lib/cucumber/cli/options.rb#421
  def add_tag_limit(tag_limits, tag_name, limit); end

  # source://cucumber/8.0.0/lib/cucumber/cli/options.rb#415
  def add_tag_limits(value); end

  # source://cucumber/8.0.0/lib/cucumber/cli/options.rb#358
  def banner; end

  # source://cucumber/8.0.0/lib/cucumber/cli/options.rb#427
  def color(color); end

  # source://cucumber/8.0.0/lib/cucumber/cli/options.rb#211
  def color_msg; end

  # source://cucumber/8.0.0/lib/cucumber/cli/options.rb#604
  def default_options; end

  # source://cucumber/8.0.0/lib/cucumber/cli/options.rb#506
  def default_profile_should_be_used?; end

  # source://cucumber/8.0.0/lib/cucumber/cli/options.rb#395
  def disable_profile_loading; end

  # source://cucumber/8.0.0/lib/cucumber/cli/options.rb#477
  def disable_profile_loading?; end

  # source://cucumber/8.0.0/lib/cucumber/cli/options.rb#218
  def dry_run_msg; end

  # source://cucumber/8.0.0/lib/cucumber/cli/options.rb#222
  def exclude_msg; end

  # source://cucumber/8.0.0/lib/cucumber/cli/options.rb#448
  def exit_ok(text); end

  # source://cucumber/8.0.0/lib/cucumber/cli/options.rb#468
  def extract_environment_variables; end

  # source://cucumber/8.0.0/lib/cucumber/cli/options.rb#226
  def format_msg; end

  # source://cucumber/8.0.0/lib/cucumber/cli/options.rb#236
  def i18n_keywords_msg; end

  # source://cucumber/8.0.0/lib/cucumber/cli/options.rb#230
  def i18n_languages_msg; end

  # source://cucumber/8.0.0/lib/cucumber/cli/options.rb#554
  def indicate_invalid_language_and_exit(lang); end

  # source://cucumber/8.0.0/lib/cucumber/cli/options.rb#243
  def init_msg; end

  # source://cucumber/8.0.0/lib/cucumber/cli/options.rb#431
  def initialize_project; end

  # source://cucumber/8.0.0/lib/cucumber/cli/options.rb#387
  def language(lang); end

  # source://cucumber/8.0.0/lib/cucumber/cli/options.rb#250
  def lines_msg; end

  # source://cucumber/8.0.0/lib/cucumber/cli/options.rb#559
  def list_keywords_and_exit(lang); end

  # source://cucumber/8.0.0/lib/cucumber/cli/options.rb#585
  def list_languages_and_exit; end

  # source://cucumber/8.0.0/lib/cucumber/cli/options.rb#481
  def merge_profiles; end

  # source://cucumber/8.0.0/lib/cucumber/cli/options.rb#550
  def merge_tag_limits(option_limits, other_limits); end

  # source://cucumber/8.0.0/lib/cucumber/cli/options.rb#496
  def merge_with_profile(profile); end

  # source://cucumber/8.0.0/lib/cucumber/cli/options.rb#274
  def name_msg; end

  # source://cucumber/8.0.0/lib/cucumber/cli/options.rb#254
  def no_profile_short_flag_msg; end

  # source://cucumber/8.0.0/lib/cucumber/cli/options.rb#399
  def non_stdout_formats; end

  # source://cucumber/8.0.0/lib/cucumber/cli/options.rb#323
  def out_msg; end

  # source://cucumber/8.0.0/lib/cucumber/cli/options.rb#295
  def out_stream(v); end

  # source://cucumber/8.0.0/lib/cucumber/cli/options.rb#289
  def parse_formats(v); end

  # source://cucumber/8.0.0/lib/cucumber/cli/options.rb#198
  def process_publish_options; end

  # source://cucumber/8.0.0/lib/cucumber/cli/options.rb#512
  def profile_loader; end

  # source://cucumber/8.0.0/lib/cucumber/cli/options.rb#260
  def profile_short_flag_msg; end

  # source://cucumber/8.0.0/lib/cucumber/cli/options.rb#381
  def publisher; end

  # source://cucumber/8.0.0/lib/cucumber/cli/options.rb#369
  def require_files(v); end

  # source://cucumber/8.0.0/lib/cucumber/cli/options.rb#336
  def require_files_msg; end

  # source://cucumber/8.0.0/lib/cucumber/cli/options.rb#377
  def require_jars(jars); end

  # source://cucumber/8.0.0/lib/cucumber/cli/options.rb#270
  def retry_msg; end

  # source://cucumber/8.0.0/lib/cucumber/cli/options.rb#516
  def reverse_merge(other_options); end

  # source://cucumber/8.0.0/lib/cucumber/cli/options.rb#443
  def set_dry_run_and_duration; end

  # source://cucumber/8.0.0/lib/cucumber/cli/options.rb#439
  def set_option(option, value = T.unsafe(nil)); end

  # source://cucumber/8.0.0/lib/cucumber/cli/options.rb#460
  def set_strict(setting, type = T.unsafe(nil)); end

  # source://cucumber/8.0.0/lib/cucumber/cli/options.rb#453
  def shut_up; end

  # source://cucumber/8.0.0/lib/cucumber/cli/options.rb#351
  def snippet_type_msg; end

  # source://cucumber/8.0.0/lib/cucumber/cli/options.rb#464
  def stdout_formats; end

  # source://cucumber/8.0.0/lib/cucumber/cli/options.rb#282
  def strict_msg; end

  # source://cucumber/8.0.0/lib/cucumber/cli/options.rb#300
  def tags_msg; end

  # source://cucumber/8.0.0/lib/cucumber/cli/options.rb#600
  def to_code_keywords_string(list); end

  # source://cucumber/8.0.0/lib/cucumber/cli/options.rb#596
  def to_keywords_string(list); end

  # source://cucumber/8.0.0/lib/cucumber/cli/options.rb#205
  def truthy_string?(str); end

  class << self
    # source://cucumber/8.0.0/lib/cucumber/cli/options.rb#68
    def parse(args, out_stream, error_stream, options = T.unsafe(nil)); end
  end
end

# source://cucumber/8.0.0/lib/cucumber/cli/options.rb#14
Cucumber::Cli::Options::BUILTIN_FORMATS = T.let(T.unsafe(nil), Hash)

# source://cucumber/8.0.0/lib/cucumber/cli/options.rb#12
Cucumber::Cli::Options::CUCUMBER_PUBLISH_URL = T.let(T.unsafe(nil), String)

# source://cucumber/8.0.0/lib/cucumber/cli/options.rb#57
Cucumber::Cli::Options::FAIL_FAST_FLAG = T.let(T.unsafe(nil), String)

# source://cucumber/8.0.0/lib/cucumber/cli/options.rb#50
Cucumber::Cli::Options::FORMAT_HELP = T.let(T.unsafe(nil), Array)

# source://cucumber/8.0.0/lib/cucumber/cli/options.rb#37
Cucumber::Cli::Options::FORMAT_HELP_MSG = T.let(T.unsafe(nil), Array)

# source://cucumber/8.0.0/lib/cucumber/cli/options.rb#13
Cucumber::Cli::Options::INDENT = T.let(T.unsafe(nil), String)

# source://cucumber/8.0.0/lib/cucumber/cli/options.rb#56
Cucumber::Cli::Options::NO_PROFILE_LONG_FLAG = T.let(T.unsafe(nil), String)

# source://cucumber/8.0.0/lib/cucumber/cli/options.rb#54
Cucumber::Cli::Options::NO_PROFILE_SHORT_FLAG = T.let(T.unsafe(nil), String)

# source://cucumber/8.0.0/lib/cucumber/cli/options.rb#59
Cucumber::Cli::Options::OPTIONS_WITH_ARGS = T.let(T.unsafe(nil), Array)

# source://cucumber/8.0.0/lib/cucumber/cli/options.rb#65
Cucumber::Cli::Options::ORDER_TYPES = T.let(T.unsafe(nil), Array)

# source://cucumber/8.0.0/lib/cucumber/cli/options.rb#55
Cucumber::Cli::Options::PROFILE_LONG_FLAG = T.let(T.unsafe(nil), String)

# source://cucumber/8.0.0/lib/cucumber/cli/options.rb#53
Cucumber::Cli::Options::PROFILE_SHORT_FLAG = T.let(T.unsafe(nil), String)

# source://cucumber/8.0.0/lib/cucumber/cli/options.rb#58
Cucumber::Cli::Options::RETRY_FLAG = T.let(T.unsafe(nil), String)

# source://cucumber/8.0.0/lib/cucumber/cli/options.rb#66
Cucumber::Cli::Options::TAG_LIMIT_MATCHER = T.let(T.unsafe(nil), Regexp)

class Cucumber::Cli::ProfileLoader
  # source://cucumber/8.0.0/lib/cucumber/cli/profile_loader.rb#8
  def initialize; end

  # source://cucumber/8.0.0/lib/cucumber/cli/profile_loader.rb#12
  def args_from(profile); end

  # source://cucumber/8.0.0/lib/cucumber/cli/profile_loader.rb#45
  def cucumber_yml_defined?; end

  # source://cucumber/8.0.0/lib/cucumber/cli/profile_loader.rb#41
  def profile?(profile); end

  private

  # source://cucumber/8.0.0/lib/cucumber/cli/profile_loader.rb#96
  def cucumber_file; end

  # source://cucumber/8.0.0/lib/cucumber/cli/profile_loader.rb#52
  def cucumber_yml; end

  # source://cucumber/8.0.0/lib/cucumber/cli/profile_loader.rb#67
  def ensure_configuration_file_exists; end

  # source://cucumber/8.0.0/lib/cucumber/cli/profile_loader.rb#84
  def load_configuration; end

  # source://cucumber/8.0.0/lib/cucumber/cli/profile_loader.rb#75
  def process_configuration_file_with_erb; end

  # source://cucumber/8.0.0/lib/cucumber/cli/profile_loader.rb#100
  def processed_shellwords(args_from_yml); end
end

class Cucumber::Cli::ProfileNotFound < ::StandardError; end
class Cucumber::Cli::ProfilesNotDefinedError < ::Cucumber::Cli::YmlLoadError; end

class Cucumber::Cli::RerunFile
  # source://cucumber/8.0.0/lib/cucumber/cli/rerun_file.rb#16
  def initialize(path); end

  # source://cucumber/8.0.0/lib/cucumber/cli/rerun_file.rb#20
  def features; end

  # source://cucumber/8.0.0/lib/cucumber/cli/rerun_file.rb#6
  def path; end

  private

  # source://cucumber/8.0.0/lib/cucumber/cli/rerun_file.rb#26
  def lines; end

  class << self
    # source://cucumber/8.0.0/lib/cucumber/cli/rerun_file.rb#8
    def can_read?(path); end

    # source://cucumber/8.0.0/lib/cucumber/cli/rerun_file.rb#12
    def real_path(path); end
  end
end

class Cucumber::Cli::YmlLoadError < ::StandardError; end

class Cucumber::Configuration
  include ::Cucumber::Constantize
  extend ::Forwardable

  # source://cucumber/8.0.0/lib/cucumber/configuration.rb#37
  def initialize(user_options = T.unsafe(nil)); end

  # source://cucumber/8.0.0/lib/cucumber/configuration.rb#189
  def all_files_to_load; end

  # source://cucumber/8.0.0/lib/cucumber/configuration.rb#129
  def autoload_code_paths; end

  # source://cucumber/8.0.0/lib/cucumber/configuration.rb#117
  def custom_profiles; end

  # source://cucumber/8.0.0/lib/cucumber/configuration.rb#61
  def dry_run?; end

  # source://cucumber/8.0.0/lib/cucumber/configuration.rb#101
  def duration?; end

  # source://cucumber/8.0.0/lib/cucumber/configuration.rb#49
  def error_stream; end

  # source://cucumber/8.0.0/lib/cucumber/configuration.rb#248
  def event_bus; end

  # source://cucumber/8.0.0/lib/cucumber/configuration.rb#93
  def expand?; end

  # source://cucumber/8.0.0/lib/cucumber/configuration.rb#73
  def fail_fast?; end

  # source://cucumber/8.0.0/lib/cucumber/configuration.rb#137
  def feature_dirs; end

  # source://cucumber/8.0.0/lib/cucumber/configuration.rb#159
  def feature_files; end

  # source://cucumber/8.0.0/lib/cucumber/configuration.rb#155
  def filters; end

  # source://cucumber/8.0.0/lib/cucumber/configuration.rb#125
  def formats; end

  # source://cucumber/8.0.0/lib/cucumber/configuration.rb#217
  def formatter_class(format); end

  # source://cucumber/8.0.0/lib/cucumber/configuration.rb#206
  def formatter_factories; end

  # source://cucumber/8.0.0/lib/cucumber/configuration.rb#81
  def guess?; end

  # source://cucumber/8.0.0/lib/cucumber/configuration.rb#252
  def id_generator; end

  # source://cucumber/8.0.0/lib/cucumber/configuration.rb#151
  def name_regexps; end

  # source://cucumber/8.0.0/lib/cucumber/configuration.rb#33
  def notify(message, *args); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def on_event(*args, **_arg1, &block); end

  # source://cucumber/8.0.0/lib/cucumber/configuration.rb#45
  def out_stream; end

  # source://cucumber/8.0.0/lib/cucumber/configuration.rb#121
  def paths; end

  # source://cucumber/8.0.0/lib/cucumber/configuration.rb#113
  def profiles; end

  # source://cucumber/8.0.0/lib/cucumber/configuration.rb#65
  def publish_enabled?; end

  # source://cucumber/8.0.0/lib/cucumber/configuration.rb#69
  def publish_quiet?; end

  # source://cucumber/8.0.0/lib/cucumber/configuration.rb#53
  def randomize?; end

  # source://cucumber/8.0.0/lib/cucumber/configuration.rb#243
  def register_snippet_generator(generator); end

  # source://cucumber/8.0.0/lib/cucumber/configuration.rb#77
  def retry_attempts; end

  # source://cucumber/8.0.0/lib/cucumber/configuration.rb#57
  def seed; end

  # source://cucumber/8.0.0/lib/cucumber/configuration.rb#109
  def skip_profile_information?; end

  # source://cucumber/8.0.0/lib/cucumber/configuration.rb#239
  def snippet_generators; end

  # source://cucumber/8.0.0/lib/cucumber/configuration.rb#133
  def snippet_type; end

  # source://cucumber/8.0.0/lib/cucumber/configuration.rb#105
  def snippets?; end

  # source://cucumber/8.0.0/lib/cucumber/configuration.rb#97
  def source?; end

  # source://cucumber/8.0.0/lib/cucumber/configuration.rb#202
  def step_defs_to_load; end

  # source://cucumber/8.0.0/lib/cucumber/configuration.rb#85
  def strict; end

  # source://cucumber/8.0.0/lib/cucumber/configuration.rb#178
  def support_to_load; end

  # source://cucumber/8.0.0/lib/cucumber/configuration.rb#147
  def tag_expressions; end

  # source://cucumber/8.0.0/lib/cucumber/configuration.rb#143
  def tag_limits; end

  # source://cucumber/8.0.0/lib/cucumber/configuration.rb#225
  def to_hash; end

  # source://cucumber/8.0.0/lib/cucumber/configuration.rb#89
  def wip?; end

  # source://cucumber/8.0.0/lib/cucumber/configuration.rb#41
  def with_options(new_options); end

  private

  # source://cucumber/8.0.0/lib/cucumber/configuration.rb#280
  def default_features_paths; end

  # source://cucumber/8.0.0/lib/cucumber/configuration.rb#258
  def default_options; end

  # source://cucumber/8.0.0/lib/cucumber/configuration.rb#290
  def remove_excluded_files_from(files); end

  # source://cucumber/8.0.0/lib/cucumber/configuration.rb#294
  def require_dirs; end

  # source://cucumber/8.0.0/lib/cucumber/configuration.rb#284
  def with_default_features_path(paths); end

  class << self
    # source://cucumber/8.0.0/lib/cucumber/configuration.rb#18
    def default; end
  end
end

module Cucumber::Constantize
  # source://cucumber/8.0.0/lib/cucumber/constantize.rb#6
  def constantize(camel_cased_word); end

  # source://cucumber/8.0.0/lib/cucumber/constantize.rb#26
  def underscore(camel_cased_word); end

  private

  # source://cucumber/8.0.0/lib/cucumber/constantize.rb#36
  def constantize_name(constant, name); end
end

module Cucumber::Core
  # source://cucumber-core//lib/cucumber/core.rb#20
  def compile(gherkin_documents, last_receiver, filters = T.unsafe(nil), event_bus = T.unsafe(nil)); end

  # @yield [event_bus]
  #
  # source://cucumber-core//lib/cucumber/core.rb#13
  def execute(gherkin_documents, filters = T.unsafe(nil), event_bus = T.unsafe(nil)); end

  private

  # source://cucumber-core//lib/cucumber/core.rb#39
  def compose(filters, last_receiver); end

  # source://cucumber-core//lib/cucumber/core.rb#30
  def parse(gherkin_documents, compiler, event_bus, gherkin_query); end
end

# Compiles the Pickles into test cases
class Cucumber::Core::Compiler
  # @return [Compiler] a new instance of Compiler
  #
  # source://cucumber-core//lib/cucumber/core/compiler.rb#18
  def initialize(receiver, gherkin_query, event_bus = T.unsafe(nil)); end

  # source://cucumber-core//lib/cucumber/core/compiler.rb#30
  def done; end

  # source://cucumber-core//lib/cucumber/core/compiler.rb#25
  def pickle(pickle); end

  private

  # source://cucumber-core//lib/cucumber/core/compiler.rb#55
  def create_multiline_arg(pickle_step, _uri); end

  # source://cucumber-core//lib/cucumber/core/compiler.rb#37
  def create_test_case(pickle); end

  # source://cucumber-core//lib/cucumber/core/compiler.rb#47
  def create_test_step(pickle_step, uri); end

  # Returns the value of attribute gherkin_query.
  #
  # source://cucumber-core//lib/cucumber/core/compiler.rb#15
  def gherkin_query; end

  # Returns the value of attribute id_generator.
  #
  # source://cucumber-core//lib/cucumber/core/compiler.rb#15
  def id_generator; end

  # Returns the value of attribute receiver.
  #
  # source://cucumber-core//lib/cucumber/core/compiler.rb#15
  def receiver; end

  # source://cucumber-core//lib/cucumber/core/compiler.rb#86
  def source_line(id); end

  # source://cucumber-core//lib/cucumber/core/compiler.rb#82
  def source_line_for_pickle_tag(tag); end

  # source://cucumber-core//lib/cucumber/core/compiler.rb#74
  def source_lines_for_pickle(pickle); end

  # source://cucumber-core//lib/cucumber/core/compiler.rb#78
  def source_lines_for_pickle_step(pickle_step); end
end

class Cucumber::Core::Event
  class << self
    #  @return [Symbol] the underscored name of the class to be used
    #                   as the key in an event registry.
    #
    # source://cucumber-core//lib/cucumber/core/event.rb#43
    def event_id; end

    # Macro to generate new sub-classes of {Event} with
    # attribute readers.
    #
    # source://cucumber-core//lib/cucumber/core/event.rb#7
    def new(*attributes); end

    private

    # source://cucumber-core//lib/cucumber/core/event.rb#49
    def underscore(string); end
  end
end

# Event Bus
#
# Implements an in-process pub-sub event broadcaster allowing multiple observers
# to subscribe to events that fire as your tests are executed.
class Cucumber::Core::EventBus
  # @param registry [Hash{Symbol => Class}] a hash of event types to use on the bus
  # @return [EventBus] a new instance of EventBus
  #
  # source://cucumber-core//lib/cucumber/core/event_bus.rb#15
  def initialize(registry = T.unsafe(nil)); end

  #  Broadcast an event
  #
  # @raise [ArgumentError]
  #
  # source://cucumber-core//lib/cucumber/core/event_bus.rb#32
  def broadcast(event); end

  # Returns the value of attribute event_types.
  #
  # source://cucumber-core//lib/cucumber/core/event_bus.rb#12
  def event_types; end

  # source://cucumber-core//lib/cucumber/core/event_bus.rb#38
  def method_missing(event_id, *args); end

  #  Register for an event. The handler proc will be called back with each of the attributes
  # of the event.
  #
  # source://cucumber-core//lib/cucumber/core/event_bus.rb#23
  def on(event_id, handler_object = T.unsafe(nil), &handler_proc); end

  private

  # source://cucumber-core//lib/cucumber/core/event_bus.rb#45
  def broadcast_queued_events_to(handler, event_type); end

  # source://cucumber-core//lib/cucumber/core/event_bus.rb#53
  def handlers_for(event_class); end

  # @return [Boolean]
  #
  # source://cucumber-core//lib/cucumber/core/event_bus.rb#57
  def is_registered_id?(event_id); end

  # @return [Boolean]
  #
  # source://cucumber-core//lib/cucumber/core/event_bus.rb#61
  def is_registered_type?(event_type); end

  # @raise [ArgumentError]
  #
  # source://cucumber-core//lib/cucumber/core/event_bus.rb#65
  def validate_handler_and_event_id!(handler, event_id); end
end

module Cucumber::Core::Events
  class << self
    # Build an event registry to be passed to the {EventBus}
    # constructor from a list of types.
    #
    # Each type must respond to `event_id` so that it can be added
    # to the registry hash.
    #
    # @return [Hash{Symbol => Class}]
    #
    # source://cucumber-core//lib/cucumber/core/events.rb#97
    def build_registry(*types); end

    # The registry contains all the events registered in the core,
    # that will be used by the {EventBus} by default.
    #
    # source://cucumber-core//lib/cucumber/core/events.rb#77
    def registry; end
  end
end

class Cucumber::Core::Events::Envelope < ::Cucumber::Core::Event
  # Returns the value of attribute envelope.
  #
  # source://cucumber-core//lib/cucumber/core/events.rb#9
  def envelope; end
end

# Signals that a gherkin source has been parsed
class Cucumber::Core::Events::GherkinSourceParsed < ::Cucumber::Core::Event
  # @return [GherkinDocument] the GherkinDocument Ast Node
  #
  # source://cucumber-core//lib/cucumber/core/events.rb#15
  def gherkin_document; end
end

# Signals that a Test::Case was created from a Pickle
class Cucumber::Core::Events::TestCaseCreated < ::Cucumber::Core::Event
  # The source pickle step
  #
  # source://cucumber-core//lib/cucumber/core/events.rb#34
  def pickle; end

  # The created test step
  #
  # source://cucumber-core//lib/cucumber/core/events.rb#31
  def test_case; end
end

# Signals that a {Test::Case} has finished executing
class Cucumber::Core::Events::TestCaseFinished < ::Cucumber::Core::Event
  # @return [Test::Result] the result of running the {Test::Step}
  #
  # source://cucumber-core//lib/cucumber/core/events.rb#71
  def result; end

  # @return [Test::Case] that was executed
  #
  # source://cucumber-core//lib/cucumber/core/events.rb#68
  def test_case; end
end

# Signals that a {Test::Case} is about to be executed
class Cucumber::Core::Events::TestCaseStarted < ::Cucumber::Core::Event
  # @return [Test::Case] the test case to be executed
  #
  # source://cucumber-core//lib/cucumber/core/events.rb#41
  def test_case; end
end

# Signals that a Test::Step was created from a PickleStep
class Cucumber::Core::Events::TestStepCreated < ::Cucumber::Core::Event
  # The source pickle step
  #
  # source://cucumber-core//lib/cucumber/core/events.rb#25
  def pickle_step; end

  # The created test step
  #
  # source://cucumber-core//lib/cucumber/core/events.rb#22
  def test_step; end
end

# Signals that a {Test::Step} has finished executing
class Cucumber::Core::Events::TestStepFinished < ::Cucumber::Core::Event
  # @return [Test::Result] the result of running the {Test::Step}
  #
  # source://cucumber-core//lib/cucumber/core/events.rb#60
  def result; end

  # @return [Test::Step] the test step that was executed
  #
  # source://cucumber-core//lib/cucumber/core/events.rb#57
  def test_step; end
end

#  Signals that a {Test::Step} is about to be executed
class Cucumber::Core::Events::TestStepStarted < ::Cucumber::Core::Event
  # @return [Test::Step] the test step to be executed
  #
  # source://cucumber-core//lib/cucumber/core/events.rb#49
  def test_step; end
end

# Filters process test cases.
#
# Each filter must respond to the following protocol:
#
#   * `with_receiver(new_receiver)`
#   * `test_case(test_case, &describe_test_steps)`
#   * `done`
#
# The `with_receiver` method is used to assemble the filters into a chain. It should return a new instance of the
# filter with the receiver attribute set to the new receiver. The receiver will also respond to the filter protocol.
#
# When a `test_case` message is received, the filter can choose to:
#
# 1. pass the test_case directly to its receiver (no-op)
# 2. pass a modified copy of the test_case to its receiver
# 3. not pass the test_case to its receiver at all
#
# Finally, the `done` message is sent. A filter should pass this message directly to its receiver.
module Cucumber::Core::Filter
  class << self
    # Utility method for quick construction of filter classes.
    #
    # The attribute names passed to the Filter constructor will become private attributes of
    # your filter class.
    #
    # @example Example usage:
    #
    #   class BlankingFilter < Filter.new(:name_to_blank, :receiver)
    #   def test_case(test_case)
    #   if name_to_blank == test_case.name
    #   test_case.with_steps([]).describe_to(receiver)
    #   else
    #   test_case.describe_to(receiver)
    #   end
    #   end
    #   end
    #
    # source://cucumber-core//lib/cucumber/core/filter.rb#43
    def new(*attributes, &block); end
  end
end

module Cucumber::Core::Gherkin; end

class Cucumber::Core::Gherkin::Document
  # @return [Document] a new instance of Document
  #
  # source://cucumber-core//lib/cucumber/core/gherkin/document.rb#9
  def initialize(uri, body, language = T.unsafe(nil)); end

  # source://cucumber-core//lib/cucumber/core/gherkin/document.rb#19
  def ==(other); end

  # Returns the value of attribute body.
  #
  # source://cucumber-core//lib/cucumber/core/gherkin/document.rb#7
  def body; end

  # Returns the value of attribute language.
  #
  # source://cucumber-core//lib/cucumber/core/gherkin/document.rb#7
  def language; end

  # source://cucumber-core//lib/cucumber/core/gherkin/document.rb#15
  def to_s; end

  # Returns the value of attribute uri.
  #
  # source://cucumber-core//lib/cucumber/core/gherkin/document.rb#7
  def uri; end
end

class Cucumber::Core::Gherkin::ParseError < ::StandardError; end

class Cucumber::Core::Gherkin::Parser
  # @return [Parser] a new instance of Parser
  #
  # source://cucumber-core//lib/cucumber/core/gherkin/parser.rb#13
  def initialize(receiver, event_bus, gherkin_query); end

  # source://cucumber-core//lib/cucumber/core/gherkin/parser.rb#19
  def document(document); end

  # source://cucumber-core//lib/cucumber/core/gherkin/parser.rb#45
  def done; end

  # source://cucumber-core//lib/cucumber/core/gherkin/parser.rb#36
  def gherkin_options(document); end

  private

  # Returns the value of attribute event_bus.
  #
  # source://cucumber-core//lib/cucumber/core/gherkin/parser.rb#10
  def event_bus; end

  # Returns the value of attribute gherkin_query.
  #
  # source://cucumber-core//lib/cucumber/core/gherkin/parser.rb#10
  def gherkin_query; end

  # Returns the value of attribute receiver.
  #
  # source://cucumber-core//lib/cucumber/core/gherkin/parser.rb#10
  def receiver; end
end

module Cucumber::Core::Report; end

class Cucumber::Core::Report::Summary
  # @return [Summary] a new instance of Summary
  #
  # source://cucumber-core//lib/cucumber/core/report/summary.rb#8
  def initialize(event_bus); end

  # @return [Boolean]
  #
  # source://cucumber-core//lib/cucumber/core/report/summary.rb#15
  def ok?(be_strict = T.unsafe(nil)); end

  # Returns the value of attribute test_cases.
  #
  # source://cucumber-core//lib/cucumber/core/report/summary.rb#6
  def test_cases; end

  # Returns the value of attribute test_steps.
  #
  # source://cucumber-core//lib/cucumber/core/report/summary.rb#6
  def test_steps; end

  private

  # source://cucumber-core//lib/cucumber/core/report/summary.rb#21
  def subscribe_to(event_bus); end
end

module Cucumber::Core::Test; end

class Cucumber::Core::Test::Action
  # @raise [ArgumentError]
  # @return [Action] a new instance of Action
  #
  # source://cucumber-core//lib/cucumber/core/test/action.rb#10
  def initialize(location = T.unsafe(nil), &block); end

  # source://cucumber-core//lib/cucumber/core/test/action.rb#21
  def execute(*args); end

  # source://cucumber-core//lib/cucumber/core/test/action.rb#35
  def inspect; end

  # source://cucumber-core//lib/cucumber/core/test/action.rb#31
  def location; end

  # source://cucumber-core//lib/cucumber/core/test/action.rb#17
  def skip(*_arg0); end

  private

  # source://cucumber-core//lib/cucumber/core/test/action.rb#45
  def failed(exception); end

  # source://cucumber-core//lib/cucumber/core/test/action.rb#41
  def passed; end

  # source://cucumber-core//lib/cucumber/core/test/action.rb#49
  def skipped; end
end

class Cucumber::Core::Test::AroundHook
  # @return [AroundHook] a new instance of AroundHook
  #
  # source://cucumber-core//lib/cucumber/core/test/around_hook.rb#6
  def initialize(&block); end

  # source://cucumber-core//lib/cucumber/core/test/around_hook.rb#11
  def describe_to(visitor, *args, &continue); end

  # source://cucumber-core//lib/cucumber/core/test/around_hook.rb#19
  def execute(*args, &continue); end

  # @return [Boolean]
  #
  # source://cucumber-core//lib/cucumber/core/test/around_hook.rb#15
  def hook?; end

  private

  # source://cucumber-core//lib/cucumber/core/test/around_hook.rb#30
  def failed(exception); end
end

class Cucumber::Core::Test::Case
  # @raise [ArgumentError]
  # @return [Case] a new instance of Case
  #
  # source://cucumber-core//lib/cucumber/core/test/case.rb#12
  def initialize(id, name, test_steps, location, tags, language, around_hooks = T.unsafe(nil)); end

  # source://cucumber-core//lib/cucumber/core/test/case.rb#72
  def ==(other); end

  # Returns the value of attribute around_hooks.
  #
  # source://cucumber-core//lib/cucumber/core/test/case.rb#10
  def around_hooks; end

  # source://cucumber-core//lib/cucumber/core/test/case.rb#27
  def describe_to(visitor, *args); end

  # @return [Boolean]
  #
  # source://cucumber-core//lib/cucumber/core/test/case.rb#68
  def eql?(other); end

  # source://cucumber-core//lib/cucumber/core/test/case.rb#64
  def hash; end

  # Returns the value of attribute id.
  #
  # source://cucumber-core//lib/cucumber/core/test/case.rb#10
  def id; end

  # source://cucumber-core//lib/cucumber/core/test/case.rb#60
  def inspect; end

  # Returns the value of attribute language.
  #
  # source://cucumber-core//lib/cucumber/core/test/case.rb#10
  def language; end

  # Returns the value of attribute location.
  #
  # source://cucumber-core//lib/cucumber/core/test/case.rb#10
  def location; end

  # @return [Boolean]
  #
  # source://cucumber-core//lib/cucumber/core/test/case.rb#54
  def match_locations?(queried_locations); end

  # @return [Boolean]
  #
  # source://cucumber-core//lib/cucumber/core/test/case.rb#50
  def match_name?(name_regexp); end

  # @return [Boolean]
  #
  # source://cucumber-core//lib/cucumber/core/test/case.rb#46
  def match_tags?(*expressions); end

  # Returns the value of attribute name.
  #
  # source://cucumber-core//lib/cucumber/core/test/case.rb#10
  def name; end

  # source://cucumber-core//lib/cucumber/core/test/case.rb#23
  def step_count; end

  # Returns the value of attribute tags.
  #
  # source://cucumber-core//lib/cucumber/core/test/case.rb#10
  def tags; end

  # Returns the value of attribute test_steps.
  #
  # source://cucumber-core//lib/cucumber/core/test/case.rb#10
  def test_steps; end

  # source://cucumber-core//lib/cucumber/core/test/case.rb#42
  def with_around_hooks(around_hooks); end

  # source://cucumber-core//lib/cucumber/core/test/case.rb#38
  def with_steps(test_steps); end

  private

  # source://cucumber-core//lib/cucumber/core/test/case.rb#78
  def compose_around_hooks(visitor, *args, &block); end

  # @return [Boolean]
  #
  # source://cucumber-core//lib/cucumber/core/test/case.rb#84
  def match_single_tag_expression?(expression); end
end

# Step Definitions that match a plain text Step with a multiline argument table
# will receive it as an instance of DataTable. A DataTable object holds the data of a
# table parsed from a feature file and lets you access and manipulate the data
# in different ways.
#
# For example:
#
#   Given I have:
#     | a | b |
#     | c | d |
#
# And a matching StepDefinition:
#
#   Given /I have:/ do |table|
#     data = table.raw
#   end
#
# This will store <tt>[['a', 'b'], ['c', 'd']]</tt> in the <tt>data</tt> variable.
class Cucumber::Core::Test::DataTable
  # Creates a new instance. +raw+ should be an Array of Array of String
  # or an Array of Hash
  # You don't typically create your own DataTable objects - Cucumber will do
  # it internally and pass them to your Step Definitions.
  #
  # @return [DataTable] a new instance of DataTable
  #
  # source://cucumber-core//lib/cucumber/core/test/data_table.rb#31
  def initialize(rows); end

  # source://cucumber-core//lib/cucumber/core/test/data_table.rb#83
  def ==(other); end

  # @return [Boolean]
  #
  # source://cucumber-core//lib/cucumber/core/test/data_table.rb#46
  def data_table?; end

  # source://cucumber-core//lib/cucumber/core/test/data_table.rb#38
  def describe_to(visitor, *args); end

  # @return [Boolean]
  #
  # source://cucumber-core//lib/cucumber/core/test/data_table.rb#50
  def doc_string?; end

  # Creates a copy of this table
  #
  # source://cucumber-core//lib/cucumber/core/test/data_table.rb#56
  def dup; end

  # source://cucumber-core//lib/cucumber/core/test/data_table.rb#87
  def inspect; end

  # source://cucumber-core//lib/cucumber/core/test/data_table.rb#75
  def map(&block); end

  # Returns the value of attribute raw.
  #
  # source://cucumber-core//lib/cucumber/core/test/data_table.rb#36
  def raw; end

  # source://cucumber-core//lib/cucumber/core/test/data_table.rb#42
  def to_step_definition_arg; end

  # Returns a new, transposed table. Example:
  #
  #   | a | 7 | 4 |
  #   | b | 9 | 2 |
  #
  # Gets converted into the following:
  #
  #   | a | b |
  #   | 7 | 9 |
  #   | 4 | 2 |
  #
  # source://cucumber-core//lib/cucumber/core/test/data_table.rb#71
  def transpose; end

  private

  # source://cucumber-core//lib/cucumber/core/test/data_table.rb#101
  def ensure_array_of_array(array); end

  # source://cucumber-core//lib/cucumber/core/test/data_table.rb#105
  def hashes_to_array(hashes); end

  # source://cucumber-core//lib/cucumber/core/test/data_table.rb#93
  def verify_rows_are_same_length(raw); end
end

# Represents an inline argument in a step. Example:
#
#   Given the message
#     """
#     I like
#     Cucumber sandwich
#     """
#
# The text between the pair of <tt>"""</tt> is stored inside a DocString,
# which is yielded to the StepDefinition block as the last argument.
#
# The StepDefinition can then access the String via the #to_s method. In the
# example above, that would return: <tt>"I like\nCucumber sandwich"</tt>
#
# Note how the indentation from the source is stripped away.
class Cucumber::Core::Test::DocString < ::SimpleDelegator
  # @return [DocString] a new instance of DocString
  #
  # source://cucumber-core//lib/cucumber/core/test/doc_string.rb#25
  def initialize(content, content_type); end

  # source://cucumber-core//lib/cucumber/core/test/doc_string.rb#53
  def ==(other); end

  # Returns the value of attribute content.
  #
  # source://cucumber-core//lib/cucumber/core/test/doc_string.rb#23
  def content; end

  # Returns the value of attribute content_type.
  #
  # source://cucumber-core//lib/cucumber/core/test/doc_string.rb#23
  def content_type; end

  # @return [Boolean]
  #
  # source://cucumber-core//lib/cucumber/core/test/doc_string.rb#35
  def data_table?; end

  # source://cucumber-core//lib/cucumber/core/test/doc_string.rb#31
  def describe_to(visitor, *args); end

  # @return [Boolean]
  #
  # source://cucumber-core//lib/cucumber/core/test/doc_string.rb#39
  def doc_string?; end

  # source://cucumber-core//lib/cucumber/core/test/doc_string.rb#63
  def inspect; end

  # @raise [ArgumentError]
  #
  # source://cucumber-core//lib/cucumber/core/test/doc_string.rb#43
  def map; end

  # source://cucumber-core//lib/cucumber/core/test/doc_string.rb#49
  def to_step_definition_arg; end
end

class Cucumber::Core::Test::EmptyMultilineArgument
  # source://cucumber-core//lib/cucumber/core/test/empty_multiline_argument.rb#22
  def all_locations; end

  # @return [Boolean]
  #
  # source://cucumber-core//lib/cucumber/core/test/empty_multiline_argument.rb#10
  def data_table?; end

  # source://cucumber-core//lib/cucumber/core/test/empty_multiline_argument.rb#6
  def describe_to(*_arg0); end

  # @return [Boolean]
  #
  # source://cucumber-core//lib/cucumber/core/test/empty_multiline_argument.rb#14
  def doc_string?; end

  # source://cucumber-core//lib/cucumber/core/test/empty_multiline_argument.rb#26
  def inspect; end

  # source://cucumber-core//lib/cucumber/core/test/empty_multiline_argument.rb#18
  def map(&block); end
end

module Cucumber::Core::Test::HasLocation
  # source://cucumber-core//lib/cucumber/core/test/location.rb#158
  def attributes; end

  # source://cucumber-core//lib/cucumber/core/test/location.rb#167
  def comments; end

  # source://cucumber-core//lib/cucumber/core/test/location.rb#144
  def file; end

  # source://cucumber-core//lib/cucumber/core/test/location.rb#140
  def file_colon_line; end

  # source://cucumber-core//lib/cucumber/core/test/location.rb#148
  def line; end

  # source://cucumber-core//lib/cucumber/core/test/location.rb#152
  def location; end

  # source://cucumber-core//lib/cucumber/core/test/location.rb#172
  def multiline_arg; end

  # source://cucumber-core//lib/cucumber/core/test/location.rb#162
  def tags; end
end

class Cucumber::Core::Test::HookStep < ::Cucumber::Core::Test::Step
  # @return [HookStep] a new instance of HookStep
  #
  # source://cucumber-core//lib/cucumber/core/test/step.rb#60
  def initialize(id, text, location, action); end

  # @return [Boolean]
  #
  # source://cucumber-core//lib/cucumber/core/test/step.rb#64
  def hook?; end
end

class Cucumber::Core::Test::IncompatibleLocations < ::StandardError; end

module Cucumber::Core::Test::Location
  class << self
    # source://cucumber-core//lib/cucumber/core/test/location.rb#15
    def from_file_colon_line(file_colon_line); end

    # source://cucumber-core//lib/cucumber/core/test/location.rb#20
    def from_source_location(file, line); end

    # source://cucumber-core//lib/cucumber/core/test/location.rb#32
    def new(file, raw_lines = T.unsafe(nil)); end

    # source://cucumber-core//lib/cucumber/core/test/location.rb#11
    def of_caller(additional_depth = T.unsafe(nil)); end
  end
end

class Cucumber::Core::Test::Location::Lines < ::Struct
  # @return [Lines] a new instance of Lines
  #
  # source://cucumber-core//lib/cucumber/core/test/location.rb#95
  def initialize(raw_data); end

  # source://cucumber-core//lib/cucumber/core/test/location.rb#115
  def +(other); end

  # source://cucumber-core//lib/cucumber/core/test/location.rb#99
  def first; end

  # @return [Boolean]
  #
  # source://cucumber-core//lib/cucumber/core/test/location.rb#111
  def include?(other); end

  # source://cucumber-core//lib/cucumber/core/test/location.rb#127
  def inspect; end

  # source://cucumber-core//lib/cucumber/core/test/location.rb#107
  def max; end

  # source://cucumber-core//lib/cucumber/core/test/location.rb#103
  def min; end

  # source://cucumber-core//lib/cucumber/core/test/location.rb#120
  def to_s; end

  protected

  # Returns the value of attribute data
  #
  # @return [Object] the current value of data
  def data; end

  # @return [Boolean]
  #
  # source://cucumber-core//lib/cucumber/core/test/location.rb#133
  def range?; end
end

class Cucumber::Core::Test::Location::Precise < ::Struct
  # source://cucumber-core//lib/cucumber/core/test/location.rb#74
  def hash; end

  # @return [Boolean]
  #
  # source://cucumber-core//lib/cucumber/core/test/location.rb#56
  def include?(other_lines); end

  # source://cucumber-core//lib/cucumber/core/test/location.rb#86
  def inspect; end

  # source://cucumber-core//lib/cucumber/core/test/location.rb#60
  def line; end

  # @return [Boolean]
  #
  # source://cucumber-core//lib/cucumber/core/test/location.rb#64
  def match?(other); end

  # source://cucumber-core//lib/cucumber/core/test/location.rb#82
  def on_line(new_line); end

  # source://cucumber-core//lib/cucumber/core/test/location.rb#70
  def to_s; end

  # source://cucumber-core//lib/cucumber/core/test/location.rb#78
  def to_str; end
end

class Cucumber::Core::Test::Location::Wildcard < ::Struct
  # @return [Boolean]
  #
  # source://cucumber-core//lib/cucumber/core/test/location.rb#50
  def include?(lines); end

  # @return [Boolean]
  #
  # source://cucumber-core//lib/cucumber/core/test/location.rb#46
  def match?(other); end

  # source://cucumber-core//lib/cucumber/core/test/location.rb#42
  def to_s; end
end

# Sorts and filters scenarios based on a list of locations
class Cucumber::Core::Test::LocationsFilter
  # source://cucumber-core//lib/cucumber/core/test/filters/locations_filter.rb#16
  def done; end

  # source://cucumber-core//lib/cucumber/core/test/filters/locations_filter.rb#11
  def test_case(test_case); end

  private

  # source://cucumber-core//lib/cucumber/core/test/filters/locations_filter.rb#26
  def sorted_test_cases; end

  # source://cucumber-core//lib/cucumber/core/test/filters/locations_filter.rb#34
  def test_cases; end
end

class Cucumber::Core::Test::NameFilter
  # source://cucumber-core//lib/cucumber/core/test/filters/name_filter.rb#9
  def test_case(test_case); end

  private

  # @return [Boolean]
  #
  # source://cucumber-core//lib/cucumber/core/test/filters/name_filter.rb#18
  def accept?(test_case); end
end

module Cucumber::Core::Test::Result
  class << self
    # @return [Boolean]
    #
    # source://cucumber-core//lib/cucumber/core/test/result.rb#13
    def ok?(type, be_strict = T.unsafe(nil)); end

    # Defines to_sym on a result class for the given result type
    #
    # Defines predicate methods on a result class with only the given one
    # returning true
    #
    # source://cucumber-core//lib/cucumber/core/test/result.rb#22
    def query_methods(result_type); end
  end
end

class Cucumber::Core::Test::Result::Duration
  include ::Cucumber::Messages::TimeConversion

  # @return [Duration] a new instance of Duration
  #
  # source://cucumber-core//lib/cucumber/core/test/result.rb#402
  def initialize(nanoseconds); end

  # Returns the value of attribute nanoseconds.
  #
  # source://cucumber-core//lib/cucumber/core/test/result.rb#400
  def nanoseconds; end

  # source://cucumber-core//lib/cucumber/core/test/result.rb#406
  def to_message_duration; end
end

class Cucumber::Core::Test::Result::Failed
  # @raise [ArgumentError]
  # @return [Failed] a new instance of Failed
  #
  # source://cucumber-core//lib/cucumber/core/test/result.rb#108
  def initialize(duration, exception); end

  # source://cucumber-core//lib/cucumber/core/test/result.rb#115
  def describe_to(visitor, *args); end

  # Returns the value of attribute duration.
  #
  # source://cucumber-core//lib/cucumber/core/test/result.rb#102
  def duration; end

  # Returns the value of attribute exception.
  #
  # source://cucumber-core//lib/cucumber/core/test/result.rb#102
  def exception; end

  # @return [Boolean]
  #
  # source://cucumber-core//lib/cucumber/core/test/result.rb#140
  def ok?(be_strict = T.unsafe(nil)); end

  # source://cucumber-core//lib/cucumber/core/test/result.rb#126
  def to_message; end

  # source://cucumber-core//lib/cucumber/core/test/result.rb#122
  def to_s; end

  # source://cucumber-core//lib/cucumber/core/test/result.rb#148
  def with_appended_backtrace(step); end

  # source://cucumber-core//lib/cucumber/core/test/result.rb#144
  def with_duration(new_duration); end

  # source://cucumber-core//lib/cucumber/core/test/result.rb#153
  def with_filtered_backtrace(filter); end

  class << self
    # @return [Boolean]
    #
    # source://cucumber-core//lib/cucumber/core/test/result.rb#104
    def ok?(be_strict = T.unsafe(nil)); end
  end
end

# Flaky is not used directly as an execution result, but is used as a
# reporting result type for test cases that fails and the passes on
# retry, therefore only the class method self.ok? is needed.
class Cucumber::Core::Test::Result::Flaky
  class << self
    # @return [Boolean]
    #
    # source://cucumber-core//lib/cucumber/core/test/result.rb#162
    def ok?(be_strict = T.unsafe(nil)); end
  end
end

class Cucumber::Core::Test::Result::Passed
  # @raise [ArgumentError]
  # @return [Passed] a new instance of Passed
  #
  # source://cucumber-core//lib/cucumber/core/test/result.rb#64
  def initialize(duration); end

  # source://cucumber-core//lib/cucumber/core/test/result.rb#69
  def describe_to(visitor, *args); end

  # Returns the value of attribute duration.
  #
  # source://cucumber-core//lib/cucumber/core/test/result.rb#58
  def duration; end

  # Sets the attribute duration
  #
  # @param value the value to set the attribute duration to.
  #
  # source://cucumber-core//lib/cucumber/core/test/result.rb#58
  def duration=(_arg0); end

  # @return [Boolean]
  #
  # source://cucumber-core//lib/cucumber/core/test/result.rb#86
  def ok?(be_strict = T.unsafe(nil)); end

  # source://cucumber-core//lib/cucumber/core/test/result.rb#79
  def to_message; end

  # source://cucumber-core//lib/cucumber/core/test/result.rb#75
  def to_s; end

  # source://cucumber-core//lib/cucumber/core/test/result.rb#90
  def with_appended_backtrace(step); end

  # source://cucumber-core//lib/cucumber/core/test/result.rb#94
  def with_filtered_backtrace(filter); end

  class << self
    # @return [Boolean]
    #
    # source://cucumber-core//lib/cucumber/core/test/result.rb#60
    def ok?(be_strict = T.unsafe(nil)); end
  end
end

class Cucumber::Core::Test::Result::Pending < ::Cucumber::Core::Test::Result::Raisable
  # source://cucumber-core//lib/cucumber/core/test/result.rb#260
  def describe_to(visitor, *args); end

  # source://cucumber-core//lib/cucumber/core/test/result.rb#270
  def to_message; end

  # source://cucumber-core//lib/cucumber/core/test/result.rb#266
  def to_s; end

  class << self
    # @return [Boolean]
    #
    # source://cucumber-core//lib/cucumber/core/test/result.rb#256
    def ok?(be_strict = T.unsafe(nil)); end
  end
end

# Base class for exceptions that can be raised in a step definition causing
# the step to have that result.
class Cucumber::Core::Test::Result::Raisable < ::StandardError
  # @return [Raisable] a new instance of Raisable
  #
  # source://cucumber-core//lib/cucumber/core/test/result.rb#172
  def initialize(message = T.unsafe(nil), duration = T.unsafe(nil), backtrace = T.unsafe(nil)); end

  # Returns the value of attribute duration.
  #
  # source://cucumber-core//lib/cucumber/core/test/result.rb#170
  def duration; end

  # Returns the value of attribute message.
  #
  # source://cucumber-core//lib/cucumber/core/test/result.rb#170
  def message; end

  # @return [Boolean]
  #
  # source://cucumber-core//lib/cucumber/core/test/result.rb#198
  def ok?(be_strict = T.unsafe(nil)); end

  # source://cucumber-core//lib/cucumber/core/test/result.rb#186
  def with_appended_backtrace(step); end

  # source://cucumber-core//lib/cucumber/core/test/result.rb#182
  def with_duration(new_duration); end

  # source://cucumber-core//lib/cucumber/core/test/result.rb#193
  def with_filtered_backtrace(filter); end

  # source://cucumber-core//lib/cucumber/core/test/result.rb#178
  def with_message(new_message); end
end

# source://cucumber-core//lib/cucumber/core/test/result.rb#11
Cucumber::Core::Test::Result::STRICT_AFFECTED_TYPES = T.let(T.unsafe(nil), Array)

class Cucumber::Core::Test::Result::Skipped < ::Cucumber::Core::Test::Result::Raisable
  # source://cucumber-core//lib/cucumber/core/test/result.rb#235
  def describe_to(visitor, *args); end

  # source://cucumber-core//lib/cucumber/core/test/result.rb#245
  def to_message; end

  # source://cucumber-core//lib/cucumber/core/test/result.rb#241
  def to_s; end

  class << self
    # @return [Boolean]
    #
    # source://cucumber-core//lib/cucumber/core/test/result.rb#231
    def ok?(be_strict = T.unsafe(nil)); end
  end
end

# Handles the strict settings for the result types that are
# affected by the strict options (that is the STRICT_AFFECTED_TYPES).
class Cucumber::Core::Test::Result::StrictConfiguration
  # @return [StrictConfiguration] a new instance of StrictConfiguration
  #
  # source://cucumber-core//lib/cucumber/core/test/result.rb#284
  def initialize(strict_types = T.unsafe(nil)); end

  # source://cucumber-core//lib/cucumber/core/test/result.rb#314
  def merge!(other); end

  # @return [Boolean]
  #
  # source://cucumber-core//lib/cucumber/core/test/result.rb#321
  def set?(type); end

  # source://cucumber-core//lib/cucumber/core/test/result.rb#304
  def set_strict(setting, type = T.unsafe(nil)); end

  # Sets the attribute settings
  #
  # @param value the value to set the attribute settings to.
  #
  # source://cucumber-core//lib/cucumber/core/test/result.rb#281
  def settings=(_arg0); end

  # @return [Boolean]
  #
  # source://cucumber-core//lib/cucumber/core/test/result.rb#291
  def strict?(type = T.unsafe(nil)); end

  private

  # Returns the value of attribute settings.
  #
  # source://cucumber-core//lib/cucumber/core/test/result.rb#281
  def settings; end
end

#  An object that responds to the description protocol from the results
# and collects summary information.
#
# e.g.
#     summary = Result::Summary.new
#     Result::Passed.new(0).describe_to(summary)
#     puts summary.total_passed
#     => 1
class Cucumber::Core::Test::Result::Summary
  # @return [Summary] a new instance of Summary
  #
  # source://cucumber-core//lib/cucumber/core/test/result.rb#339
  def initialize; end

  # source://cucumber-core//lib/cucumber/core/test/result.rb#380
  def decrement_failed; end

  # source://cucumber-core//lib/cucumber/core/test/result.rb#367
  def duration(duration); end

  # Returns the value of attribute durations.
  #
  # source://cucumber-core//lib/cucumber/core/test/result.rb#337
  def durations; end

  # source://cucumber-core//lib/cucumber/core/test/result.rb#362
  def exception(exception); end

  # Returns the value of attribute exceptions.
  #
  # source://cucumber-core//lib/cucumber/core/test/result.rb#337
  def exceptions; end

  # source://cucumber-core//lib/cucumber/core/test/result.rb#345
  def method_missing(name, *args); end

  # @return [Boolean]
  #
  # source://cucumber-core//lib/cucumber/core/test/result.rb#353
  def ok?(be_strict = T.unsafe(nil)); end

  # source://cucumber-core//lib/cucumber/core/test/result.rb#372
  def total(for_status = T.unsafe(nil)); end

  private

  # source://cucumber-core//lib/cucumber/core/test/result.rb#386
  def get_total(method_name); end

  # source://cucumber-core//lib/cucumber/core/test/result.rb#391
  def increment_total(status); end
end

# source://cucumber-core//lib/cucumber/core/test/result.rb#10
Cucumber::Core::Test::Result::TYPES = T.let(T.unsafe(nil), Array)

class Cucumber::Core::Test::Result::Undefined < ::Cucumber::Core::Test::Result::Raisable
  # source://cucumber-core//lib/cucumber/core/test/result.rb#210
  def describe_to(visitor, *args); end

  # source://cucumber-core//lib/cucumber/core/test/result.rb#220
  def to_message; end

  # source://cucumber-core//lib/cucumber/core/test/result.rb#216
  def to_s; end

  class << self
    # @return [Boolean]
    #
    # source://cucumber-core//lib/cucumber/core/test/result.rb#206
    def ok?(be_strict = T.unsafe(nil)); end
  end
end

# Null object for results. Represents the state where we haven't run anything yet
class Cucumber::Core::Test::Result::Unknown
  # source://cucumber-core//lib/cucumber/core/test/result.rb#40
  def describe_to(visitor, *args); end

  # source://cucumber-core//lib/cucumber/core/test/result.rb#48
  def to_message; end

  # source://cucumber-core//lib/cucumber/core/test/result.rb#44
  def with_filtered_backtrace(filter); end
end

class Cucumber::Core::Test::Result::UnknownDuration
  include ::Cucumber::Messages::TimeConversion

  # source://cucumber-core//lib/cucumber/core/test/result.rb#425
  def nanoseconds; end

  # source://cucumber-core//lib/cucumber/core/test/result.rb#421
  def tap(&block); end

  # source://cucumber-core//lib/cucumber/core/test/result.rb#429
  def to_message_duration; end
end

class Cucumber::Core::Test::Runner
  # @return [Runner] a new instance of Runner
  #
  # source://cucumber-core//lib/cucumber/core/test/runner.rb#11
  def initialize(event_bus); end

  # source://cucumber-core//lib/cucumber/core/test/runner.rb#35
  def around_hook(hook, &continue); end

  # source://cucumber-core//lib/cucumber/core/test/runner.rb#42
  def done; end

  # source://cucumber-core//lib/cucumber/core/test/runner.rb#15
  def test_case(test_case, &descend); end

  # source://cucumber-core//lib/cucumber/core/test/runner.rb#26
  def test_step(test_step); end

  private

  # Returns the value of attribute event_bus.
  #
  # source://cucumber-core//lib/cucumber/core/test/runner.rb#8
  def event_bus; end

  # Returns the value of attribute running_test_case.
  #
  # source://cucumber-core//lib/cucumber/core/test/runner.rb#8
  def running_test_case; end

  # Returns the value of attribute running_test_step.
  #
  # source://cucumber-core//lib/cucumber/core/test/runner.rb#8
  def running_test_step; end
end

class Cucumber::Core::Test::Runner::RunningTestCase
  # @return [RunningTestCase] a new instance of RunningTestCase
  #
  # source://cucumber-core//lib/cucumber/core/test/runner.rb#47
  def initialize; end

  # source://cucumber-core//lib/cucumber/core/test/runner.rb#89
  def duration(step_duration, step_result); end

  # source://cucumber-core//lib/cucumber/core/test/runner.rb#85
  def exception(step_exception, step_result); end

  # source://cucumber-core//lib/cucumber/core/test/runner.rb#52
  def execute(test_step, &continue); end

  # source://cucumber-core//lib/cucumber/core/test/runner.rb#60
  def failed(step_result); end

  # source://cucumber-core//lib/cucumber/core/test/runner.rb#65
  def passed(step_result); end

  # source://cucumber-core//lib/cucumber/core/test/runner.rb#70
  def pending(message, step_result); end

  # source://cucumber-core//lib/cucumber/core/test/runner.rb#56
  def result; end

  # source://cucumber-core//lib/cucumber/core/test/runner.rb#75
  def skipped(step_result); end

  # source://cucumber-core//lib/cucumber/core/test/runner.rb#80
  def undefined(step_result); end

  private

  # Returns the value of attribute status.
  #
  # source://cucumber-core//lib/cucumber/core/test/runner.rb#93
  def status; end
end

module Cucumber::Core::Test::Runner::RunningTestCase::Status; end

class Cucumber::Core::Test::Runner::RunningTestCase::Status::Base
  # @return [Base] a new instance of Base
  #
  # source://cucumber-core//lib/cucumber/core/test/runner.rb#101
  def initialize(step_result); end

  # source://cucumber-core//lib/cucumber/core/test/runner.rb#105
  def execute(test_step, monitor, &continue); end

  # @raise [NoMethodError]
  #
  # source://cucumber-core//lib/cucumber/core/test/runner.rb#112
  def result; end

  private

  # Returns the value of attribute step_result.
  #
  # source://cucumber-core//lib/cucumber/core/test/runner.rb#98
  def step_result; end
end

class Cucumber::Core::Test::Runner::RunningTestCase::Status::Failing < ::Cucumber::Core::Test::Runner::RunningTestCase::Status::Base
  # source://cucumber-core//lib/cucumber/core/test/runner.rb#130
  def execute(test_step, monitor, &continue); end

  # source://cucumber-core//lib/cucumber/core/test/runner.rb#139
  def result(duration); end
end

class Cucumber::Core::Test::Runner::RunningTestCase::Status::Passing < ::Cucumber::Core::Test::Runner::RunningTestCase::Status::Base
  # source://cucumber-core//lib/cucumber/core/test/runner.rb#124
  def result(duration); end
end

class Cucumber::Core::Test::Runner::RunningTestCase::Status::Pending < ::Cucumber::Core::Test::Runner::RunningTestCase::Status::Failing; end

class Cucumber::Core::Test::Runner::RunningTestCase::Status::Skipping < ::Cucumber::Core::Test::Runner::RunningTestCase::Status::Failing
  # source://cucumber-core//lib/cucumber/core/test/runner.rb#147
  def result(duration); end
end

class Cucumber::Core::Test::Runner::RunningTestCase::Status::Unknown < ::Cucumber::Core::Test::Runner::RunningTestCase::Status::Base
  # source://cucumber-core//lib/cucumber/core/test/runner.rb#118
  def result(duration); end
end

class Cucumber::Core::Test::Step
  # @raise [ArgumentError]
  # @return [Step] a new instance of Step
  #
  # source://cucumber-core//lib/cucumber/core/test/step.rb#13
  def initialize(id, text, location, multiline_arg = T.unsafe(nil), action = T.unsafe(nil)); end

  # source://cucumber-core//lib/cucumber/core/test/step.rb#50
  def action_location; end

  # source://cucumber-core//lib/cucumber/core/test/step.rb#42
  def backtrace_line; end

  # source://cucumber-core//lib/cucumber/core/test/step.rb#22
  def describe_to(visitor, *args); end

  # source://cucumber-core//lib/cucumber/core/test/step.rb#34
  def execute(*args); end

  # @return [Boolean]
  #
  # source://cucumber-core//lib/cucumber/core/test/step.rb#26
  def hook?; end

  # Returns the value of attribute id.
  #
  # source://cucumber-core//lib/cucumber/core/test/step.rb#11
  def id; end

  # source://cucumber-core//lib/cucumber/core/test/step.rb#54
  def inspect; end

  # Returns the value of attribute location.
  #
  # source://cucumber-core//lib/cucumber/core/test/step.rb#11
  def location; end

  # Returns the value of attribute multiline_arg.
  #
  # source://cucumber-core//lib/cucumber/core/test/step.rb#11
  def multiline_arg; end

  # source://cucumber-core//lib/cucumber/core/test/step.rb#30
  def skip(*args); end

  # Returns the value of attribute text.
  #
  # source://cucumber-core//lib/cucumber/core/test/step.rb#11
  def text; end

  # source://cucumber-core//lib/cucumber/core/test/step.rb#46
  def to_s; end

  # source://cucumber-core//lib/cucumber/core/test/step.rb#38
  def with_action(action_location = T.unsafe(nil), &block); end
end

class Cucumber::Core::Test::Tag
  include ::Cucumber::Core::Test::HasLocation

  # @return [Tag] a new instance of Tag
  #
  # source://cucumber-core//lib/cucumber/core/test/tag.rb#10
  def initialize(location, name); end

  # source://cucumber-core//lib/cucumber/core/test/tag.rb#15
  def inspect; end

  # Returns the value of attribute name.
  #
  # source://cucumber-core//lib/cucumber/core/test/tag.rb#8
  def name; end
end

class Cucumber::Core::Test::TagFilter
  # source://cucumber-core//lib/cucumber/core/test/filters/tag_filter.rb#17
  def done; end

  # source://cucumber-core//lib/cucumber/core/test/filters/tag_filter.rb#9
  def test_case(test_case); end

  private

  # source://cucumber-core//lib/cucumber/core/test/filters/tag_filter.rb#24
  def test_cases; end
end

class Cucumber::Core::Test::TagFilter::TestCases
  # @return [TestCases] a new instance of TestCases
  #
  # source://cucumber-core//lib/cucumber/core/test/filters/tag_filter.rb#31
  def initialize; end

  # source://cucumber-core//lib/cucumber/core/test/filters/tag_filter.rb#35
  def <<(test_case); end

  # source://cucumber-core//lib/cucumber/core/test/filters/tag_filter.rb#42
  def with_tag_name(tag_name); end

  private

  # Returns the value of attribute test_cases_by_tag_name.
  #
  # source://cucumber-core//lib/cucumber/core/test/filters/tag_filter.rb#29
  def test_cases_by_tag_name; end
end

class Cucumber::Core::Test::Timer
  # source://cucumber-core//lib/cucumber/core/test/timer.rb#13
  def duration; end

  # source://cucumber-core//lib/cucumber/core/test/timer.rb#17
  def nsec; end

  # source://cucumber-core//lib/cucumber/core/test/timer.rb#21
  def sec; end

  # source://cucumber-core//lib/cucumber/core/test/timer.rb#8
  def start; end

  private

  # source://cucumber-core//lib/cucumber/core/test/timer.rb#27
  def time_in_nanoseconds; end
end

module Cucumber::Core::Test::Timer::MonotonicTime
  private

  # source://cucumber-core//lib/cucumber/core/test/timer.rb#35
  def time_in_nanoseconds; end

  class << self
    # source://cucumber-core//lib/cucumber/core/test/timer.rb#35
    def time_in_nanoseconds; end
  end
end

class Cucumber::Core::Test::UndefinedAction
  # @return [UndefinedAction] a new instance of UndefinedAction
  #
  # source://cucumber-core//lib/cucumber/core/test/action.rb#63
  def initialize(source_location); end

  # source://cucumber-core//lib/cucumber/core/test/action.rb#67
  def execute(*_arg0); end

  # Returns the value of attribute location.
  #
  # source://cucumber-core//lib/cucumber/core/test/action.rb#61
  def location; end

  # source://cucumber-core//lib/cucumber/core/test/action.rb#71
  def skip(*_arg0); end

  private

  # source://cucumber-core//lib/cucumber/core/test/action.rb#77
  def undefined; end
end

class Cucumber::Core::Test::UnskippableAction < ::Cucumber::Core::Test::Action
  # source://cucumber-core//lib/cucumber/core/test/action.rb#55
  def skip(*args); end
end

module Cucumber::CucumberExpressions; end

# source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/ast.rb#4
Cucumber::CucumberExpressions::ALTERNATION_CHARACTER = T.let(T.unsafe(nil), String)

class Cucumber::CucumberExpressions::AlternationNotAllowedInOptional < ::Cucumber::CucumberExpressions::CucumberExpressionError
  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/errors.rb#142
  def initialize(expression, current); end
end

class Cucumber::CucumberExpressions::AlternativeMayNotBeEmpty < ::Cucumber::CucumberExpressions::CucumberExpressionError
  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/errors.rb#54
  def initialize(node, expression); end
end

class Cucumber::CucumberExpressions::AlternativeMayNotExclusivelyContainOptionals < ::Cucumber::CucumberExpressions::CucumberExpressionError
  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/errors.rb#42
  def initialize(node, expression); end
end

class Cucumber::CucumberExpressions::AmbiguousParameterTypeError < ::Cucumber::CucumberExpressions::CucumberExpressionError
  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/errors.rb#187
  def initialize(parameter_type_regexp, expression_regexp, parameter_types, generated_expressions); end

  private

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/errors.rb#209
  def expressions(generated_expressions); end

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/errors.rb#205
  def parameter_type_names(parameter_types); end
end

class Cucumber::CucumberExpressions::Argument
  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/argument.rb#26
  def initialize(group, parameter_type); end

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/argument.rb#7
  def group; end

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/argument.rb#7
  def parameter_type; end

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/argument.rb#30
  def value(self_obj = T.unsafe(nil)); end

  class << self
    # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/argument.rb#9
    def build(tree_regexp, text, parameter_types); end
  end
end

# source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/ast.rb#7
Cucumber::CucumberExpressions::BEGIN_OPTIONAL_CHARACTER = T.let(T.unsafe(nil), String)

# source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/ast.rb#5
Cucumber::CucumberExpressions::BEGIN_PARAMETER_CHARACTER = T.let(T.unsafe(nil), String)

class Cucumber::CucumberExpressions::CantEscape < ::Cucumber::CucumberExpressions::CucumberExpressionError
  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/errors.rb#66
  def initialize(expression, index); end
end

class Cucumber::CucumberExpressions::CombinatorialGeneratedExpressionFactory
  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/combinatorial_generated_expression_factory.rb#7
  def initialize(expression_template, parameter_type_combinations); end

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/combinatorial_generated_expression_factory.rb#12
  def generate_expressions; end

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/combinatorial_generated_expression_factory.rb#21
  def generate_permutations(generated_expressions, depth, current_parameter_types); end
end

# source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/combinatorial_generated_expression_factory.rb#19
Cucumber::CucumberExpressions::CombinatorialGeneratedExpressionFactory::MAX_EXPRESSIONS = T.let(T.unsafe(nil), Integer)

class Cucumber::CucumberExpressions::CucumberExpression
  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/cucumber_expression.rb#12
  def initialize(expression, parameter_type_registry); end

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/cucumber_expression.rb#22
  def match(text); end

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/cucumber_expression.rb#30
  def regexp; end

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/cucumber_expression.rb#26
  def source; end

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/cucumber_expression.rb#34
  def to_s; end

  private

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/cucumber_expression.rb#117
  def assert_no_optionals(node, &raise_error); end

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/cucumber_expression.rb#112
  def assert_no_parameters(node, &raise_error); end

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/cucumber_expression.rb#107
  def assert_not_empty(node, &raise_error); end

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/cucumber_expression.rb#60
  def escape_regex(expression); end

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/cucumber_expression.rb#72
  def rewrite_alternation(node); end

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/cucumber_expression.rb#84
  def rewrite_alternative(node); end

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/cucumber_expression.rb#102
  def rewrite_expression(node); end

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/cucumber_expression.rb#64
  def rewrite_optional(node); end

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/cucumber_expression.rb#88
  def rewrite_parameter(node); end

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/cucumber_expression.rb#40
  def rewrite_to_regex(node); end
end

# source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/cucumber_expression.rb#10
Cucumber::CucumberExpressions::CucumberExpression::ESCAPE_PATTERN = T.let(T.unsafe(nil), Regexp)

class Cucumber::CucumberExpressions::CucumberExpressionError < ::StandardError
  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/errors.rb#7
  def build_message(index, expression, pointer, problem, solution); end

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/errors.rb#25
  def point_at(index); end

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/errors.rb#29
  def point_at_located(node); end
end

class Cucumber::CucumberExpressions::CucumberExpressionGenerator
  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/cucumber_expression_generator.rb#8
  def initialize(parameter_type_registry); end

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/cucumber_expression_generator.rb#12
  def generate_expressions(text); end

  private

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/cucumber_expression_generator.rb#71
  def create_parameter_type_matchers(text); end

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/cucumber_expression_generator.rb#81
  def create_parameter_type_matchers2(parameter_type, text); end

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/cucumber_expression_generator.rb#89
  def escape(s); end
end

class Cucumber::CucumberExpressions::CucumberExpressionParser
  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/cucumber_expression_parser.rb#8
  def parse(expression); end

  private

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/cucumber_expression_parser.rb#202
  def create_alternative_nodes(start, _end, separators, alternatives); end

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/cucumber_expression_parser.rb#173
  def looking_at(tokens, at, token); end

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/cucumber_expression_parser.rb#169
  def looking_at_any(tokens, at, token_types); end

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/cucumber_expression_parser.rb#118
  def parse_between(type, begin_token, end_token, parsers); end

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/cucumber_expression_parser.rb#140
  def parse_token(expression, parsers, tokens, start_at); end

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/cucumber_expression_parser.rb#149
  def parse_tokens_until(expression, parsers, tokens, start_at, end_tokens); end

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/cucumber_expression_parser.rb#185
  def split_alternatives(start, _end, alternation); end
end

class Cucumber::CucumberExpressions::CucumberExpressionTokenizer
  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/cucumber_expression_tokenizer.rb#7
  def tokenize(expression); end

  private

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/cucumber_expression_tokenizer.rb#57
  def convert_buffer_to_token(token_type); end

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/cucumber_expression_tokenizer.rb#89
  def should_create_new_token?(previous_token_type, current_token_type); end

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/cucumber_expression_tokenizer.rb#76
  def token_type_of(codepoint, treat_as_text); end
end

# source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/ast.rb#8
Cucumber::CucumberExpressions::END_OPTIONAL_CHARACTER = T.let(T.unsafe(nil), String)

# source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/ast.rb#6
Cucumber::CucumberExpressions::END_PARAMETER_CHARACTER = T.let(T.unsafe(nil), String)

# source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/ast.rb#3
Cucumber::CucumberExpressions::ESCAPE_CHARACTER = T.let(T.unsafe(nil), String)

class Cucumber::CucumberExpressions::GeneratedExpression
  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/generated_expression.rb#6
  def initialize(expression_template, parameters_types); end

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/generated_expression.rb#14
  def parameter_names; end

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/generated_expression.rb#4
  def parameter_types; end

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/generated_expression.rb#10
  def source; end

  private

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/generated_expression.rb#23
  def get_parameter_name(type_name, usage_by_type_name); end
end

class Cucumber::CucumberExpressions::Group
  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/group.rb#6
  def initialize(value, start, _end, children); end

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/group.rb#4
  def children; end

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/group.rb#4
  def end; end

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/group.rb#4
  def start; end

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/group.rb#4
  def value; end

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/group.rb#13
  def values; end
end

class Cucumber::CucumberExpressions::GroupBuilder
  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/group_builder.rb#8
  def initialize; end

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/group_builder.rb#13
  def add(group_builder); end

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/group_builder.rb#17
  def build(match, group_indices); end

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/group_builder.rb#27
  def capturing?; end

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/group_builder.rb#37
  def children; end

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/group_builder.rb#31
  def move_children_to(group_builder); end

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/group_builder.rb#23
  def set_non_capturing!; end

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/group_builder.rb#6
  def source; end

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/group_builder.rb#6
  def source=(_arg0); end
end

class Cucumber::CucumberExpressions::InvalidParameterTypeName < ::Cucumber::CucumberExpressions::CucumberExpressionError
  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/errors.rb#154
  def initialize(type_name); end
end

class Cucumber::CucumberExpressions::InvalidParameterTypeNameInNode < ::Cucumber::CucumberExpressions::CucumberExpressionError
  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/errors.rb#162
  def initialize(expression, token); end
end

class Cucumber::CucumberExpressions::MissingEndToken < ::Cucumber::CucumberExpressions::CucumberExpressionError
  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/errors.rb#127
  def initialize(expression, begin_token, end_token, current); end
end

class Cucumber::CucumberExpressions::Node
  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/ast.rb#11
  def initialize(type, nodes, token, start, _end); end

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/ast.rb#38
  def end; end

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/ast.rb#26
  def nodes; end

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/ast.rb#34
  def start; end

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/ast.rb#42
  def text; end

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/ast.rb#49
  def to_hash; end

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/ast.rb#30
  def token; end

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/ast.rb#22
  def type; end
end

module Cucumber::CucumberExpressions::NodeType; end

# source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/ast.rb#67
Cucumber::CucumberExpressions::NodeType::ALTERNATION = T.let(T.unsafe(nil), String)

# source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/ast.rb#68
Cucumber::CucumberExpressions::NodeType::ALTERNATIVE = T.let(T.unsafe(nil), String)

# source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/ast.rb#70
Cucumber::CucumberExpressions::NodeType::EXPRESSION = T.let(T.unsafe(nil), String)

# source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/ast.rb#66
Cucumber::CucumberExpressions::NodeType::OPTIONAL = T.let(T.unsafe(nil), String)

# source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/ast.rb#69
Cucumber::CucumberExpressions::NodeType::PARAMETER = T.let(T.unsafe(nil), String)

# source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/ast.rb#65
Cucumber::CucumberExpressions::NodeType::TEXT = T.let(T.unsafe(nil), String)

class Cucumber::CucumberExpressions::OptionalIsNotAllowedInOptional < ::Cucumber::CucumberExpressions::CucumberExpressionError
  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/errors.rb#102
  def initialize(node, expression); end
end

class Cucumber::CucumberExpressions::OptionalMayNotBeEmpty < ::Cucumber::CucumberExpressions::CucumberExpressionError
  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/errors.rb#78
  def initialize(node, expression); end
end

class Cucumber::CucumberExpressions::ParameterIsNotAllowedInOptional < ::Cucumber::CucumberExpressions::CucumberExpressionError
  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/errors.rb#90
  def initialize(node, expression); end
end

class Cucumber::CucumberExpressions::ParameterType
  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/parameter_type.rb#41
  def initialize(name, regexp, type, transformer, use_for_snippets, prefer_for_regexp_match); end

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/parameter_type.rb#57
  def <=>(other); end

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/parameter_type.rb#9
  def name; end

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/parameter_type.rb#24
  def prefer_for_regexp_match?; end

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/parameter_type.rb#9
  def regexps; end

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/parameter_type.rb#53
  def transform(self_obj, group_values); end

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/parameter_type.rb#9
  def type; end

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/parameter_type.rb#28
  def use_for_snippets?; end

  private

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/parameter_type.rb#71
  def regexp_source(regexp); end

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/parameter_type.rb#66
  def string_array(regexps); end

  class << self
    # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/parameter_type.rb#11
    def check_parameter_type_name(type_name); end

    # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/parameter_type.rb#17
    def is_valid_parameter_type_name(type_name); end
  end
end

# source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/parameter_type.rb#6
Cucumber::CucumberExpressions::ParameterType::ILLEGAL_PARAMETER_NAME_PATTERN = T.let(T.unsafe(nil), Regexp)

# source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/parameter_type.rb#7
Cucumber::CucumberExpressions::ParameterType::UNESCAPE_PATTERN = T.let(T.unsafe(nil), Regexp)

class Cucumber::CucumberExpressions::ParameterTypeMatcher
  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/parameter_type_matcher.rb#6
  def initialize(parameter_type, regexp, text, match_position = T.unsafe(nil)); end

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/parameter_type_matcher.rb#38
  def <=>(other); end

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/parameter_type_matcher.rb#11
  def advance_to(new_match_position); end

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/parameter_type_matcher.rb#22
  def find; end

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/parameter_type_matcher.rb#26
  def full_word?; end

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/parameter_type_matcher.rb#34
  def group; end

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/parameter_type_matcher.rb#4
  def parameter_type; end

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/parameter_type_matcher.rb#30
  def start; end

  private

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/parameter_type_matcher.rb#53
  def space_after_match_or_sentence_end?; end

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/parameter_type_matcher.rb#48
  def space_before_match_or_sentence_start?; end
end

class Cucumber::CucumberExpressions::ParameterTypeRegistry
  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/parameter_type_registry.rb#15
  def initialize; end

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/parameter_type_registry.rb#53
  def define_parameter_type(parameter_type); end

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/parameter_type_registry.rb#36
  def lookup_by_regexp(parameter_type_regexp, expression_regexp, text); end

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/parameter_type_registry.rb#32
  def lookup_by_type_name(name); end

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/parameter_type_registry.rb#49
  def parameter_types; end
end

# source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/parameter_type_registry.rb#13
Cucumber::CucumberExpressions::ParameterTypeRegistry::ANONYMOUS_REGEXP = T.let(T.unsafe(nil), Regexp)

# source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/parameter_type_registry.rb#10
Cucumber::CucumberExpressions::ParameterTypeRegistry::FLOAT_REGEXP = T.let(T.unsafe(nil), Regexp)

# source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/parameter_type_registry.rb#9
Cucumber::CucumberExpressions::ParameterTypeRegistry::INTEGER_REGEXPS = T.let(T.unsafe(nil), Array)

# source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/parameter_type_registry.rb#12
Cucumber::CucumberExpressions::ParameterTypeRegistry::STRING_REGEXP = T.let(T.unsafe(nil), Regexp)

# source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/parameter_type_registry.rb#11
Cucumber::CucumberExpressions::ParameterTypeRegistry::WORD_REGEXP = T.let(T.unsafe(nil), Regexp)

class Cucumber::CucumberExpressions::RegularExpression
  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/regular_expression.rb#9
  def initialize(expression_regexp, parameter_type_registry); end

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/regular_expression.rb#15
  def match(text); end

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/regular_expression.rb#35
  def regexp; end

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/regular_expression.rb#39
  def source; end

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/regular_expression.rb#43
  def to_s; end
end

class Cucumber::CucumberExpressions::TheEndOfLineCannotBeEscaped < ::Cucumber::CucumberExpressions::CucumberExpressionError
  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/errors.rb#114
  def initialize(expression); end
end

class Cucumber::CucumberExpressions::Token
  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/ast.rb#75
  def initialize(type, text, start, _end); end

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/ast.rb#91
  def end; end

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/ast.rb#87
  def start; end

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/ast.rb#83
  def text; end

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/ast.rb#179
  def to_hash; end

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/ast.rb#79
  def type; end

  class << self
    # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/ast.rb#99
    def can_escape(codepoint); end

    # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/ast.rb#95
    def is_escape_character(codepoint); end

    # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/ast.rb#162
    def purpose_of(token); end

    # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/ast.rb#145
    def symbol_of(token); end

    # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/ast.rb#123
    def type_of(codepoint); end
  end
end

module Cucumber::CucumberExpressions::TokenType; end

# source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/ast.rb#197
Cucumber::CucumberExpressions::TokenType::ALTERNATION = T.let(T.unsafe(nil), String)

# source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/ast.rb#193
Cucumber::CucumberExpressions::TokenType::BEGIN_OPTIONAL = T.let(T.unsafe(nil), String)

# source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/ast.rb#195
Cucumber::CucumberExpressions::TokenType::BEGIN_PARAMETER = T.let(T.unsafe(nil), String)

# source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/ast.rb#191
Cucumber::CucumberExpressions::TokenType::END_OF_LINE = T.let(T.unsafe(nil), String)

# source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/ast.rb#194
Cucumber::CucumberExpressions::TokenType::END_OPTIONAL = T.let(T.unsafe(nil), String)

# source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/ast.rb#196
Cucumber::CucumberExpressions::TokenType::END_PARAMETER = T.let(T.unsafe(nil), String)

# source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/ast.rb#190
Cucumber::CucumberExpressions::TokenType::START_OF_LINE = T.let(T.unsafe(nil), String)

# source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/ast.rb#198
Cucumber::CucumberExpressions::TokenType::TEXT = T.let(T.unsafe(nil), String)

# source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/ast.rb#192
Cucumber::CucumberExpressions::TokenType::WHITE_SPACE = T.let(T.unsafe(nil), String)

class Cucumber::CucumberExpressions::TreeRegexp
  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/tree_regexp.rb#9
  def initialize(regexp); end

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/tree_regexp.rb#7
  def group_builder; end

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/tree_regexp.rb#14
  def match(s); end

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/tree_regexp.rb#7
  def regexp; end

  private

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/tree_regexp.rb#48
  def create_group_builder(regexp); end

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/tree_regexp.rb#21
  def is_non_capturing(source, i); end
end

class Cucumber::CucumberExpressions::UndefinedParameterTypeError < ::Cucumber::CucumberExpressions::CucumberExpressionError
  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/errors.rb#176
  def initialize(node, expression, undefined_parameter_type_name); end

  # source://cucumber-cucumber-expressions/15.2.0/lib/cucumber/cucumber_expressions/errors.rb#174
  def undefined_parameter_type_name; end
end

module Cucumber::Deprecate; end

class Cucumber::Deprecate::AnsiString
  include ::Cucumber::Gherkin::Formatter::AnsiEscapes

  # source://cucumber/8.0.0/lib/cucumber/deprecate.rb#15
  def failure_message(message); end

  class << self
    # source://cucumber/8.0.0/lib/cucumber/deprecate.rb#11
    def failure_message(message); end
  end
end

class Cucumber::Deprecate::CliOption
  class << self
    # source://cucumber/8.0.0/lib/cucumber/deprecate.rb#21
    def deprecate(stream, option, message, remove_after_version); end
  end
end

module Cucumber::Deprecate::ForDevelopers
  class << self
    # source://cucumber/8.0.0/lib/cucumber/deprecate.rb#44
    def call(_message, _method, remove_after_version); end
  end
end

module Cucumber::Deprecate::ForUsers
  class << self
    # source://cucumber/8.0.0/lib/cucumber/deprecate.rb#34
    def call(message, method, remove_after_version); end
  end
end

# source://cucumber/8.0.0/lib/cucumber/deprecate.rb#49
Cucumber::Deprecate::STRATEGY = Cucumber::Deprecate::ForUsers

module Cucumber::Events
  class << self
    # source://cucumber/8.0.0/lib/cucumber/events.rb#21
    def make_event_bus; end

    # source://cucumber/8.0.0/lib/cucumber/events.rb#25
    def registry; end
  end
end

class Cucumber::Events::Envelope < ::Cucumber::Core::Event
  # source://cucumber/8.0.0/lib/cucumber/events/envelope.rb#6
  def envelope; end
end

class Cucumber::Events::GherkinSourceParsed < ::Cucumber::Core::Event
  # source://cucumber/8.0.0/lib/cucumber/events/gherkin_source_parsed.rb#8
  def gherkin_document; end
end

class Cucumber::Events::GherkinSourceRead < ::Cucumber::Core::Event
  # source://cucumber/8.0.0/lib/cucumber/events/gherkin_source_read.rb#11
  def body; end

  # source://cucumber/8.0.0/lib/cucumber/events/gherkin_source_read.rb#8
  def path; end
end

class Cucumber::Events::HookTestStepCreated < ::Cucumber::Core::Event
  # source://cucumber/8.0.0/lib/cucumber/events/hook_test_step_created.rb#9
  def hook; end

  # source://cucumber/8.0.0/lib/cucumber/events/hook_test_step_created.rb#9
  def test_step; end
end

class Cucumber::Events::StepActivated < ::Cucumber::Core::Event
  # source://cucumber/8.0.0/lib/cucumber/events/step_activated.rb#17
  def step_match; end

  # source://cucumber/8.0.0/lib/cucumber/events/step_activated.rb#12
  def test_step; end
end

class Cucumber::Events::StepDefinitionRegistered < ::Cucumber::Core::Event
  # source://cucumber/8.0.0/lib/cucumber/events/step_definition_registered.rb#12
  def step_definition; end
end

class Cucumber::Events::TestCaseCreated < ::Cucumber::Core::Event
  # source://cucumber/8.0.0/lib/cucumber/events/test_case_created.rb#9
  def pickle; end

  # source://cucumber/8.0.0/lib/cucumber/events/test_case_created.rb#9
  def test_case; end
end

class Cucumber::Events::TestCaseFinished < ::Cucumber::Core::Events::TestCaseFinished
  # source://cucumber/8.0.0/lib/cucumber/events/test_case_finished.rb#11
  def result; end

  # source://cucumber/8.0.0/lib/cucumber/events/test_case_finished.rb#8
  def test_case; end
end

class Cucumber::Events::TestCaseReady < ::Cucumber::Core::Event
  # source://cucumber/8.0.0/lib/cucumber/events/test_case_ready.rb#9
  def test_case; end
end

class Cucumber::Events::TestCaseStarted < ::Cucumber::Core::Events::TestCaseStarted
  # source://cucumber/8.0.0/lib/cucumber/events/test_case_started.rb#8
  def test_case; end
end

class Cucumber::Events::TestRunFinished < ::Cucumber::Core::Event
  # source://cucumber/8.0.0/lib/cucumber/events/test_run_finished.rb#9
  def success; end
end

class Cucumber::Events::TestRunStarted < ::Cucumber::Core::Event
  # source://cucumber/8.0.0/lib/cucumber/events/test_run_started.rb#11
  def test_cases; end
end

class Cucumber::Events::TestStepCreated < ::Cucumber::Core::Event
  # source://cucumber/8.0.0/lib/cucumber/events/test_step_created.rb#9
  def pickle_step; end

  # source://cucumber/8.0.0/lib/cucumber/events/test_step_created.rb#9
  def test_step; end
end

class Cucumber::Events::TestStepFinished < ::Cucumber::Core::Events::TestStepFinished
  # source://cucumber/8.0.0/lib/cucumber/events/test_step_finished.rb#11
  def result; end

  # source://cucumber/8.0.0/lib/cucumber/events/test_step_finished.rb#8
  def test_step; end
end

class Cucumber::Events::TestStepStarted < ::Cucumber::Core::Events::TestStepStarted
  # source://cucumber/8.0.0/lib/cucumber/events/test_step_started.rb#8
  def test_step; end
end

class Cucumber::Events::UndefinedParameterType < ::Cucumber::Core::Event
  # source://cucumber/8.0.0/lib/cucumber/events/undefined_parameter_type.rb#6
  def expression; end

  # source://cucumber/8.0.0/lib/cucumber/events/undefined_parameter_type.rb#6
  def type_name; end
end

class Cucumber::FeatureFolderNotFoundException < ::RuntimeError
  # source://cucumber/8.0.0/lib/cucumber/runtime.rb#38
  def initialize(path); end

  # source://cucumber/8.0.0/lib/cucumber/runtime.rb#43
  def message; end
end

class Cucumber::FileException < ::RuntimeError
  # source://cucumber/8.0.0/lib/cucumber/runtime.rb#28
  def initialize(original_exception, path); end

  # source://cucumber/8.0.0/lib/cucumber/runtime.rb#26
  def path; end
end

class Cucumber::FileNotFoundException < ::Cucumber::FileException; end

class Cucumber::FileSpecs
  # source://cucumber/8.0.0/lib/cucumber/file_specs.rb#10
  def initialize(file_specs); end

  # source://cucumber/8.0.0/lib/cucumber/file_specs.rb#20
  def files; end

  # source://cucumber/8.0.0/lib/cucumber/file_specs.rb#16
  def locations; end
end

# source://cucumber/8.0.0/lib/cucumber/file_specs.rb#8
Cucumber::FileSpecs::FILE_COLON_LINE_PATTERN = T.let(T.unsafe(nil), Regexp)

class Cucumber::FileSpecs::FileSpec
  # source://cucumber/8.0.0/lib/cucumber/file_specs.rb#25
  def initialize(spec); end

  # source://cucumber/8.0.0/lib/cucumber/file_specs.rb#31
  def file; end

  # source://cucumber/8.0.0/lib/cucumber/file_specs.rb#33
  def locations; end
end

module Cucumber::Filters; end

class Cucumber::Filters::ActivateSteps
  # source://cucumber/8.0.0/lib/cucumber/filters/activate_steps.rb#11
  def test_case(test_case); end
end

class Cucumber::Filters::ActivateSteps::CaseFilter
  # source://cucumber/8.0.0/lib/cucumber/filters/activate_steps.rb#16
  def initialize(test_case, step_match_search, configuration); end

  # source://cucumber/8.0.0/lib/cucumber/filters/activate_steps.rb#22
  def test_case; end

  private

  # source://cucumber/8.0.0/lib/cucumber/filters/activate_steps.rb#32
  def attempt_to_activate(test_step); end

  # source://cucumber/8.0.0/lib/cucumber/filters/activate_steps.rb#36
  def find_match(test_step); end

  # source://cucumber/8.0.0/lib/cucumber/filters/activate_steps.rb#28
  def new_test_steps; end
end

class Cucumber::Filters::ActivateSteps::CaseFilter::FindMatch
  # source://cucumber/8.0.0/lib/cucumber/filters/activate_steps.rb#41
  def initialize(step_match_search, configuration, test_step); end

  # source://cucumber/8.0.0/lib/cucumber/filters/activate_steps.rb#47
  def result; end

  private

  # source://cucumber/8.0.0/lib/cucumber/filters/activate_steps.rb#61
  def configuration; end

  # source://cucumber/8.0.0/lib/cucumber/filters/activate_steps.rb#64
  def match; end

  # source://cucumber/8.0.0/lib/cucumber/filters/activate_steps.rb#68
  def matches; end

  # source://cucumber/8.0.0/lib/cucumber/filters/activate_steps.rb#61
  def step_match_search; end

  # source://cucumber/8.0.0/lib/cucumber/filters/activate_steps.rb#61
  def test_step; end
end

class Cucumber::Filters::ApplyAfterHooks
  # source://cucumber/8.0.0/lib/cucumber/filters/apply_after_hooks.rb#6
  def test_case(test_case); end
end

class Cucumber::Filters::ApplyAfterStepHooks
  # source://cucumber/8.0.0/lib/cucumber/filters/apply_after_step_hooks.rb#8
  def test_case(test_case); end
end

class Cucumber::Filters::ApplyAroundHooks
  # source://cucumber/8.0.0/lib/cucumber/filters/apply_around_hooks.rb#8
  def test_case(test_case); end
end

class Cucumber::Filters::ApplyBeforeHooks
  # source://cucumber/8.0.0/lib/cucumber/filters/apply_before_hooks.rb#6
  def test_case(test_case); end
end

class Cucumber::Filters::BroadcastTestCaseReadyEvent
  # source://cucumber/8.0.0/lib/cucumber/filters/broadcast_test_case_ready_event.rb#6
  def test_case(test_case); end
end

class Cucumber::Filters::BroadcastTestRunStartedEvent
  # source://cucumber/8.0.0/lib/cucumber/filters/broadcast_test_run_started_event.rb#8
  def initialize(config, receiver = T.unsafe(nil)); end

  # source://cucumber/8.0.0/lib/cucumber/filters/broadcast_test_run_started_event.rb#18
  def done; end

  # source://cucumber/8.0.0/lib/cucumber/filters/broadcast_test_run_started_event.rb#13
  def test_case(test_case); end
end

class Cucumber::Filters::GatedReceiver
  # source://cucumber/8.0.0/lib/cucumber/filters/gated_receiver.rb#6
  def initialize(receiver); end

  # source://cucumber/8.0.0/lib/cucumber/filters/gated_receiver.rb#16
  def done; end

  # source://cucumber/8.0.0/lib/cucumber/filters/gated_receiver.rb#11
  def test_case(test_case); end
end

class Cucumber::Filters::PrepareWorld
  # source://cucumber/8.0.0/lib/cucumber/filters/prepare_world.rb#10
  def test_case(test_case); end
end

class Cucumber::Filters::PrepareWorld::CaseFilter
  # source://cucumber/8.0.0/lib/cucumber/filters/prepare_world.rb#15
  def initialize(runtime, original_test_case); end

  # source://cucumber/8.0.0/lib/cucumber/filters/prepare_world.rb#20
  def test_case; end

  private

  # source://cucumber/8.0.0/lib/cucumber/filters/prepare_world.rb#33
  def scenario; end
end

class Cucumber::Filters::Quit
  # source://cucumber/8.0.0/lib/cucumber/filters/quit.rb#6
  def initialize(receiver = T.unsafe(nil)); end

  # source://cucumber/8.0.0/lib/cucumber/filters/quit.rb#15
  def done; end

  # source://cucumber/8.0.0/lib/cucumber/filters/quit.rb#10
  def test_case(test_case); end

  # source://cucumber/8.0.0/lib/cucumber/filters/quit.rb#20
  def with_receiver(receiver); end
end

class Cucumber::Filters::Randomizer
  # source://cucumber/8.0.0/lib/cucumber/filters/randomizer.rb#9
  def initialize(seed, receiver = T.unsafe(nil)); end

  # source://cucumber/8.0.0/lib/cucumber/filters/randomizer.rb#20
  def done; end

  # source://cucumber/8.0.0/lib/cucumber/filters/randomizer.rb#15
  def test_case(test_case); end

  # source://cucumber/8.0.0/lib/cucumber/filters/randomizer.rb#28
  def with_receiver(receiver); end

  private

  # source://cucumber/8.0.0/lib/cucumber/filters/randomizer.rb#41
  def seed; end

  # source://cucumber/8.0.0/lib/cucumber/filters/randomizer.rb#34
  def shuffled_test_cases; end
end

class Cucumber::Filters::Retry
  # source://cucumber/8.0.0/lib/cucumber/filters/retry.rb#10
  def test_case(test_case); end

  private

  # source://cucumber/8.0.0/lib/cucumber/filters/retry.rb#23
  def retry_required?(test_case, event); end

  # source://cucumber/8.0.0/lib/cucumber/filters/retry.rb#27
  def test_case_counts; end
end

class Cucumber::Filters::TagLimitExceededError < ::StandardError
  # source://cucumber/8.0.0/lib/cucumber/filters/tag_limits.rb#10
  def initialize(*limit_breaches); end
end

class Cucumber::Filters::TagLimits
  # source://cucumber/8.0.0/lib/cucumber/filters/tag_limits.rb#16
  def initialize(tag_limits, receiver = T.unsafe(nil)); end

  # source://cucumber/8.0.0/lib/cucumber/filters/tag_limits.rb#29
  def done; end

  # source://cucumber/8.0.0/lib/cucumber/filters/tag_limits.rb#23
  def test_case(test_case); end

  # source://cucumber/8.0.0/lib/cucumber/filters/tag_limits.rb#35
  def with_receiver(receiver); end

  private

  # source://cucumber/8.0.0/lib/cucumber/filters/tag_limits.rb#41
  def gated_receiver; end

  # source://cucumber/8.0.0/lib/cucumber/filters/tag_limits.rb#41
  def test_case_index; end

  # source://cucumber/8.0.0/lib/cucumber/filters/tag_limits.rb#41
  def verifier; end
end

class Cucumber::Filters::TagLimits::TestCaseIndex
  # source://cucumber/8.0.0/lib/cucumber/filters/tag_limits/test_case_index.rb#7
  def initialize; end

  # source://cucumber/8.0.0/lib/cucumber/filters/tag_limits/test_case_index.rb#11
  def add(test_case); end

  # source://cucumber/8.0.0/lib/cucumber/filters/tag_limits/test_case_index.rb#17
  def count_by_tag_name(tag_name); end

  # source://cucumber/8.0.0/lib/cucumber/filters/tag_limits/test_case_index.rb#21
  def locations_of_tag_name(tag_name); end

  private

  # source://cucumber/8.0.0/lib/cucumber/filters/tag_limits/test_case_index.rb#27
  def index; end

  # source://cucumber/8.0.0/lib/cucumber/filters/tag_limits/test_case_index.rb#27
  def index=(_arg0); end
end

class Cucumber::Filters::TagLimits::Verifier
  # source://cucumber/8.0.0/lib/cucumber/filters/tag_limits/verifier.rb#7
  def initialize(tag_limits); end

  # source://cucumber/8.0.0/lib/cucumber/filters/tag_limits/verifier.rb#11
  def verify!(test_case_index); end

  private

  # source://cucumber/8.0.0/lib/cucumber/filters/tag_limits/verifier.rb#18
  def collect_breaches(test_case_index); end

  # source://cucumber/8.0.0/lib/cucumber/filters/tag_limits/verifier.rb#26
  def tag_limits; end
end

class Cucumber::Filters::TagLimits::Verifier::Breach
  # source://cucumber/8.0.0/lib/cucumber/filters/tag_limits/verifier.rb#31
  def initialize(tag_name, limit, locations); end

  # source://cucumber/8.0.0/lib/cucumber/filters/tag_limits/verifier.rb#37
  def to_s; end

  private

  # source://cucumber/8.0.0/lib/cucumber/filters/tag_limits/verifier.rb#50
  def limit; end

  # source://cucumber/8.0.0/lib/cucumber/filters/tag_limits/verifier.rb#50
  def locations; end

  # source://cucumber/8.0.0/lib/cucumber/filters/tag_limits/verifier.rb#46
  def tag_count; end

  # source://cucumber/8.0.0/lib/cucumber/filters/tag_limits/verifier.rb#50
  def tag_name; end
end

# source://cucumber/8.0.0/lib/cucumber/filters/tag_limits/verifier.rb#29
Cucumber::Filters::TagLimits::Verifier::Breach::INDENT = T.let(T.unsafe(nil), String)

module Cucumber::FixRuby21Bug9285
  # source://cucumber/8.0.0/lib/cucumber/runtime.rb#20
  def message; end
end

module Cucumber::Formatter; end

module Cucumber::Formatter::ANSIColor
  include ::Cucumber::Term::ANSIColor

  # source://cucumber/8.0.0/lib/cucumber/formatter/ansicolor.rb#89
  def apply_custom_colors(colors); end

  # source://cucumber/8.0.0/lib/cucumber/formatter/ansicolor.rb#111
  def comment(text = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/formatter/ansicolor.rb#115
  def comment_param(text = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/formatter/ansicolor.rb#121
  def cukes(n); end

  # source://cucumber/8.0.0/lib/cucumber/formatter/ansicolor.rb#111
  def failed(text = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/formatter/ansicolor.rb#115
  def failed_param(text = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/formatter/ansicolor.rb#111
  def flaky(text = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/formatter/ansicolor.rb#115
  def flaky_param(text = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/formatter/ansicolor.rb#125
  def green_cukes(n); end

  # source://cucumber/8.0.0/lib/cucumber/formatter/ansicolor.rb#111
  def outline(text = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/formatter/ansicolor.rb#115
  def outline_param(text = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/formatter/ansicolor.rb#111
  def passed(text = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/formatter/ansicolor.rb#115
  def passed_param(text = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/formatter/ansicolor.rb#111
  def pending(text = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/formatter/ansicolor.rb#115
  def pending_param(text = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/formatter/ansicolor.rb#129
  def red_cukes(n); end

  # source://cucumber/8.0.0/lib/cucumber/formatter/ansicolor.rb#111
  def skipped(text = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/formatter/ansicolor.rb#115
  def skipped_param(text = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/formatter/ansicolor.rb#111
  def tag(text = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/formatter/ansicolor.rb#115
  def tag_param(text = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/formatter/ansicolor.rb#111
  def undefined(text = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/formatter/ansicolor.rb#115
  def undefined_param(text = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/formatter/ansicolor.rb#133
  def yellow_cukes(n); end

  private

  # source://cucumber/8.0.0/lib/cucumber/formatter/ansicolor.rb#140
  def apply_styles(styles, text = T.unsafe(nil), &proc); end
end

# source://cucumber/8.0.0/lib/cucumber/formatter/ansicolor.rb#67
Cucumber::Formatter::ANSIColor::ALIASES = T.let(T.unsafe(nil), Hash)

module Cucumber::Formatter::Console
  include ::Cucumber::Formatter::Duration
  extend ::Cucumber::Term::ANSIColor
  extend ::Cucumber::Formatter::ANSIColor

  # source://cucumber/8.0.0/lib/cucumber/formatter/console.rb#174
  def attach(src, media_type); end

  # source://cucumber/8.0.0/lib/cucumber/formatter/console.rb#118
  def collect_snippet_data(test_step, ast_lookup); end

  # source://cucumber/8.0.0/lib/cucumber/formatter/console.rb#124
  def collect_undefined_parameter_type_names(undefined_parameter_type); end

  # source://cucumber/8.0.0/lib/cucumber/formatter/console.rb#165
  def do_print_passing_wip(passed_messages); end

  # source://cucumber/8.0.0/lib/cucumber/formatter/console.rb#189
  def do_print_profile_information(profiles); end

  # source://cucumber/8.0.0/lib/cucumber/formatter/console.rb#141
  def do_print_snippets(snippet_text_proc); end

  # source://cucumber/8.0.0/lib/cucumber/formatter/console.rb#199
  def do_print_undefined_parameter_type_snippet(type_name); end

  # source://cucumber/8.0.0/lib/cucumber/formatter/console.rb#102
  def exception_message_string(e, indent_amount); end

  # source://cucumber/8.0.0/lib/cucumber/formatter/console.rb#35
  def format_step(keyword, step_match, status, source_indent); end

  # source://cucumber/8.0.0/lib/cucumber/formatter/console.rb#48
  def format_string(o, status); end

  # source://cucumber/8.0.0/lib/cucumber/formatter/console.rb#217
  def indent(string, padding); end

  # source://cucumber/8.0.0/lib/cucumber/formatter/console.rb#110
  def linebreaks(msg, max); end

  # source://cucumber/8.0.0/lib/cucumber/formatter/console.rb#66
  def print_element_messages(element_messages, status, kind); end

  # source://cucumber/8.0.0/lib/cucumber/formatter/console.rb#59
  def print_elements(elements, status, kind); end

  # source://cucumber/8.0.0/lib/cucumber/formatter/console.rb#97
  def print_exception(e, status, indent); end

  # source://cucumber/8.0.0/lib/cucumber/formatter/console.rb#154
  def print_passing_wip(config, passed_test_cases, ast_lookup); end

  # source://cucumber/8.0.0/lib/cucumber/formatter/console.rb#183
  def print_profile_information; end

  # source://cucumber/8.0.0/lib/cucumber/formatter/console.rb#128
  def print_snippets(options); end

  # source://cucumber/8.0.0/lib/cucumber/formatter/console.rb#80
  def print_statistics(duration, config, counts, issues); end

  private

  # source://cucumber/8.0.0/lib/cucumber/formatter/console.rb#237
  def element_messages(elements, status); end

  # source://cucumber/8.0.0/lib/cucumber/formatter/console.rb#229
  def format_for(*keys); end

  # source://cucumber/8.0.0/lib/cucumber/formatter/console.rb#247
  def snippet_text(step_keyword, step_name, multiline_arg); end
end

# source://cucumber/8.0.0/lib/cucumber/formatter/console.rb#227
Cucumber::Formatter::Console::FORMATS = T.let(T.unsafe(nil), Hash)

class Cucumber::Formatter::Console::SnippetData
  # source://cucumber/8.0.0/lib/cucumber/formatter/console.rb#257
  def initialize(actual_keyword, step); end

  # source://cucumber/8.0.0/lib/cucumber/formatter/console.rb#255
  def actual_keyword; end

  # source://cucumber/8.0.0/lib/cucumber/formatter/console.rb#255
  def step; end
end

class Cucumber::Formatter::CurlOptionParser
  class << self
    # source://cucumber/8.0.0/lib/cucumber/formatter/http_io.rb#21
    def parse(options); end

    # source://cucumber/8.0.0/lib/cucumber/formatter/http_io.rb#57
    def parse_header(header_arg); end

    # source://cucumber/8.0.0/lib/cucumber/formatter/http_io.rb#51
    def remove_arg_for(args, arg); end
  end
end

module Cucumber::Formatter::Duration
  # source://cucumber/8.0.0/lib/cucumber/formatter/duration.rb#9
  def format_duration(seconds); end
end

class Cucumber::Formatter::FailFast
  # source://cucumber/8.0.0/lib/cucumber/formatter/fail_fast.rb#9
  def initialize(configuration); end
end

class Cucumber::Formatter::Fanout < ::BasicObject
  # source://cucumber/8.0.0/lib/cucumber/formatter/fanout.rb#11
  def initialize(recipients); end

  # source://cucumber/8.0.0/lib/cucumber/formatter/fanout.rb#15
  def method_missing(message, *args); end

  private

  # source://cucumber/8.0.0/lib/cucumber/formatter/fanout.rb#8
  def recipients; end

  # source://cucumber/8.0.0/lib/cucumber/formatter/fanout.rb#23
  def respond_to_missing?(name, include_private = T.unsafe(nil)); end
end

class Cucumber::Formatter::HTTPIO
  class << self
    # source://cucumber/8.0.0/lib/cucumber/formatter/http_io.rb#12
    def open(url, https_verify_mode = T.unsafe(nil), reporter = T.unsafe(nil)); end
  end
end

class Cucumber::Formatter::IOHTTPBuffer
  # source://cucumber/8.0.0/lib/cucumber/formatter/http_io.rb#68
  def initialize(uri, method, headers = T.unsafe(nil), https_verify_mode = T.unsafe(nil), reporter = T.unsafe(nil)); end

  # source://cucumber/8.0.0/lib/cucumber/formatter/http_io.rb#77
  def close; end

  # source://cucumber/8.0.0/lib/cucumber/formatter/http_io.rb#94
  def closed?; end

  # source://cucumber/8.0.0/lib/cucumber/formatter/http_io.rb#90
  def flush; end

  # source://cucumber/8.0.0/lib/cucumber/formatter/http_io.rb#66
  def headers; end

  # source://cucumber/8.0.0/lib/cucumber/formatter/http_io.rb#66
  def method; end

  # source://cucumber/8.0.0/lib/cucumber/formatter/http_io.rb#66
  def uri; end

  # source://cucumber/8.0.0/lib/cucumber/formatter/http_io.rb#86
  def write(data); end

  private

  # source://cucumber/8.0.0/lib/cucumber/formatter/http_io.rb#142
  def build_client(uri, https_verify_mode); end

  # source://cucumber/8.0.0/lib/cucumber/formatter/http_io.rb#133
  def build_request(uri, method, headers); end

  # source://cucumber/8.0.0/lib/cucumber/formatter/http_io.rb#100
  def send_content(uri, method, headers, attempt = T.unsafe(nil)); end
end

class Cucumber::Formatter::IgnoreMissingMessages < ::BasicObject
  # source://cucumber/8.0.0/lib/cucumber/formatter/ignore_missing_messages.rb#6
  def initialize(receiver); end

  # source://cucumber/8.0.0/lib/cucumber/formatter/ignore_missing_messages.rb#10
  def method_missing(message, *args); end

  private

  # source://cucumber/8.0.0/lib/cucumber/formatter/ignore_missing_messages.rb#14
  def respond_to_missing?(name, include_private = T.unsafe(nil)); end
end

module Cucumber::Formatter::Io
  mixes_in_class_methods ::Cucumber::Formatter::Io::ClassMethods

  private

  # source://cucumber/8.0.0/lib/cucumber/formatter/io.rb#71
  def ensure_dir(path, name); end

  # source://cucumber/8.0.0/lib/cucumber/formatter/io.rb#63
  def ensure_file(path, name); end

  # source://cucumber/8.0.0/lib/cucumber/formatter/io.rb#12
  def ensure_io(path_or_url_or_io, error_stream); end

  # source://cucumber/8.0.0/lib/cucumber/formatter/io.rb#55
  def io?(path_or_url_or_io); end

  # source://cucumber/8.0.0/lib/cucumber/formatter/io.rb#59
  def url?(path_or_url_or_io); end

  class << self
    # source://cucumber/8.0.0/lib/cucumber/formatter/io.rb#71
    def ensure_dir(path, name); end

    # source://cucumber/8.0.0/lib/cucumber/formatter/io.rb#63
    def ensure_file(path, name); end

    # source://cucumber/8.0.0/lib/cucumber/formatter/io.rb#12
    def ensure_io(path_or_url_or_io, error_stream); end

    # source://cucumber/8.0.0/lib/cucumber/formatter/io.rb#51
    def included(formatter_class); end

    # source://cucumber/8.0.0/lib/cucumber/formatter/io.rb#55
    def io?(path_or_url_or_io); end

    # source://cucumber/8.0.0/lib/cucumber/formatter/io.rb#59
    def url?(path_or_url_or_io); end
  end
end

module Cucumber::Formatter::Io::ClassMethods
  # source://cucumber/8.0.0/lib/cucumber/formatter/io.rb#29
  def new(*args, &block); end
end

class Cucumber::Formatter::NoReporter
  # source://cucumber/8.0.0/lib/cucumber/formatter/url_reporter.rb#14
  def report(banner); end
end

class Cucumber::Formatter::PublishBannerPrinter
  include ::Cucumber::Term::Banner

  # source://cucumber/8.0.0/lib/cucumber/formatter/publish_banner_printer.rb#10
  def initialize(configuration); end

  # source://cucumber/8.0.0/lib/cucumber/formatter/publish_banner_printer.rb#19
  def display_publish_ad(io); end

  # source://cucumber/8.0.0/lib/cucumber/formatter/publish_banner_printer.rb#64
  def highlight(text); end

  # source://cucumber/8.0.0/lib/cucumber/formatter/publish_banner_printer.rb#68
  def link(text); end

  # source://cucumber/8.0.0/lib/cucumber/formatter/publish_banner_printer.rb#72
  def pre(text); end
end

class Cucumber::Formatter::URLReporter
  # source://cucumber/8.0.0/lib/cucumber/formatter/url_reporter.rb#4
  def initialize(io); end

  # source://cucumber/8.0.0/lib/cucumber/formatter/url_reporter.rb#8
  def report(banner); end
end

module Cucumber::Gherkin; end

class Cucumber::Gherkin::DataTableParser
  # source://cucumber/8.0.0/lib/cucumber/gherkin/data_table_parser.rb#9
  def initialize(builder); end

  # source://cucumber/8.0.0/lib/cucumber/gherkin/data_table_parser.rb#36
  def feature_header; end

  # source://cucumber/8.0.0/lib/cucumber/gherkin/data_table_parser.rb#28
  def gherkin_options; end

  # source://cucumber/8.0.0/lib/cucumber/gherkin/data_table_parser.rb#13
  def parse(text); end
end

module Cucumber::Gherkin::Formatter; end

module Cucumber::Gherkin::Formatter::AnsiEscapes
  # source://cucumber/8.0.0/lib/cucumber/gherkin/formatter/ansi_escapes.rb#78
  def comments; end

  # source://cucumber/8.0.0/lib/cucumber/gherkin/formatter/ansi_escapes.rb#82
  def comments_arg; end

  # source://cucumber/8.0.0/lib/cucumber/gherkin/formatter/ansi_escapes.rb#78
  def executing; end

  # source://cucumber/8.0.0/lib/cucumber/gherkin/formatter/ansi_escapes.rb#82
  def executing_arg; end

  # source://cucumber/8.0.0/lib/cucumber/gherkin/formatter/ansi_escapes.rb#78
  def failed; end

  # source://cucumber/8.0.0/lib/cucumber/gherkin/formatter/ansi_escapes.rb#82
  def failed_arg; end

  # source://cucumber/8.0.0/lib/cucumber/gherkin/formatter/ansi_escapes.rb#78
  def outline; end

  # source://cucumber/8.0.0/lib/cucumber/gherkin/formatter/ansi_escapes.rb#82
  def outline_arg; end

  # source://cucumber/8.0.0/lib/cucumber/gherkin/formatter/ansi_escapes.rb#78
  def passed; end

  # source://cucumber/8.0.0/lib/cucumber/gherkin/formatter/ansi_escapes.rb#82
  def passed_arg; end

  # source://cucumber/8.0.0/lib/cucumber/gherkin/formatter/ansi_escapes.rb#78
  def pending; end

  # source://cucumber/8.0.0/lib/cucumber/gherkin/formatter/ansi_escapes.rb#82
  def pending_arg; end

  # source://cucumber/8.0.0/lib/cucumber/gherkin/formatter/ansi_escapes.rb#87
  def reset; end

  # source://cucumber/8.0.0/lib/cucumber/gherkin/formatter/ansi_escapes.rb#78
  def skipped; end

  # source://cucumber/8.0.0/lib/cucumber/gherkin/formatter/ansi_escapes.rb#82
  def skipped_arg; end

  # source://cucumber/8.0.0/lib/cucumber/gherkin/formatter/ansi_escapes.rb#78
  def tag; end

  # source://cucumber/8.0.0/lib/cucumber/gherkin/formatter/ansi_escapes.rb#82
  def tag_arg; end

  # source://cucumber/8.0.0/lib/cucumber/gherkin/formatter/ansi_escapes.rb#78
  def undefined; end

  # source://cucumber/8.0.0/lib/cucumber/gherkin/formatter/ansi_escapes.rb#82
  def undefined_arg; end

  # source://cucumber/8.0.0/lib/cucumber/gherkin/formatter/ansi_escapes.rb#91
  def up(n); end
end

# source://cucumber/8.0.0/lib/cucumber/gherkin/formatter/ansi_escapes.rb#56
Cucumber::Gherkin::Formatter::AnsiEscapes::ALIASES = T.let(T.unsafe(nil), Hash)

# source://cucumber/8.0.0/lib/cucumber/gherkin/formatter/ansi_escapes.rb#43
Cucumber::Gherkin::Formatter::AnsiEscapes::COLORS = T.let(T.unsafe(nil), Hash)

module Cucumber::Gherkin::Formatter::Escaping
  # source://cucumber/8.0.0/lib/cucumber/gherkin/formatter/escaping.rb#13
  def escape_cell(sym); end
end

module Cucumber::Gherkin::I18n
  class << self
    # source://cucumber/8.0.0/lib/cucumber/gherkin/i18n.rb#7
    def code_keyword_for(gherkin_keyword); end

    # source://cucumber/8.0.0/lib/cucumber/gherkin/i18n.rb#11
    def code_keywords_for(gherkin_keywords); end
  end
end

class Cucumber::Gherkin::StepsParser
  # source://cucumber/8.0.0/lib/cucumber/gherkin/steps_parser.rb#9
  def initialize(builder, language); end

  # source://cucumber/8.0.0/lib/cucumber/gherkin/steps_parser.rb#35
  def feature_header(dialect); end

  # source://cucumber/8.0.0/lib/cucumber/gherkin/steps_parser.rb#26
  def gherkin_options; end

  # source://cucumber/8.0.0/lib/cucumber/gherkin/steps_parser.rb#14
  def parse(text); end
end

module Cucumber::Glue
  class << self
    # source://cucumber/8.0.0/lib/cucumber/glue/registry_and_more.rb#227
    def backtrace_line(proc, name); end
  end
end

class Cucumber::Glue::ArityMismatchError < ::StandardError; end

module Cucumber::Glue::Dsl
  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def A(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def AN(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Aber(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Ac(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Ach(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Adott(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#71
  def After(*tag_expressions, name: T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#123
  def AfterAll(name: T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#86
  def AfterStep(*tag_expressions, name: T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Agus(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Ak(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Akkor(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Alavez(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Ale(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Aleshores(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Ali(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Allgitout(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Allora(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Alors(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Als(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Ama(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Amennyiben(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Amikor(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Amma(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Ampak(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def An(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Ananging(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Ancaq(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def And(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Angenommen(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Anrhegediga(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Ansin(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Antonces(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Apabila(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#80
  def Around(*tag_expressions, name: T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Ataktiež(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Ataké(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Atesa(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Atiež(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Atunci(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Atès(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Avast(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Aye(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Azároveň(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def BUT(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Bagi(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Banjur(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#65
  def Before(*tag_expressions, name: T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#117
  def BeforeAll(name: T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Bet(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Bila(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Biết(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Blimey(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Buh(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def But(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def ButattheendofthedayIreckon(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Cal(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Cand(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Cando(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Ce(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Cho(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Comehellorhighwater(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Cuan(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Cuando(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Cuirigcásgo(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Cuirigcásgur(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Cuirigcásnach(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Cuirigcásnár(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Când(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def DEN(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def DaHghubejlu(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Dada(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Dadas(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Dadena(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Dadeno(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Dado(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Dados(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Daes(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Dan(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Dann(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Dano(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Daos(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Dar(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Data(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Date(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Datefiind(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Datfiind(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Dati(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Datifiind(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Dato(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Datăfiind(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Dau(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Daus(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Daţifiind(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Dațifiind(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def De(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Dengan(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Denyousegotta(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Diasumsikan(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Diberi(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Diketahui(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Diyelimki(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Do(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Donada(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Donat(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Donc(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Donitaĵo(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Dun(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Duota(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Dáu(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def E(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Eeldades(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Ef(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def En(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Entao(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Entonces(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Então(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Entón(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Entós(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Epi(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Et(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Etantdonné(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Etantdonnée(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Etantdonnées(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Etantdonnéqu(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Etantdonnéque(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Etantdonnés(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Etqu(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Etque(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Eğerki(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Fakat(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Fixinto(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Gangway(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Gdy(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Gegebensei(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Gegebenseien(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Gegeven(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Gegewe(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Gitt(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Given(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Givet(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Givun(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Ha(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Həm(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def I(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def ICANHAZ(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def In(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#111
  def InstallPlugin(name: T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Ir(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Itsjustunbelievable(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Ja(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Jeśli(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Jeżeli(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Jika(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Kad(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Kada(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Kadar(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Kai(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Kaj(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Když(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Kemudian(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Ketika(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Keď(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Khi(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Kiedy(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Ko(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Koga(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Komence(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Kui(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Kuid(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Kun(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Lan(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Le(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Lesaa(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Letgoandhaul(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Logo(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Lorsqu(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Lorsque(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Lè(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Lèsaa(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Ma(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Maar(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Mais(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Maisqu(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Maisque(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Majd(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Mając(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Maka(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Manawa(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Mas(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Men(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Menawa(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Mutta(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Nalika(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Nalikaning(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Nanging(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Nato(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Nhưng(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Niin(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Njuk(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def No(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Nuaira(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Nuairba(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Nuairnach(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Nuairnár(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def När(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Når(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Nəvaxtki(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Och(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Og(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Ohalda(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Oletetaan(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Ond(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Onda(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Oraz(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Ozaman(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Pak(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#90
  def ParameterType(options); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Pero(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Peru(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Però(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Podano(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Pokiaľ(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Pokud(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Potem(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Potom(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Privzeto(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Pryd(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Quan(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Quand(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Quando(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Quickoutofthechute(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Sachant(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Sachantqu(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Sachantque(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Se(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Sed(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Si(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Siis(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Sipoze(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def SipozeKe(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Sipozeke(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Soit(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Stel(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Så(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Tad(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Tada(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Tak(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Takrat(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Tapi(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Ter(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Tetapi(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Tha(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Thathe(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Then(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def There’snotreebutbearssomefruit(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Thurh(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Thì(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Toda(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Togash(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Tooright(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Tutaqki(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Ukoliko(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Un(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Und(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Ve(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Vendar(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Verilir(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Và(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Və(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def WEN(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Wanneer(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def WellnowholdonIllyouwhat(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Wenn(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def When(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#59
  def World(*world_modules, **namespaced_world_modules, &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Wtedy(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Wun(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Y(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Ya(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Yeahnah(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Yknow(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Yna(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Youseknowlikewhen(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Youseknowwhenyousegot(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Zadan(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Zadani(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Zadano(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Zadate(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Zadati(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Zadato(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Zakładając(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Zakładającże(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Zapredpokladu(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Zapředpokladu(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Zaradi(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Zatim(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def a(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def ach(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def an(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def awer(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def dann(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def ej(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def ghunoblu(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#106
  def if_nil(value, default); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def latlh(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def mä(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def qaSDI(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def register_rb_step_definition(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def ugeholl(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def vaj(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def wann(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def És(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Étantdonné(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Étantdonnée(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Étantdonnées(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Étantdonnéqu(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Étantdonnéque(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Étantdonnés(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Ða(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Ðaðe(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Ðurh(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Þa(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Þaþe(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Þegar(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Þurh(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Þá(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Če(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Şi(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Əgər(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Și(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Όταν(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Αλλά(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Δεδομένου(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Και(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Τότε(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def І(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def А(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Агар(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Але(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Али(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Аммо(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Анх(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Атакож(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Бирок(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Ва(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Вә(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Гэхдээ(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Дадена(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Дадено(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Дано(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Допустим(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Если(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Задате(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Задати(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Задато(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Затем(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def И(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Иначе(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Кад(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Када(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Кога(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Когато(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Когда(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Коли(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Ктомуже(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Лекин(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Ләкин(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Мөн(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Нехай(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Но(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Нәтиҗәдә(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Онда(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Припустимо(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Припустимощо(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Пусть(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Та(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Также(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def То(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Тогаш(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Тогда(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Тоді(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Тэгэхэд(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Тэгээд(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Унда(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Харин(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Хэрэв(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Якщо(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Үүнийдараа(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Һәм(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Әгәр(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Әйтик(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Әмма(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Өгөгдсөннь(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Ապա(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Բայց(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Դիցուք(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Եթե(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Եվ(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def Երբ(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def אבל(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def אז(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def אזי(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def בהינתן(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def וגם(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def כאשר(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def آنگاه(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def اذاً(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def اما(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def اور(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def اگر(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def بافرض(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def بالفرض(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def بفرض(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def تب(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def ثم(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def جب(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def عندما(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def فرضکیا(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def لكن(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def لیکن(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def متى(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def هنگامی(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def و(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def پھر(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def अगर(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def अनी(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def आणि(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def और(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def कदा(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def किन्तु(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def चूंकि(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def जब(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def जर(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def जेव्हा(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def तथा(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def तदा(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def तब(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def तर(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def तसेच(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def तेव्हा(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def त्यसपछि(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def दिइएको(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def दिएको(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def दिलेल्याप्रमाणे(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def पण(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def पर(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def परंतु(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def परन्तु(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def मग(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def यदि(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def र(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def ਅਤੇ(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def ਜਦੋਂ(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def ਜਿਵੇਂਕਿ(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def ਜੇਕਰ(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def ਤਦ(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def ਪਰ(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def અને(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def આપેલછે(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def ક્યારે(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def પછી(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def પણ(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def அப்பொழுது(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def ஆனால்(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def எப்போது(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def கொடுக்கப்பட்ட(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def மற்றும்(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def மேலும்(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def అప్పుడు(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def ఈపరిస్థితిలో(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def కాని(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def చెప్పబడినది(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def మరియు(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def ಆದರೆ(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def ನಂತರ(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def ನೀಡಿದ(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def ಮತ್ತು(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def ಸ್ಥಿತಿಯನ್ನು(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def กำหนดให้(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def ดังนั้น(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def เมื่อ(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def แต่(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def และ(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def და(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def მაგ­რამ(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def მაშინ(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def მოცემული(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def როდესაც(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def かつ(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def しかし(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def ただし(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def ならば(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def もし(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def 並且(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def 但し(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def 但是(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def 假如(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def 假定(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def 假設(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def 假设(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def 前提(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def 同时(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def 同時(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def 并且(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def 当(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def 當(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def 而且(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def 那么(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def 那麼(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def 그러면(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def 그리고(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def 단(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def 만약(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def 만일(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def 먼저(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def 조건(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def 하지만(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def 🎬(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def 😂(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def 😐(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def 😔(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#142
  def 🙏(regexp, symbol = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  class << self
    # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#14
    def alias_adverb(adverb); end

    # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#18
    def build_rb_world_factory(world_modules, namespaced_world_modules, proc); end

    # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#26
    def define_parameter_type(parameter_type); end

    # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#12
    def rb_language=(_arg0); end

    # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#22
    def register_rb_hook(phase, tag_names, proc, name: T.unsafe(nil)); end

    # source://cucumber/8.0.0/lib/cucumber/glue/dsl.rb#30
    def register_rb_step_definition(regexp, proc_or_sym, options = T.unsafe(nil)); end
  end
end

class Cucumber::Glue::Hook
  # source://cucumber/8.0.0/lib/cucumber/glue/hook.rb#11
  def initialize(id, registry, tag_expressions, proc, name: T.unsafe(nil)); end

  # source://cucumber/8.0.0/lib/cucumber/glue/hook.rb#9
  def id; end

  # source://cucumber/8.0.0/lib/cucumber/glue/hook.rb#21
  def invoke(pseudo_method, arguments, &block); end

  # source://cucumber/8.0.0/lib/cucumber/glue/hook.rb#9
  def location; end

  # source://cucumber/8.0.0/lib/cucumber/glue/hook.rb#9
  def name; end

  # source://cucumber/8.0.0/lib/cucumber/glue/hook.rb#9
  def tag_expressions; end

  # source://cucumber/8.0.0/lib/cucumber/glue/hook.rb#32
  def to_envelope; end

  private

  # source://cucumber/8.0.0/lib/cucumber/glue/hook.rb#55
  def fail_for_old_style_tag_expressions(tag_expressions); end

  # source://cucumber/8.0.0/lib/cucumber/glue/hook.rb#50
  def sanitize_tag_expressions(tag_expressions); end
end

class Cucumber::Glue::InvokeInWorld
  class << self
    # source://cucumber/8.0.0/lib/cucumber/glue/invoke_in_world.rb#42
    def cucumber_compatible_arity?(args, block); end

    # source://cucumber/8.0.0/lib/cucumber/glue/invoke_in_world.rb#26
    def cucumber_instance_exec_in(world, check_arity, pseudo_method, *args, &block); end

    # source://cucumber/8.0.0/lib/cucumber/glue/invoke_in_world.rb#49
    def cucumber_run_with_backtrace_filtering(pseudo_method); end

    # source://cucumber/8.0.0/lib/cucumber/glue/invoke_in_world.rb#10
    def replace_instance_exec_invocation_line!(backtrace, instance_exec_invocation_line, pseudo_method); end
  end
end

# source://cucumber/8.0.0/lib/cucumber/glue/invoke_in_world.rb#57
Cucumber::Glue::InvokeInWorld::INSTANCE_EXEC_OFFSET = T.let(T.unsafe(nil), Integer)

class Cucumber::Glue::MultipleWorld < ::StandardError
  # source://cucumber/8.0.0/lib/cucumber/glue/registry_and_more.rb#31
  def initialize(first_proc, second_proc); end
end

class Cucumber::Glue::NilWorld < ::StandardError
  # source://cucumber/8.0.0/lib/cucumber/glue/registry_and_more.rb#24
  def initialize; end
end

module Cucumber::Glue::ProtoWorld
  # source://cucumber/8.0.0/lib/cucumber/glue/proto_world.rb#77
  def ask(question, timeout_seconds = T.unsafe(nil)); end

  # source://cucumber/8.0.0/lib/cucumber/glue/proto_world.rb#91
  def attach(file, media_type = T.unsafe(nil)); end

  # source://cucumber/8.0.0/lib/cucumber/glue/proto_world.rb#120
  def inspect; end

  # source://cucumber/8.0.0/lib/cucumber/glue/proto_world.rb#81
  def log(*messages); end

  # source://cucumber/8.0.0/lib/cucumber/glue/proto_world.rb#103
  def pending(message = T.unsafe(nil)); end

  # source://cucumber/8.0.0/lib/cucumber/glue/proto_world.rb#115
  def skip_this_scenario(message = T.unsafe(nil)); end

  # source://cucumber/8.0.0/lib/cucumber/glue/proto_world.rb#30
  def step(name, raw_multiline_arg = T.unsafe(nil)); end

  # source://cucumber/8.0.0/lib/cucumber/glue/proto_world.rb#41
  def steps(steps_text); end

  # source://cucumber/8.0.0/lib/cucumber/glue/proto_world.rb#72
  def table(text_or_table); end

  # source://cucumber/8.0.0/lib/cucumber/glue/proto_world.rb#125
  def to_s; end

  class << self
    # source://cucumber/8.0.0/lib/cucumber/glue/proto_world.rb#130
    def for(runtime, language); end
  end
end

# source://cucumber/8.0.0/lib/cucumber/glue/proto_world.rb#212
Cucumber::Glue::ProtoWorld::AnsiEscapes = Cucumber::Gherkin::Formatter::AnsiEscapes

class Cucumber::Glue::RegistryAndMore
  # source://cucumber/8.0.0/lib/cucumber/glue/registry_and_more.rb#56
  def initialize(runtime, configuration); end

  # source://cucumber/8.0.0/lib/cucumber/glue/registry_and_more.rb#157
  def add_hook(phase, hook); end

  # source://cucumber/8.0.0/lib/cucumber/glue/registry_and_more.rb#151
  def after_all; end

  # source://cucumber/8.0.0/lib/cucumber/glue/registry_and_more.rb#174
  def available_step_definition(regexp_source, file_colon_line); end

  # source://cucumber/8.0.0/lib/cucumber/glue/registry_and_more.rb#145
  def before_all; end

  # source://cucumber/8.0.0/lib/cucumber/glue/registry_and_more.rb#127
  def begin_scenario(test_case); end

  # source://cucumber/8.0.0/lib/cucumber/glue/registry_and_more.rb#100
  def build_rb_world_factory(world_modules, namespaced_world_modules, proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/registry_and_more.rb#162
  def clear_hooks; end

  # source://cucumber/8.0.0/lib/cucumber/glue/registry_and_more.rb#182
  def create_expression(string_or_regexp); end

  # source://cucumber/8.0.0/lib/cucumber/glue/registry_and_more.rb#45
  def current_world; end

  # source://cucumber/8.0.0/lib/cucumber/glue/registry_and_more.rb#81
  def define_parameter_type(parameter_type); end

  # source://cucumber/8.0.0/lib/cucumber/glue/registry_and_more.rb#135
  def end_scenario; end

  # source://cucumber/8.0.0/lib/cucumber/glue/registry_and_more.rb#166
  def hooks_for(phase, scenario); end

  # source://cucumber/8.0.0/lib/cucumber/glue/registry_and_more.rb#139
  def install_plugin(configuration, registry); end

  # source://cucumber/8.0.0/lib/cucumber/glue/registry_and_more.rb#178
  def invoked_step_definition(regexp_source, file_colon_line); end

  # source://cucumber/8.0.0/lib/cucumber/glue/registry_and_more.rb#115
  def load_code_file(code_file); end

  # source://cucumber/8.0.0/lib/cucumber/glue/registry_and_more.rb#75
  def register_rb_hook(phase, tag_expressions, proc, name: T.unsafe(nil)); end

  # source://cucumber/8.0.0/lib/cucumber/glue/registry_and_more.rb#87
  def register_rb_step_definition(string_or_regexp, proc_or_sym, options); end

  # source://cucumber/8.0.0/lib/cucumber/glue/registry_and_more.rb#45
  def step_definitions; end

  # source://cucumber/8.0.0/lib/cucumber/glue/registry_and_more.rb#67
  def step_matches(name_to_match); end

  # source://cucumber/8.0.0/lib/cucumber/glue/registry_and_more.rb#170
  def unmatched_step_definitions; end

  private

  # source://cucumber/8.0.0/lib/cucumber/glue/registry_and_more.rb#214
  def available_step_definition_hash; end

  # source://cucumber/8.0.0/lib/cucumber/glue/registry_and_more.rb#222
  def hooks; end

  # source://cucumber/8.0.0/lib/cucumber/glue/registry_and_more.rb#218
  def invoked_step_definition_hash; end

  # source://cucumber/8.0.0/lib/cucumber/glue/registry_and_more.rb#199
  def parameter_type_envelope(parameter_type); end

  class << self
    # source://cucumber/8.0.0/lib/cucumber/glue/registry_and_more.rb#189
    def cli_snippet_type_options; end
  end
end

class Cucumber::Glue::RegistryWrapper
  # source://cucumber/8.0.0/lib/cucumber/glue/registry_wrapper.rb#8
  def initialize(registry); end

  # source://cucumber/8.0.0/lib/cucumber/glue/registry_wrapper.rb#20
  def create_expression(string_or_regexp); end

  # source://cucumber/8.0.0/lib/cucumber/glue/registry_wrapper.rb#26
  def current_world; end
end

module Cucumber::Glue::Snippet; end

# source://cucumber/8.0.0/lib/cucumber/glue/snippet.rb#6
Cucumber::Glue::Snippet::ARGUMENT_PATTERNS = T.let(T.unsafe(nil), Array)

class Cucumber::Glue::Snippet::BaseSnippet
  # source://cucumber/8.0.0/lib/cucumber/glue/snippet.rb#28
  def initialize(cucumber_expression_generator, code_keyword, step_name, multiline_argument); end

  # source://cucumber/8.0.0/lib/cucumber/glue/snippet.rb#40
  def step; end

  # source://cucumber/8.0.0/lib/cucumber/glue/snippet.rb#36
  def to_s; end

  private

  # source://cucumber/8.0.0/lib/cucumber/glue/snippet.rb#50
  def code_keyword; end

  # source://cucumber/8.0.0/lib/cucumber/glue/snippet.rb#63
  def do_block; end

  # source://cucumber/8.0.0/lib/cucumber/glue/snippet.rb#50
  def generated_expressions; end

  # source://cucumber/8.0.0/lib/cucumber/glue/snippet.rb#50
  def multiline_argument; end

  # source://cucumber/8.0.0/lib/cucumber/glue/snippet.rb#50
  def number_of_arguments; end

  # source://cucumber/8.0.0/lib/cucumber/glue/snippet.rb#72
  def parameters; end

  # source://cucumber/8.0.0/lib/cucumber/glue/snippet.rb#50
  def pattern; end

  # source://cucumber/8.0.0/lib/cucumber/glue/snippet.rb#52
  def replace_and_count_capturing_groups(pattern); end

  class << self
    # source://cucumber/8.0.0/lib/cucumber/glue/snippet.rb#44
    def cli_option_string(type, cucumber_expression_generator); end

    private

    # source://cucumber/8.0.0/lib/cucumber/glue/snippet.rb#81
    def example(cucumber_expression_generator); end
  end
end

class Cucumber::Glue::Snippet::Classic < ::Cucumber::Glue::Snippet::BaseSnippet
  # source://cucumber/8.0.0/lib/cucumber/glue/snippet.rb#128
  def typed_pattern; end

  class << self
    # source://cucumber/8.0.0/lib/cucumber/glue/snippet.rb#132
    def description; end
  end
end

class Cucumber::Glue::Snippet::CucumberExpression < ::Cucumber::Glue::Snippet::BaseSnippet
  # source://cucumber/8.0.0/lib/cucumber/glue/snippet.rb#106
  def parameters(expr); end

  # source://cucumber/8.0.0/lib/cucumber/glue/snippet.rb#92
  def to_s; end

  # source://cucumber/8.0.0/lib/cucumber/glue/snippet.rb#88
  def typed_pattern; end

  class << self
    # source://cucumber/8.0.0/lib/cucumber/glue/snippet.rb#112
    def description; end
  end
end

class Cucumber::Glue::Snippet::Generator
  # source://cucumber/8.0.0/lib/cucumber/glue/snippet.rb#13
  def initialize(cucumber_expression_generator); end

  # source://cucumber/8.0.0/lib/cucumber/glue/snippet.rb#17
  def call(code_keyword, step_name, multiline_arg, snippet_type); end

  # source://cucumber/8.0.0/lib/cucumber/glue/snippet.rb#22
  def typed_snippet_class(type); end

  class << self
    # source://cucumber/8.0.0/lib/cucumber/glue/snippet.rb#9
    def register_on(configuration); end
  end
end

module Cucumber::Glue::Snippet::MultilineArgumentSnippet
  class << self
    # source://cucumber/8.0.0/lib/cucumber/glue/snippet.rb#155
    def new(multiline_argument); end
  end
end

class Cucumber::Glue::Snippet::MultilineArgumentSnippet::Builder
  # source://cucumber/8.0.0/lib/cucumber/glue/snippet.rb#166
  def data_table(table, *_args); end

  # source://cucumber/8.0.0/lib/cucumber/glue/snippet.rb#162
  def doc_string(*_args); end

  # source://cucumber/8.0.0/lib/cucumber/glue/snippet.rb#170
  def result; end
end

class Cucumber::Glue::Snippet::MultilineArgumentSnippet::DataTable
  # source://cucumber/8.0.0/lib/cucumber/glue/snippet.rb#184
  def initialize(table); end

  # source://cucumber/8.0.0/lib/cucumber/glue/snippet.rb#188
  def append_block_parameter_to(array); end

  # source://cucumber/8.0.0/lib/cucumber/glue/snippet.rb#192
  def append_comment_to(string); end
end

class Cucumber::Glue::Snippet::MultilineArgumentSnippet::DocString
  # source://cucumber/8.0.0/lib/cucumber/glue/snippet.rb#176
  def append_block_parameter_to(array); end

  # source://cucumber/8.0.0/lib/cucumber/glue/snippet.rb#180
  def append_comment_to(string); end
end

class Cucumber::Glue::Snippet::MultilineArgumentSnippet::None
  # source://cucumber/8.0.0/lib/cucumber/glue/snippet.rb#198
  def append_block_parameter_to(array); end

  # source://cucumber/8.0.0/lib/cucumber/glue/snippet.rb#200
  def append_comment_to(string); end
end

class Cucumber::Glue::Snippet::Percent < ::Cucumber::Glue::Snippet::BaseSnippet
  # source://cucumber/8.0.0/lib/cucumber/glue/snippet.rb#138
  def typed_pattern; end

  class << self
    # source://cucumber/8.0.0/lib/cucumber/glue/snippet.rb#142
    def description; end
  end
end

class Cucumber::Glue::Snippet::Regexp < ::Cucumber::Glue::Snippet::BaseSnippet
  # source://cucumber/8.0.0/lib/cucumber/glue/snippet.rb#118
  def typed_pattern; end

  class << self
    # source://cucumber/8.0.0/lib/cucumber/glue/snippet.rb#122
    def description; end
  end
end

# source://cucumber/8.0.0/lib/cucumber/glue/snippet.rb#147
Cucumber::Glue::Snippet::SNIPPET_TYPES = T.let(T.unsafe(nil), Hash)

class Cucumber::Glue::StepDefinition
  # source://cucumber/8.0.0/lib/cucumber/glue/step_definition.rb#69
  def initialize(id, registry, expression, proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/step_definition.rb#124
  def ==(other); end

  # source://cucumber/8.0.0/lib/cucumber/glue/step_definition.rb#129
  def arguments_from(step_name); end

  # source://cucumber/8.0.0/lib/cucumber/glue/step_definition.rb#143
  def backtrace_line; end

  # source://cucumber/8.0.0/lib/cucumber/glue/step_definition.rb#67
  def expression; end

  # source://cucumber/8.0.0/lib/cucumber/glue/step_definition.rb#97
  def expression_type; end

  # source://cucumber/8.0.0/lib/cucumber/glue/step_definition.rb#163
  def file; end

  # source://cucumber/8.0.0/lib/cucumber/glue/step_definition.rb#148
  def file_colon_line; end

  # source://cucumber/8.0.0/lib/cucumber/glue/step_definition.rb#67
  def id; end

  # source://cucumber/8.0.0/lib/cucumber/glue/step_definition.rb#135
  def invoke(args); end

  # source://cucumber/8.0.0/lib/cucumber/glue/step_definition.rb#158
  def location; end

  # source://cucumber/8.0.0/lib/cucumber/glue/step_definition.rb#67
  def registry; end

  # source://cucumber/8.0.0/lib/cucumber/glue/step_definition.rb#79
  def to_envelope; end

  # source://cucumber/8.0.0/lib/cucumber/glue/step_definition.rb#104
  def to_hash; end

  class << self
    # source://cucumber/8.0.0/lib/cucumber/glue/step_definition.rb#26
    def new(id, registry, string_or_regexp, proc_or_sym, options); end

    private

    # source://cucumber/8.0.0/lib/cucumber/glue/step_definition.rb#34
    def create_proc(proc_or_sym, options); end

    # source://cucumber/8.0.0/lib/cucumber/glue/step_definition.rb#52
    def parse_target_proc_from(options); end

    # source://cucumber/8.0.0/lib/cucumber/glue/step_definition.rb#46
    def patch_location_onto(block); end
  end
end

class Cucumber::Glue::StepDefinition::MissingProc < ::StandardError
  # source://cucumber/8.0.0/lib/cucumber/glue/step_definition.rb#20
  def message; end
end

class Cucumber::Glue::WorldFactory
  # source://cucumber/8.0.0/lib/cucumber/glue/world_factory.rb#4
  def initialize(proc); end

  # source://cucumber/8.0.0/lib/cucumber/glue/world_factory.rb#8
  def create_world; end

  # source://cucumber/8.0.0/lib/cucumber/glue/world_factory.rb#12
  def raise_nil_world; end
end

module Cucumber::Hooks
  class << self
    # source://cucumber/8.0.0/lib/cucumber/hooks.rb#16
    def after_hook(id, location, &block); end

    # source://cucumber/8.0.0/lib/cucumber/hooks.rb#20
    def after_step_hook(id, test_step, location, &block); end

    # source://cucumber/8.0.0/lib/cucumber/hooks.rb#26
    def around_hook(&block); end

    # source://cucumber/8.0.0/lib/cucumber/hooks.rb#12
    def before_hook(id, location, &block); end

    private

    # source://cucumber/8.0.0/lib/cucumber/hooks.rb#32
    def build_hook_step(id, location, block, hook_type, action_type); end
  end
end

class Cucumber::Hooks::AfterHook
  # source://cucumber/8.0.0/lib/cucumber/hooks.rb#42
  def initialize(location); end

  # source://cucumber/8.0.0/lib/cucumber/hooks.rb#58
  def describe_to(visitor, *args); end

  # source://cucumber/8.0.0/lib/cucumber/hooks.rb#40
  def location; end

  # source://cucumber/8.0.0/lib/cucumber/hooks.rb#54
  def match_locations?(queried_locations); end

  # source://cucumber/8.0.0/lib/cucumber/hooks.rb#46
  def text; end

  # source://cucumber/8.0.0/lib/cucumber/hooks.rb#50
  def to_s; end
end

class Cucumber::Hooks::AfterStepHook
  # source://cucumber/8.0.0/lib/cucumber/hooks.rb#90
  def initialize(location); end

  # source://cucumber/8.0.0/lib/cucumber/hooks.rb#106
  def describe_to(visitor, *args); end

  # source://cucumber/8.0.0/lib/cucumber/hooks.rb#88
  def location; end

  # source://cucumber/8.0.0/lib/cucumber/hooks.rb#102
  def match_locations?(queried_locations); end

  # source://cucumber/8.0.0/lib/cucumber/hooks.rb#94
  def text; end

  # source://cucumber/8.0.0/lib/cucumber/hooks.rb#98
  def to_s; end
end

class Cucumber::Hooks::BeforeHook
  # source://cucumber/8.0.0/lib/cucumber/hooks.rb#66
  def initialize(location); end

  # source://cucumber/8.0.0/lib/cucumber/hooks.rb#82
  def describe_to(visitor, *args); end

  # source://cucumber/8.0.0/lib/cucumber/hooks.rb#64
  def location; end

  # source://cucumber/8.0.0/lib/cucumber/hooks.rb#78
  def match_locations?(queried_locations); end

  # source://cucumber/8.0.0/lib/cucumber/hooks.rb#70
  def text; end

  # source://cucumber/8.0.0/lib/cucumber/hooks.rb#74
  def to_s; end
end

# source://cucumber-core//lib/cucumber/core/platform.rb#9
Cucumber::IRONRUBY = T.let(T.unsafe(nil), FalseClass)

# source://cucumber-core//lib/cucumber/core/platform.rb#8
Cucumber::JRUBY = T.let(T.unsafe(nil), T.untyped)

# source://cucumber/8.0.0/lib/cucumber/platform.rb#12
Cucumber::LIBDIR = T.let(T.unsafe(nil), String)

module Cucumber::LoadPath
  private

  # source://cucumber/8.0.0/lib/cucumber/load_path.rb#5
  def add_dirs(*dirs); end

  class << self
    # source://cucumber/8.0.0/lib/cucumber/load_path.rb#5
    def add_dirs(*dirs); end
  end
end

module Cucumber::Messages; end

class Cucumber::Messages::Attachment < ::Cucumber::Messages::Message
  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#87
  def initialize(body: T.unsafe(nil), content_encoding: T.unsafe(nil), file_name: T.unsafe(nil), media_type: T.unsafe(nil), source: T.unsafe(nil), test_case_started_id: T.unsafe(nil), test_step_id: T.unsafe(nil), url: T.unsafe(nil)); end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#35
  def body; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#48
  def content_encoding; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#54
  def file_name; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#63
  def media_type; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#65
  def source; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#67
  def test_case_started_id; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#69
  def test_step_id; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#85
  def url; end

  class << self
    # source://cucumber-messages/18.0.0/lib/cucumber/messages.deserializers.rb#20
    def from_h(hash); end
  end
end

class Cucumber::Messages::AttachmentContentEncoding; end

# source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1892
Cucumber::Messages::AttachmentContentEncoding::BASE64 = T.let(T.unsafe(nil), String)

# source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1891
Cucumber::Messages::AttachmentContentEncoding::IDENTITY = T.let(T.unsafe(nil), String)

class Cucumber::Messages::Background < ::Cucumber::Messages::Message
  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#289
  def initialize(location: T.unsafe(nil), keyword: T.unsafe(nil), name: T.unsafe(nil), description: T.unsafe(nil), steps: T.unsafe(nil), id: T.unsafe(nil)); end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#283
  def description; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#287
  def id; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#279
  def keyword; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#277
  def location; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#281
  def name; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#285
  def steps; end

  class << self
    # source://cucumber-messages/18.0.0/lib/cucumber/messages.deserializers.rb#122
    def from_h(hash); end
  end
end

class Cucumber::Messages::Ci < ::Cucumber::Messages::Message
  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#921
  def initialize(name: T.unsafe(nil), url: T.unsafe(nil), build_number: T.unsafe(nil), git: T.unsafe(nil)); end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#917
  def build_number; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#919
  def git; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#907
  def name; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#912
  def url; end

  class << self
    # source://cucumber-messages/18.0.0/lib/cucumber/messages.deserializers.rb#503
    def from_h(hash); end
  end
end

class Cucumber::Messages::Comment < ::Cucumber::Messages::Message
  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#326
  def initialize(location: T.unsafe(nil), text: T.unsafe(nil)); end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#319
  def location; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#324
  def text; end

  class << self
    # source://cucumber-messages/18.0.0/lib/cucumber/messages.deserializers.rb#146
    def from_h(hash); end
  end
end

class Cucumber::Messages::DataTable < ::Cucumber::Messages::Message
  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#348
  def initialize(location: T.unsafe(nil), rows: T.unsafe(nil)); end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#344
  def location; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#346
  def rows; end

  class << self
    # source://cucumber-messages/18.0.0/lib/cucumber/messages.deserializers.rb#166
    def from_h(hash); end
  end
end

class Cucumber::Messages::DocString < ::Cucumber::Messages::Message
  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#374
  def initialize(location: T.unsafe(nil), media_type: T.unsafe(nil), content: T.unsafe(nil), delimiter: T.unsafe(nil)); end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#370
  def content; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#372
  def delimiter; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#366
  def location; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#368
  def media_type; end

  class << self
    # source://cucumber-messages/18.0.0/lib/cucumber/messages.deserializers.rb#186
    def from_h(hash); end
  end
end

class Cucumber::Messages::Duration < ::Cucumber::Messages::Message
  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#128
  def initialize(seconds: T.unsafe(nil), nanos: T.unsafe(nil)); end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#126
  def nanos; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#118
  def seconds; end

  class << self
    # source://cucumber-messages/18.0.0/lib/cucumber/messages.deserializers.rb#46
    def from_h(hash); end
  end
end

class Cucumber::Messages::Envelope < ::Cucumber::Messages::Message
  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#186
  def initialize(attachment: T.unsafe(nil), gherkin_document: T.unsafe(nil), hook: T.unsafe(nil), meta: T.unsafe(nil), parameter_type: T.unsafe(nil), parse_error: T.unsafe(nil), pickle: T.unsafe(nil), source: T.unsafe(nil), step_definition: T.unsafe(nil), test_case: T.unsafe(nil), test_case_finished: T.unsafe(nil), test_case_started: T.unsafe(nil), test_run_finished: T.unsafe(nil), test_run_started: T.unsafe(nil), test_step_finished: T.unsafe(nil), test_step_started: T.unsafe(nil), undefined_parameter_type: T.unsafe(nil)); end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#152
  def attachment; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#154
  def gherkin_document; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#156
  def hook; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#158
  def meta; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#160
  def parameter_type; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#162
  def parse_error; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#164
  def pickle; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#166
  def source; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#168
  def step_definition; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#170
  def test_case; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#172
  def test_case_finished; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#174
  def test_case_started; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#176
  def test_run_finished; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#178
  def test_run_started; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#180
  def test_step_finished; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#182
  def test_step_started; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#184
  def undefined_parameter_type; end

  class << self
    # source://cucumber-messages/18.0.0/lib/cucumber/messages.deserializers.rb#66
    def from_h(hash); end
  end
end

class Cucumber::Messages::Examples < ::Cucumber::Messages::Message
  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#415
  def initialize(location: T.unsafe(nil), tags: T.unsafe(nil), keyword: T.unsafe(nil), name: T.unsafe(nil), description: T.unsafe(nil), table_header: T.unsafe(nil), table_body: T.unsafe(nil), id: T.unsafe(nil)); end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#407
  def description; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#413
  def id; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#403
  def keyword; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#399
  def location; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#405
  def name; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#411
  def table_body; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#409
  def table_header; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#401
  def tags; end

  class << self
    # source://cucumber-messages/18.0.0/lib/cucumber/messages.deserializers.rb#208
    def from_h(hash); end
  end
end

class Cucumber::Messages::Feature < ::Cucumber::Messages::Message
  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#480
  def initialize(location: T.unsafe(nil), tags: T.unsafe(nil), language: T.unsafe(nil), keyword: T.unsafe(nil), name: T.unsafe(nil), description: T.unsafe(nil), children: T.unsafe(nil)); end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#478
  def children; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#473
  def description; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#463
  def keyword; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#458
  def language; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#448
  def location; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#468
  def name; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#453
  def tags; end

  class << self
    # source://cucumber-messages/18.0.0/lib/cucumber/messages.deserializers.rb#234
    def from_h(hash); end
  end
end

class Cucumber::Messages::FeatureChild < ::Cucumber::Messages::Message
  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#515
  def initialize(rule: T.unsafe(nil), background: T.unsafe(nil), scenario: T.unsafe(nil)); end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#511
  def background; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#509
  def rule; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#513
  def scenario; end

  class << self
    # source://cucumber-messages/18.0.0/lib/cucumber/messages.deserializers.rb#259
    def from_h(hash); end
  end
end

class Cucumber::Messages::GherkinDocument < ::Cucumber::Messages::Message
  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#254
  def initialize(uri: T.unsafe(nil), feature: T.unsafe(nil), comments: T.unsafe(nil)); end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#252
  def comments; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#247
  def feature; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#245
  def uri; end

  class << self
    # source://cucumber-messages/18.0.0/lib/cucumber/messages.deserializers.rb#101
    def from_h(hash); end
  end
end

class Cucumber::Messages::Git < ::Cucumber::Messages::Message
  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#952
  def initialize(remote: T.unsafe(nil), revision: T.unsafe(nil), branch: T.unsafe(nil), tag: T.unsafe(nil)); end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#948
  def branch; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#944
  def remote; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#946
  def revision; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#950
  def tag; end

  class << self
    # source://cucumber-messages/18.0.0/lib/cucumber/messages.deserializers.rb#525
    def from_h(hash); end
  end
end

class Cucumber::Messages::Group < ::Cucumber::Messages::Message
  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1515
  def initialize(children: T.unsafe(nil), start: T.unsafe(nil), value: T.unsafe(nil)); end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1509
  def children; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1511
  def start; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1513
  def value; end

  class << self
    # source://cucumber-messages/18.0.0/lib/cucumber/messages.deserializers.rb#921
    def from_h(hash); end
  end
end

class Cucumber::Messages::Hook < ::Cucumber::Messages::Message
  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#803
  def initialize(id: T.unsafe(nil), name: T.unsafe(nil), source_reference: T.unsafe(nil), tag_expression: T.unsafe(nil)); end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#795
  def id; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#797
  def name; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#799
  def source_reference; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#801
  def tag_expression; end

  class << self
    # source://cucumber-messages/18.0.0/lib/cucumber/messages.deserializers.rb#437
    def from_h(hash); end
  end
end

module Cucumber::Messages::IdGenerator; end

class Cucumber::Messages::IdGenerator::Incrementing
  # source://cucumber-messages/18.0.0/lib/cucumber/messages/id_generator.rb#7
  def initialize; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages/id_generator.rb#11
  def new_id; end
end

class Cucumber::Messages::IdGenerator::UUID
  # source://cucumber-messages/18.0.0/lib/cucumber/messages/id_generator.rb#18
  def new_id; end
end

class Cucumber::Messages::JavaMethod < ::Cucumber::Messages::Message
  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1383
  def initialize(class_name: T.unsafe(nil), method_name: T.unsafe(nil), method_parameter_types: T.unsafe(nil)); end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1377
  def class_name; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1379
  def method_name; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1381
  def method_parameter_types; end

  class << self
    # source://cucumber-messages/18.0.0/lib/cucumber/messages.deserializers.rb#817
    def from_h(hash); end
  end
end

class Cucumber::Messages::JavaStackTraceElement < ::Cucumber::Messages::Message
  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1409
  def initialize(class_name: T.unsafe(nil), file_name: T.unsafe(nil), method_name: T.unsafe(nil)); end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1403
  def class_name; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1405
  def file_name; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1407
  def method_name; end

  class << self
    # source://cucumber-messages/18.0.0/lib/cucumber/messages.deserializers.rb#838
    def from_h(hash); end
  end
end

class Cucumber::Messages::Location < ::Cucumber::Messages::Message
  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#830
  def initialize(line: T.unsafe(nil), column: T.unsafe(nil)); end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#828
  def column; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#826
  def line; end

  class << self
    # source://cucumber-messages/18.0.0/lib/cucumber/messages.deserializers.rb#459
    def from_h(hash); end
  end
end

class Cucumber::Messages::Message
  include ::Cucumber::Messages::Message::Utils
  include ::Cucumber::Messages::Message::Deserialization
  include ::Cucumber::Messages::Message::Serialization
  extend ::Cucumber::Messages::Message::Utils::ClassMethods
  extend ::Cucumber::Messages::Message::Deserialization::ClassMethods
end

module Cucumber::Messages::Message::Deserialization
  mixes_in_class_methods ::Cucumber::Messages::Message::Deserialization::ClassMethods

  class << self
    # source://cucumber-messages/18.0.0/lib/cucumber/messages/message/deserialization.rb#10
    def included(other); end
  end
end

module Cucumber::Messages::Message::Deserialization::ClassMethods
  # source://cucumber-messages/18.0.0/lib/cucumber/messages/message/deserialization.rb#32
  def from_json(json_string); end
end

module Cucumber::Messages::Message::Serialization
  # source://cucumber-messages/18.0.0/lib/cucumber/messages/message/serialization.rb#26
  def to_h(camelize: T.unsafe(nil), reject_nil_values: T.unsafe(nil)); end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages/message/serialization.rb#58
  def to_json; end

  private

  # source://cucumber-messages/18.0.0/lib/cucumber/messages/message/serialization.rb#64
  def prepare_value(value, camelize:, reject_nil_values:); end
end

module Cucumber::Messages::Message::Utils
  mixes_in_class_methods ::Cucumber::Messages::Message::Utils::ClassMethods

  class << self
    # source://cucumber-messages/18.0.0/lib/cucumber/messages/message/utils.rb#5
    def included(other); end
  end
end

module Cucumber::Messages::Message::Utils::ClassMethods
  # source://cucumber-messages/18.0.0/lib/cucumber/messages/message/utils.rb#37
  def camelize(term); end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages/message/utils.rb#19
  def underscore(term); end
end

class Cucumber::Messages::Meta < ::Cucumber::Messages::Message
  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#878
  def initialize(protocol_version: T.unsafe(nil), implementation: T.unsafe(nil), runtime: T.unsafe(nil), os: T.unsafe(nil), cpu: T.unsafe(nil), ci: T.unsafe(nil)); end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#876
  def ci; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#874
  def cpu; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#859
  def implementation; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#869
  def os; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#854
  def protocol_version; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#864
  def runtime; end

  class << self
    # source://cucumber-messages/18.0.0/lib/cucumber/messages.deserializers.rb#479
    def from_h(hash); end
  end
end

class Cucumber::Messages::NdjsonToMessageEnumerator < ::Enumerator
  # source://cucumber-messages/18.0.0/lib/cucumber/messages/ndjson_to_message_enumerator.rb#6
  def initialize(io); end
end

class Cucumber::Messages::ParameterType < ::Cucumber::Messages::Message
  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1015
  def initialize(name: T.unsafe(nil), regular_expressions: T.unsafe(nil), prefer_for_regular_expression_match: T.unsafe(nil), use_for_snippets: T.unsafe(nil), id: T.unsafe(nil)); end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1013
  def id; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1005
  def name; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1009
  def prefer_for_regular_expression_match; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1007
  def regular_expressions; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1011
  def use_for_snippets; end

  class << self
    # source://cucumber-messages/18.0.0/lib/cucumber/messages.deserializers.rb#567
    def from_h(hash); end
  end
end

class Cucumber::Messages::ParseError < ::Cucumber::Messages::Message
  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1043
  def initialize(source: T.unsafe(nil), message: T.unsafe(nil)); end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1041
  def message; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1039
  def source; end

  class << self
    # source://cucumber-messages/18.0.0/lib/cucumber/messages.deserializers.rb#590
    def from_h(hash); end
  end
end

class Cucumber::Messages::Pickle < ::Cucumber::Messages::Message
  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1114
  def initialize(id: T.unsafe(nil), uri: T.unsafe(nil), name: T.unsafe(nil), language: T.unsafe(nil), steps: T.unsafe(nil), tags: T.unsafe(nil), ast_node_ids: T.unsafe(nil)); end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1112
  def ast_node_ids; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1077
  def id; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1092
  def language; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1087
  def name; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1097
  def steps; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1104
  def tags; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1082
  def uri; end

  class << self
    # source://cucumber-messages/18.0.0/lib/cucumber/messages.deserializers.rb#610
    def from_h(hash); end
  end
end

class Cucumber::Messages::PickleDocString < ::Cucumber::Messages::Message
  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1146
  def initialize(media_type: T.unsafe(nil), content: T.unsafe(nil)); end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1144
  def content; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1142
  def media_type; end

  class << self
    # source://cucumber-messages/18.0.0/lib/cucumber/messages.deserializers.rb#635
    def from_h(hash); end
  end
end

class Cucumber::Messages::PickleStep < ::Cucumber::Messages::Message
  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1180
  def initialize(argument: T.unsafe(nil), ast_node_ids: T.unsafe(nil), id: T.unsafe(nil), text: T.unsafe(nil)); end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1165
  def argument; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1171
  def ast_node_ids; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1176
  def id; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1178
  def text; end

  class << self
    # source://cucumber-messages/18.0.0/lib/cucumber/messages.deserializers.rb#655
    def from_h(hash); end
  end
end

class Cucumber::Messages::PickleStepArgument < ::Cucumber::Messages::Message
  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1206
  def initialize(doc_string: T.unsafe(nil), data_table: T.unsafe(nil)); end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1204
  def data_table; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1202
  def doc_string; end

  class << self
    # source://cucumber-messages/18.0.0/lib/cucumber/messages.deserializers.rb#677
    def from_h(hash); end
  end
end

class Cucumber::Messages::PickleTable < ::Cucumber::Messages::Message
  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1226
  def initialize(rows: T.unsafe(nil)); end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1224
  def rows; end

  class << self
    # source://cucumber-messages/18.0.0/lib/cucumber/messages.deserializers.rb#697
    def from_h(hash); end
  end
end

class Cucumber::Messages::PickleTableCell < ::Cucumber::Messages::Message
  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1244
  def initialize(value: T.unsafe(nil)); end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1242
  def value; end

  class << self
    # source://cucumber-messages/18.0.0/lib/cucumber/messages.deserializers.rb#716
    def from_h(hash); end
  end
end

class Cucumber::Messages::PickleTableRow < ::Cucumber::Messages::Message
  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1262
  def initialize(cells: T.unsafe(nil)); end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1260
  def cells; end

  class << self
    # source://cucumber-messages/18.0.0/lib/cucumber/messages.deserializers.rb#735
    def from_h(hash); end
  end
end

class Cucumber::Messages::PickleTag < ::Cucumber::Messages::Message
  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1286
  def initialize(name: T.unsafe(nil), ast_node_id: T.unsafe(nil)); end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1284
  def ast_node_id; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1279
  def name; end

  class << self
    # source://cucumber-messages/18.0.0/lib/cucumber/messages.deserializers.rb#754
    def from_h(hash); end
  end
end

class Cucumber::Messages::Product < ::Cucumber::Messages::Message
  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#984
  def initialize(name: T.unsafe(nil), version: T.unsafe(nil)); end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#977
  def name; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#982
  def version; end

  class << self
    # source://cucumber-messages/18.0.0/lib/cucumber/messages.deserializers.rb#547
    def from_h(hash); end
  end
end

class Cucumber::Messages::Rule < ::Cucumber::Messages::Message
  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#555
  def initialize(location: T.unsafe(nil), tags: T.unsafe(nil), keyword: T.unsafe(nil), name: T.unsafe(nil), description: T.unsafe(nil), children: T.unsafe(nil), id: T.unsafe(nil)); end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#551
  def children; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#549
  def description; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#553
  def id; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#545
  def keyword; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#538
  def location; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#547
  def name; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#543
  def tags; end

  class << self
    # source://cucumber-messages/18.0.0/lib/cucumber/messages.deserializers.rb#280
    def from_h(hash); end
  end
end

class Cucumber::Messages::RuleChild < ::Cucumber::Messages::Message
  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#588
  def initialize(background: T.unsafe(nil), scenario: T.unsafe(nil)); end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#584
  def background; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#586
  def scenario; end

  class << self
    # source://cucumber-messages/18.0.0/lib/cucumber/messages.deserializers.rb#305
    def from_h(hash); end
  end
end

class Cucumber::Messages::Scenario < ::Cucumber::Messages::Message
  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#625
  def initialize(location: T.unsafe(nil), tags: T.unsafe(nil), keyword: T.unsafe(nil), name: T.unsafe(nil), description: T.unsafe(nil), steps: T.unsafe(nil), examples: T.unsafe(nil), id: T.unsafe(nil)); end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#617
  def description; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#621
  def examples; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#623
  def id; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#613
  def keyword; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#609
  def location; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#615
  def name; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#619
  def steps; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#611
  def tags; end

  class << self
    # source://cucumber-messages/18.0.0/lib/cucumber/messages.deserializers.rb#325
    def from_h(hash); end
  end
end

class Cucumber::Messages::Source < ::Cucumber::Messages::Message
  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1325
  def initialize(uri: T.unsafe(nil), data: T.unsafe(nil), media_type: T.unsafe(nil)); end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1317
  def data; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1323
  def media_type; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1312
  def uri; end

  class << self
    # source://cucumber-messages/18.0.0/lib/cucumber/messages.deserializers.rb#774
    def from_h(hash); end
  end
end

class Cucumber::Messages::SourceMediaType; end

# source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1897
Cucumber::Messages::SourceMediaType::TEXT_X_CUCUMBER_GHERKIN_MARKDOWN = T.let(T.unsafe(nil), String)

# source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1896
Cucumber::Messages::SourceMediaType::TEXT_X_CUCUMBER_GHERKIN_PLAIN = T.let(T.unsafe(nil), String)

class Cucumber::Messages::SourceReference < ::Cucumber::Messages::Message
  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1355
  def initialize(uri: T.unsafe(nil), java_method: T.unsafe(nil), java_stack_trace_element: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1349
  def java_method; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1351
  def java_stack_trace_element; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1353
  def location; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1347
  def uri; end

  class << self
    # source://cucumber-messages/18.0.0/lib/cucumber/messages.deserializers.rb#795
    def from_h(hash); end
  end
end

class Cucumber::Messages::Step < ::Cucumber::Messages::Message
  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#673
  def initialize(location: T.unsafe(nil), keyword: T.unsafe(nil), text: T.unsafe(nil), doc_string: T.unsafe(nil), data_table: T.unsafe(nil), id: T.unsafe(nil)); end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#666
  def data_table; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#664
  def doc_string; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#671
  def id; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#660
  def keyword; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#658
  def location; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#662
  def text; end

  class << self
    # source://cucumber-messages/18.0.0/lib/cucumber/messages.deserializers.rb#351
    def from_h(hash); end
  end
end

class Cucumber::Messages::StepDefinition < ::Cucumber::Messages::Message
  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1435
  def initialize(id: T.unsafe(nil), pattern: T.unsafe(nil), source_reference: T.unsafe(nil)); end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1429
  def id; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1431
  def pattern; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1433
  def source_reference; end

  class << self
    # source://cucumber-messages/18.0.0/lib/cucumber/messages.deserializers.rb#859
    def from_h(hash); end
  end
end

class Cucumber::Messages::StepDefinitionPattern < ::Cucumber::Messages::Message
  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1459
  def initialize(source: T.unsafe(nil), type: T.unsafe(nil)); end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1455
  def source; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1457
  def type; end

  class << self
    # source://cucumber-messages/18.0.0/lib/cucumber/messages.deserializers.rb#880
    def from_h(hash); end
  end
end

class Cucumber::Messages::StepDefinitionPatternType; end

# source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1901
Cucumber::Messages::StepDefinitionPatternType::CUCUMBER_EXPRESSION = T.let(T.unsafe(nil), String)

# source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1902
Cucumber::Messages::StepDefinitionPatternType::REGULAR_EXPRESSION = T.let(T.unsafe(nil), String)

class Cucumber::Messages::StepMatchArgument < ::Cucumber::Messages::Message
  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1550
  def initialize(group: T.unsafe(nil), parameter_type_name: T.unsafe(nil)); end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1546
  def group; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1548
  def parameter_type_name; end

  class << self
    # source://cucumber-messages/18.0.0/lib/cucumber/messages.deserializers.rb#942
    def from_h(hash); end
  end
end

class Cucumber::Messages::StepMatchArgumentsList < ::Cucumber::Messages::Message
  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1570
  def initialize(step_match_arguments: T.unsafe(nil)); end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1568
  def step_match_arguments; end

  class << self
    # source://cucumber-messages/18.0.0/lib/cucumber/messages.deserializers.rb#962
    def from_h(hash); end
  end
end

class Cucumber::Messages::TableCell < ::Cucumber::Messages::Message
  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#709
  def initialize(location: T.unsafe(nil), value: T.unsafe(nil)); end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#702
  def location; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#707
  def value; end

  class << self
    # source://cucumber-messages/18.0.0/lib/cucumber/messages.deserializers.rb#375
    def from_h(hash); end
  end
end

class Cucumber::Messages::TableRow < ::Cucumber::Messages::Message
  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#739
  def initialize(location: T.unsafe(nil), cells: T.unsafe(nil), id: T.unsafe(nil)); end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#735
  def cells; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#737
  def id; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#730
  def location; end

  class << self
    # source://cucumber-messages/18.0.0/lib/cucumber/messages.deserializers.rb#395
    def from_h(hash); end
  end
end

class Cucumber::Messages::Tag < ::Cucumber::Messages::Message
  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#775
  def initialize(location: T.unsafe(nil), name: T.unsafe(nil), id: T.unsafe(nil)); end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#773
  def id; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#763
  def location; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#768
  def name; end

  class << self
    # source://cucumber-messages/18.0.0/lib/cucumber/messages.deserializers.rb#416
    def from_h(hash); end
  end
end

class Cucumber::Messages::TestCase < ::Cucumber::Messages::Message
  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1489
  def initialize(id: T.unsafe(nil), pickle_id: T.unsafe(nil), test_steps: T.unsafe(nil)); end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1480
  def id; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1485
  def pickle_id; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1487
  def test_steps; end

  class << self
    # source://cucumber-messages/18.0.0/lib/cucumber/messages.deserializers.rb#900
    def from_h(hash); end
  end
end

class Cucumber::Messages::TestCaseFinished < ::Cucumber::Messages::Message
  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1642
  def initialize(test_case_started_id: T.unsafe(nil), timestamp: T.unsafe(nil), will_be_retried: T.unsafe(nil)); end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1636
  def test_case_started_id; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1638
  def timestamp; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1640
  def will_be_retried; end

  class << self
    # source://cucumber-messages/18.0.0/lib/cucumber/messages.deserializers.rb#1004
    def from_h(hash); end
  end
end

class Cucumber::Messages::TestCaseStarted < ::Cucumber::Messages::Message
  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1680
  def initialize(attempt: T.unsafe(nil), id: T.unsafe(nil), test_case_id: T.unsafe(nil), timestamp: T.unsafe(nil)); end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1667
  def attempt; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1674
  def id; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1676
  def test_case_id; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1678
  def timestamp; end

  class << self
    # source://cucumber-messages/18.0.0/lib/cucumber/messages.deserializers.rb#1025
    def from_h(hash); end
  end
end

class Cucumber::Messages::TestRunFinished < ::Cucumber::Messages::Message
  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1721
  def initialize(message: T.unsafe(nil), success: T.unsafe(nil), timestamp: T.unsafe(nil)); end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1709
  def message; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1714
  def success; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1719
  def timestamp; end

  class << self
    # source://cucumber-messages/18.0.0/lib/cucumber/messages.deserializers.rb#1047
    def from_h(hash); end
  end
end

class Cucumber::Messages::TestRunStarted < ::Cucumber::Messages::Message
  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1743
  def initialize(timestamp: T.unsafe(nil)); end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1741
  def timestamp; end

  class << self
    # source://cucumber-messages/18.0.0/lib/cucumber/messages.deserializers.rb#1068
    def from_h(hash); end
  end
end

class Cucumber::Messages::TestStep < ::Cucumber::Messages::Message
  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1612
  def initialize(hook_id: T.unsafe(nil), id: T.unsafe(nil), pickle_step_id: T.unsafe(nil), step_definition_ids: T.unsafe(nil), step_match_arguments_lists: T.unsafe(nil)); end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1591
  def hook_id; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1593
  def id; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1598
  def pickle_step_id; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1603
  def step_definition_ids; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1610
  def step_match_arguments_lists; end

  class << self
    # source://cucumber-messages/18.0.0/lib/cucumber/messages.deserializers.rb#981
    def from_h(hash); end
  end
end

class Cucumber::Messages::TestStepFinished < ::Cucumber::Messages::Message
  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1767
  def initialize(test_case_started_id: T.unsafe(nil), test_step_id: T.unsafe(nil), test_step_result: T.unsafe(nil), timestamp: T.unsafe(nil)); end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1759
  def test_case_started_id; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1761
  def test_step_id; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1763
  def test_step_result; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1765
  def timestamp; end

  class << self
    # source://cucumber-messages/18.0.0/lib/cucumber/messages.deserializers.rb#1087
    def from_h(hash); end
  end
end

class Cucumber::Messages::TestStepResult < ::Cucumber::Messages::Message
  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1795
  def initialize(duration: T.unsafe(nil), message: T.unsafe(nil), status: T.unsafe(nil)); end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1789
  def duration; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1791
  def message; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1793
  def status; end

  class << self
    # source://cucumber-messages/18.0.0/lib/cucumber/messages.deserializers.rb#1109
    def from_h(hash); end
  end
end

class Cucumber::Messages::TestStepResultStatus; end

# source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1911
Cucumber::Messages::TestStepResultStatus::AMBIGUOUS = T.let(T.unsafe(nil), String)

# source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1912
Cucumber::Messages::TestStepResultStatus::FAILED = T.let(T.unsafe(nil), String)

# source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1907
Cucumber::Messages::TestStepResultStatus::PASSED = T.let(T.unsafe(nil), String)

# source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1909
Cucumber::Messages::TestStepResultStatus::PENDING = T.let(T.unsafe(nil), String)

# source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1908
Cucumber::Messages::TestStepResultStatus::SKIPPED = T.let(T.unsafe(nil), String)

# source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1910
Cucumber::Messages::TestStepResultStatus::UNDEFINED = T.let(T.unsafe(nil), String)

# source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1906
Cucumber::Messages::TestStepResultStatus::UNKNOWN = T.let(T.unsafe(nil), String)

class Cucumber::Messages::TestStepStarted < ::Cucumber::Messages::Message
  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1821
  def initialize(test_case_started_id: T.unsafe(nil), test_step_id: T.unsafe(nil), timestamp: T.unsafe(nil)); end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1815
  def test_case_started_id; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1817
  def test_step_id; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1819
  def timestamp; end

  class << self
    # source://cucumber-messages/18.0.0/lib/cucumber/messages.deserializers.rb#1130
    def from_h(hash); end
  end
end

module Cucumber::Messages::TimeConversion
  # source://cucumber-messages/18.0.0/lib/cucumber/messages/time_conversion.rb#26
  def duration_to_seconds(duration); end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages/time_conversion.rb#17
  def seconds_to_duration(seconds_float); end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages/time_conversion.rb#6
  def time_to_timestamp(time); end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages/time_conversion.rb#13
  def timestamp_to_time(timestamp); end
end

# source://cucumber-messages/18.0.0/lib/cucumber/messages/time_conversion.rb#4
Cucumber::Messages::TimeConversion::NANOSECONDS_PER_SECOND = T.let(T.unsafe(nil), Integer)

class Cucumber::Messages::Timestamp < ::Cucumber::Messages::Message
  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1856
  def initialize(seconds: T.unsafe(nil), nanos: T.unsafe(nil)); end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1854
  def nanos; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1846
  def seconds; end

  class << self
    # source://cucumber-messages/18.0.0/lib/cucumber/messages.deserializers.rb#1151
    def from_h(hash); end
  end
end

class Cucumber::Messages::UndefinedParameterType < ::Cucumber::Messages::Message
  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1878
  def initialize(expression: T.unsafe(nil), name: T.unsafe(nil)); end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1874
  def expression; end

  # source://cucumber-messages/18.0.0/lib/cucumber/messages.dtos.rb#1876
  def name; end

  class << self
    # source://cucumber-messages/18.0.0/lib/cucumber/messages.deserializers.rb#1171
    def from_h(hash); end
  end
end

# source://cucumber-messages/18.0.0/lib/cucumber/messages.rb#8
Cucumber::Messages::VERSION = T.let(T.unsafe(nil), String)

module Cucumber::MultilineArgument
  class << self
    # source://cucumber/8.0.0/lib/cucumber/multiline_argument.rb#14
    def from(argument, location = T.unsafe(nil), content_type = T.unsafe(nil)); end

    # source://cucumber/8.0.0/lib/cucumber/multiline_argument.rb#10
    def from_core(node); end

    private

    # source://cucumber/8.0.0/lib/cucumber/multiline_argument.rb#33
    def builder; end
  end
end

class Cucumber::MultilineArgument::DataTable
  # source://cucumber/8.0.0/lib/cucumber/multiline_argument/data_table.rb#84
  def initialize(data, conversion_procs = T.unsafe(nil), header_mappings = T.unsafe(nil), header_conversion_proc = T.unsafe(nil)); end

  # source://cucumber/8.0.0/lib/cucumber/multiline_argument/data_table.rb#97
  def append_to(array); end

  # source://cucumber/8.0.0/lib/cucumber/multiline_argument/data_table.rb#385
  def cell_matrix; end

  # source://cucumber/8.0.0/lib/cucumber/multiline_argument/data_table.rb#371
  def cells_rows; end

  # source://cucumber/8.0.0/lib/cucumber/multiline_argument/data_table.rb#343
  def cells_to_hash(cells); end

  # source://cucumber/8.0.0/lib/cucumber/multiline_argument/data_table.rb#387
  def col_width(col); end

  # source://cucumber/8.0.0/lib/cucumber/multiline_argument/data_table.rb#197
  def column_names; end

  # source://cucumber/8.0.0/lib/cucumber/multiline_argument/data_table.rb#436
  def columns; end

  # source://cucumber/8.0.0/lib/cucumber/multiline_argument/data_table.rb#34
  def describe_to(visitor, *args); end

  # source://cucumber/8.0.0/lib/cucumber/multiline_argument/data_table.rb#319
  def diff!(other_table, options = T.unsafe(nil)); end

  # source://cucumber/8.0.0/lib/cucumber/multiline_argument/data_table.rb#207
  def each_cells_row(&proc); end

  # source://cucumber/8.0.0/lib/cucumber/multiline_argument/data_table.rb#105
  def file; end

  # source://cucumber/8.0.0/lib/cucumber/multiline_argument/data_table.rb#105
  def file=(_arg0); end

  # source://cucumber/8.0.0/lib/cucumber/multiline_argument/data_table.rb#140
  def hashes; end

  # source://cucumber/8.0.0/lib/cucumber/multiline_argument/data_table.rb#381
  def header_cell(col); end

  # source://cucumber/8.0.0/lib/cucumber/multiline_argument/data_table.rb#377
  def headers; end

  # source://cucumber/8.0.0/lib/cucumber/multiline_argument/data_table.rb#353
  def index(cells); end

  # source://cucumber/8.0.0/lib/cucumber/multiline_argument/data_table.rb#107
  def location; end

  # source://cucumber/8.0.0/lib/cucumber/multiline_argument/data_table.rb#277
  def map_column(column_name, strict: T.unsafe(nil), &conversion_proc); end

  # source://cucumber/8.0.0/lib/cucumber/multiline_argument/data_table.rb#259
  def map_headers(mappings = T.unsafe(nil), &block); end

  # source://cucumber/8.0.0/lib/cucumber/multiline_argument/data_table.rb#221
  def match(pattern); end

  # source://cucumber/8.0.0/lib/cucumber/multiline_argument/data_table.rb#191
  def raw; end

  # source://cucumber/8.0.0/lib/cucumber/multiline_argument/data_table.rb#201
  def rows; end

  # source://cucumber/8.0.0/lib/cucumber/multiline_argument/data_table.rb#174
  def rows_hash; end

  # source://cucumber/8.0.0/lib/cucumber/multiline_argument/data_table.rb#155
  def symbolic_hashes; end

  # source://cucumber/8.0.0/lib/cucumber/multiline_argument/data_table.rb#367
  def text?(text); end

  # source://cucumber/8.0.0/lib/cucumber/multiline_argument/data_table.rb#339
  def to_hash; end

  # source://cucumber/8.0.0/lib/cucumber/multiline_argument/data_table.rb#442
  def to_json(*args); end

  # source://cucumber/8.0.0/lib/cucumber/multiline_argument/data_table.rb#391
  def to_s(options = T.unsafe(nil)); end

  # source://cucumber/8.0.0/lib/cucumber/multiline_argument/data_table.rb#101
  def to_step_definition_arg; end

  # source://cucumber/8.0.0/lib/cucumber/multiline_argument/data_table.rb#122
  def transpose; end

  # source://cucumber/8.0.0/lib/cucumber/multiline_argument/data_table.rb#357
  def verify_column(column_name); end

  # source://cucumber/8.0.0/lib/cucumber/multiline_argument/data_table.rb#361
  def verify_table_width(width); end

  protected

  # source://cucumber/8.0.0/lib/cucumber/multiline_argument/data_table.rb#453
  def build_hashes; end

  # source://cucumber/8.0.0/lib/cucumber/multiline_argument/data_table.rb#504
  def clear_cache!; end

  # source://cucumber/8.0.0/lib/cucumber/multiline_argument/data_table.rb#472
  def convert_columns!; end

  # source://cucumber/8.0.0/lib/cucumber/multiline_argument/data_table.rb#486
  def convert_headers!; end

  # source://cucumber/8.0.0/lib/cucumber/multiline_argument/data_table.rb#459
  def create_cell_matrix(ast_table); end

  # source://cucumber/8.0.0/lib/cucumber/multiline_argument/data_table.rb#508
  def ensure_table(table_or_array); end

  # source://cucumber/8.0.0/lib/cucumber/multiline_argument/data_table.rb#514
  def symbolize_key(key); end

  class << self
    # source://cucumber/8.0.0/lib/cucumber/multiline_argument/data_table.rb#30
    def default_arg_name; end

    # source://cucumber/8.0.0/lib/cucumber/multiline_argument/data_table.rb#39
    def from(data); end

    private

    # source://cucumber/8.0.0/lib/cucumber/multiline_argument/data_table.rb#59
    def from_array(data); end

    # source://cucumber/8.0.0/lib/cucumber/multiline_argument/data_table.rb#52
    def parse(text); end
  end
end

class Cucumber::MultilineArgument::DataTable::Builder
  # source://cucumber/8.0.0/lib/cucumber/multiline_argument/data_table.rb#67
  def initialize; end

  # source://cucumber/8.0.0/lib/cucumber/multiline_argument/data_table.rb#75
  def eof; end

  # source://cucumber/8.0.0/lib/cucumber/multiline_argument/data_table.rb#71
  def row(row); end

  # source://cucumber/8.0.0/lib/cucumber/multiline_argument/data_table.rb#65
  def rows; end
end

class Cucumber::MultilineArgument::DataTable::Cell
  # source://cucumber/8.0.0/lib/cucumber/multiline_argument/data_table.rb#583
  def initialize(value, table, line); end

  # source://cucumber/8.0.0/lib/cucumber/multiline_argument/data_table.rb#593
  def ==(other); end

  # source://cucumber/8.0.0/lib/cucumber/multiline_argument/data_table.rb#597
  def eql?(other); end

  # source://cucumber/8.0.0/lib/cucumber/multiline_argument/data_table.rb#601
  def hash; end

  # source://cucumber/8.0.0/lib/cucumber/multiline_argument/data_table.rb#589
  def inspect!; end

  # source://cucumber/8.0.0/lib/cucumber/multiline_argument/data_table.rb#580
  def line; end

  # source://cucumber/8.0.0/lib/cucumber/multiline_argument/data_table.rb#581
  def status; end

  # source://cucumber/8.0.0/lib/cucumber/multiline_argument/data_table.rb#581
  def status=(_arg0); end

  # source://cucumber/8.0.0/lib/cucumber/multiline_argument/data_table.rb#580
  def table; end

  # source://cucumber/8.0.0/lib/cucumber/multiline_argument/data_table.rb#606
  def to_sexp; end

  # source://cucumber/8.0.0/lib/cucumber/multiline_argument/data_table.rb#581
  def value; end

  # source://cucumber/8.0.0/lib/cucumber/multiline_argument/data_table.rb#581
  def value=(_arg0); end
end

class Cucumber::MultilineArgument::DataTable::Cells
  include ::Enumerable
  include ::Cucumber::Gherkin::Formatter::Escaping

  # source://cucumber/8.0.0/lib/cucumber/multiline_argument/data_table.rb#525
  def initialize(table, cells); end

  # source://cucumber/8.0.0/lib/cucumber/multiline_argument/data_table.rb#552
  def [](n); end

  # source://cucumber/8.0.0/lib/cucumber/multiline_argument/data_table.rb#530
  def accept(visitor); end

  # source://cucumber/8.0.0/lib/cucumber/multiline_argument/data_table.rb#560
  def dom_id; end

  # source://cucumber/8.0.0/lib/cucumber/multiline_argument/data_table.rb#564
  def each(&proc); end

  # source://cucumber/8.0.0/lib/cucumber/multiline_argument/data_table.rb#523
  def exception; end

  # source://cucumber/8.0.0/lib/cucumber/multiline_argument/data_table.rb#556
  def line; end

  # source://cucumber/8.0.0/lib/cucumber/multiline_argument/data_table.rb#544
  def to_hash; end

  # source://cucumber/8.0.0/lib/cucumber/multiline_argument/data_table.rb#540
  def to_sexp; end

  # source://cucumber/8.0.0/lib/cucumber/multiline_argument/data_table.rb#548
  def value(n); end

  private

  # source://cucumber/8.0.0/lib/cucumber/multiline_argument/data_table.rb#570
  def index; end

  # source://cucumber/8.0.0/lib/cucumber/multiline_argument/data_table.rb#574
  def width; end
end

class Cucumber::MultilineArgument::DataTable::DataTablePrinter
  include ::Cucumber::Gherkin::Formatter::Escaping

  # source://cucumber/8.0.0/lib/cucumber/multiline_argument/data_table.rb#402
  def initialize(data_table, indentation, prefixes); end

  # source://cucumber/8.0.0/lib/cucumber/multiline_argument/data_table.rb#408
  def to_s; end

  private

  # source://cucumber/8.0.0/lib/cucumber/multiline_argument/data_table.rb#399
  def data_table; end

  # source://cucumber/8.0.0/lib/cucumber/multiline_argument/data_table.rb#427
  def format_cell(cell, col_width); end

  # source://cucumber/8.0.0/lib/cucumber/multiline_argument/data_table.rb#418
  def format_row(row); end

  # source://cucumber/8.0.0/lib/cucumber/multiline_argument/data_table.rb#399
  def indentation; end

  # source://cucumber/8.0.0/lib/cucumber/multiline_argument/data_table.rb#399
  def prefixes; end
end

class Cucumber::MultilineArgument::DataTable::Different < ::StandardError
  # source://cucumber/8.0.0/lib/cucumber/multiline_argument/data_table.rb#333
  def initialize(table); end

  # source://cucumber/8.0.0/lib/cucumber/multiline_argument/data_table.rb#331
  def table; end
end

# source://cucumber/8.0.0/lib/cucumber/multiline_argument/data_table.rb#78
Cucumber::MultilineArgument::DataTable::NULL_CONVERSIONS = T.let(T.unsafe(nil), Hash)

class Cucumber::MultilineArgument::DataTable::SurplusCell < ::Cucumber::MultilineArgument::DataTable::Cell
  # source://cucumber/8.0.0/lib/cucumber/multiline_argument/data_table.rb#616
  def ==(_other); end

  # source://cucumber/8.0.0/lib/cucumber/multiline_argument/data_table.rb#620
  def hash; end

  # source://cucumber/8.0.0/lib/cucumber/multiline_argument/data_table.rb#612
  def status; end
end

class Cucumber::MultilineArgument::DocString < ::SimpleDelegator
  # source://cucumber/8.0.0/lib/cucumber/multiline_argument/doc_string.rb#6
  def append_to(array); end
end

class Cucumber::MultilineArgument::None
  # source://cucumber/8.0.0/lib/cucumber/multiline_argument.rb#55
  def append_to(array); end

  # source://cucumber/8.0.0/lib/cucumber/multiline_argument.rb#57
  def describe_to(visitor); end
end

class Cucumber::NoStepMatch
  # source://cucumber/8.0.0/lib/cucumber/step_match.rb#108
  def initialize(step, name); end

  # source://cucumber/8.0.0/lib/cucumber/step_match.rb#139
  def activate(test_step); end

  # source://cucumber/8.0.0/lib/cucumber/step_match.rb#127
  def backtrace_line; end

  # source://cucumber/8.0.0/lib/cucumber/step_match.rb#123
  def file_colon_line; end

  # source://cucumber/8.0.0/lib/cucumber/step_match.rb#113
  def format_args(*_args); end

  # source://cucumber/8.0.0/lib/cucumber/step_match.rb#117
  def location; end

  # source://cucumber/8.0.0/lib/cucumber/step_match.rb#106
  def name; end

  # source://cucumber/8.0.0/lib/cucumber/step_match.rb#135
  def step_arguments; end

  # source://cucumber/8.0.0/lib/cucumber/step_match.rb#106
  def step_definition; end

  # source://cucumber/8.0.0/lib/cucumber/step_match.rb#131
  def text_length; end
end

# source://cucumber-core//lib/cucumber/core/platform.rb#11
Cucumber::OS_X = T.let(T.unsafe(nil), Integer)

class Cucumber::Pending < ::Cucumber::Core::Test::Result::Pending; end

class Cucumber::ProjectInitializer
  # source://cucumber/8.0.0/lib/cucumber/project_initializer.rb#6
  def run; end

  private

  # source://cucumber/8.0.0/lib/cucumber/project_initializer.rb#15
  def create_directory(dir_name); end

  # source://cucumber/8.0.0/lib/cucumber/project_initializer.rb#23
  def create_directory_or_file(file_name, directory); end

  # source://cucumber/8.0.0/lib/cucumber/project_initializer.rb#19
  def create_file(file_name); end

  # source://cucumber/8.0.0/lib/cucumber/project_initializer.rb#40
  def report_creating(file); end

  # source://cucumber/8.0.0/lib/cucumber/project_initializer.rb#36
  def report_exists(file); end
end

# source://cucumber/8.0.0/lib/cucumber/platform.rb#13
Cucumber::RAILS = T.let(T.unsafe(nil), T.untyped)

# source://cucumber/8.0.0/lib/cucumber/platform.rb#15
Cucumber::RUBY = T.let(T.unsafe(nil), String)

# source://cucumber-core//lib/cucumber/core/platform.rb#14
Cucumber::RUBY_1_9 = T.let(T.unsafe(nil), T.untyped)

# source://cucumber-core//lib/cucumber/core/platform.rb#13
Cucumber::RUBY_2_0 = T.let(T.unsafe(nil), T.untyped)

# source://cucumber/8.0.0/lib/cucumber/platform.rb#14
Cucumber::RUBY_BINARY = T.let(T.unsafe(nil), String)

module Cucumber::RunningTestCase
  class << self
    # source://cucumber/8.0.0/lib/cucumber/running_test_case.rb#19
    def new(test_case); end
  end
end

class Cucumber::RunningTestCase::TestCase < ::SimpleDelegator
  # source://cucumber/8.0.0/lib/cucumber/running_test_case.rb#24
  def initialize(test_case, result = T.unsafe(nil)); end

  # source://cucumber/8.0.0/lib/cucumber/running_test_case.rb#30
  def accept_hook?(hook); end

  # source://cucumber/8.0.0/lib/cucumber/running_test_case.rb#34
  def exception; end

  # source://cucumber/8.0.0/lib/cucumber/running_test_case.rb#44
  def failed?; end

  # source://cucumber/8.0.0/lib/cucumber/running_test_case.rb#48
  def passed?; end

  # source://cucumber/8.0.0/lib/cucumber/running_test_case.rb#52
  def source_tag_names; end

  # source://cucumber/8.0.0/lib/cucumber/running_test_case.rb#40
  def status; end

  # source://cucumber/8.0.0/lib/cucumber/running_test_case.rb#56
  def with_result(result); end
end

class Cucumber::Runtime
  include ::Cucumber::Core
  include ::Cucumber::Formatter::Duration
  include ::Cucumber::Runtime::UserInterface

  # source://cucumber/8.0.0/lib/cucumber/runtime.rb#58
  def initialize(configuration = T.unsafe(nil)); end

  # source://cucumber/8.0.0/lib/cucumber/runtime.rb#99
  def begin_scenario(test_case); end

  # source://cucumber/8.0.0/lib/cucumber/runtime.rb#52
  def configuration; end

  # source://cucumber/8.0.0/lib/cucumber/runtime.rb#64
  def configure(new_configuration); end

  # source://cucumber/8.0.0/lib/cucumber/runtime.rb#109
  def doc_string(string_without_triple_quotes, content_type = T.unsafe(nil), _line_offset = T.unsafe(nil)); end

  # source://cucumber/8.0.0/lib/cucumber/runtime.rb#91
  def dry_run?; end

  # source://cucumber/8.0.0/lib/cucumber/runtime.rb#103
  def end_scenario(_scenario); end

  # source://cucumber/8.0.0/lib/cucumber/runtime.rb#113
  def failure?; end

  # source://cucumber/8.0.0/lib/cucumber/runtime.rb#87
  def features_paths; end

  # source://cucumber/8.0.0/lib/cucumber/runtime.rb#52
  def results; end

  # source://cucumber/8.0.0/lib/cucumber/runtime.rb#69
  def run!; end

  # source://cucumber/8.0.0/lib/cucumber/runtime.rb#52
  def support_code; end

  # source://cucumber/8.0.0/lib/cucumber/runtime.rb#95
  def unmatched_step_definitions; end

  private

  # source://cucumber/8.0.0/lib/cucumber/runtime.rb#233
  def accept_options?(factory); end

  # source://cucumber/8.0.0/lib/cucumber/runtime.rb#220
  def create_formatter(factory, formatter_options, path_or_io); end

  # source://cucumber/8.0.0/lib/cucumber/runtime.rb#205
  def fail_fast_report; end

  # source://cucumber/8.0.0/lib/cucumber/runtime.rb#144
  def feature_files; end

  # source://cucumber/8.0.0/lib/cucumber/runtime.rb#136
  def features; end

  # source://cucumber/8.0.0/lib/cucumber/runtime.rb#148
  def filespecs; end

  # source://cucumber/8.0.0/lib/cucumber/runtime.rb#238
  def filters; end

  # source://cucumber/8.0.0/lib/cucumber/runtime.rb#131
  def fire_after_all_hook; end

  # source://cucumber/8.0.0/lib/cucumber/runtime.rb#127
  def fire_before_all_hook; end

  # source://cucumber/8.0.0/lib/cucumber/runtime.rb#123
  def fire_install_plugin_hook; end

  # source://cucumber/8.0.0/lib/cucumber/runtime.rb#213
  def formatters; end

  # source://cucumber/8.0.0/lib/cucumber/runtime.rb#272
  def load_step_definitions; end

  # source://cucumber/8.0.0/lib/cucumber/runtime.rb#281
  def log; end

  # source://cucumber/8.0.0/lib/cucumber/runtime.rb#209
  def publish_banner_printer; end

  # source://cucumber/8.0.0/lib/cucumber/runtime.rb#277
  def registry_wrapper; end

  # source://cucumber/8.0.0/lib/cucumber/runtime.rb#192
  def report; end

  # source://cucumber/8.0.0/lib/cucumber/runtime.rb#201
  def summary_report; end
end

class Cucumber::Runtime::AfterHooks
  # source://cucumber/8.0.0/lib/cucumber/runtime/after_hooks.rb#6
  def initialize(id_generator, hooks, scenario, event_bus); end

  # source://cucumber/8.0.0/lib/cucumber/runtime/after_hooks.rb#13
  def apply_to(test_case); end

  private

  # source://cucumber/8.0.0/lib/cucumber/runtime/after_hooks.rb#21
  def after_hooks; end
end

class Cucumber::Runtime::BeforeHooks
  # source://cucumber/8.0.0/lib/cucumber/runtime/before_hooks.rb#8
  def initialize(id_generator, hooks, scenario, event_bus); end

  # source://cucumber/8.0.0/lib/cucumber/runtime/before_hooks.rb#15
  def apply_to(test_case); end

  private

  # source://cucumber/8.0.0/lib/cucumber/runtime/before_hooks.rb#23
  def before_hooks; end
end

class Cucumber::Runtime::ForProgrammingLanguages
  extend ::Forwardable

  # source://cucumber/8.0.0/lib/cucumber/runtime/for_programming_languages.rb#17
  def initialize(support_code, user_interface); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def ask(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def attach(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def embed(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def features_paths(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def invoke_dynamic_step(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def invoke_dynamic_steps(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def puts(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def step_match(*args, **_arg1, &block); end

  # source://cucumber/8.0.0/lib/cucumber/runtime/for_programming_languages.rb#15
  def support_code; end
end

class Cucumber::Runtime::MetaMessageBuilder
  class << self
    # source://cucumber/8.0.0/lib/cucumber/runtime/meta_message_builder.rb#37
    def build_meta_message(env = T.unsafe(nil)); end

    private

    # source://cucumber/8.0.0/lib/cucumber/runtime/meta_message_builder.rb#81
    def ci(env); end

    # source://cucumber/8.0.0/lib/cucumber/runtime/meta_message_builder.rb#75
    def cpu; end

    # source://cucumber/8.0.0/lib/cucumber/runtime/meta_message_builder.rb#93
    def git_info(ci_data); end

    # source://cucumber/8.0.0/lib/cucumber/runtime/meta_message_builder.rb#54
    def implementation; end

    # source://cucumber/8.0.0/lib/cucumber/runtime/meta_message_builder.rb#68
    def os; end

    # source://cucumber/8.0.0/lib/cucumber/runtime/meta_message_builder.rb#50
    def protocol_version; end

    # source://cucumber/8.0.0/lib/cucumber/runtime/meta_message_builder.rb#61
    def runtime; end
  end
end

class Cucumber::Runtime::NormalisedEncodingFile
  # source://cucumber/8.0.0/lib/cucumber/runtime.rb#160
  def initialize(path); end

  # source://cucumber/8.0.0/lib/cucumber/runtime.rb#169
  def read; end

  private

  # source://cucumber/8.0.0/lib/cucumber/runtime.rb#175
  def set_encoding; end

  class << self
    # source://cucumber/8.0.0/lib/cucumber/runtime.rb#156
    def read(path); end
  end
end

# source://cucumber/8.0.0/lib/cucumber/runtime.rb#153
Cucumber::Runtime::NormalisedEncodingFile::COMMENT_OR_EMPTY_LINE_PATTERN = T.let(T.unsafe(nil), Regexp)

# source://cucumber/8.0.0/lib/cucumber/runtime.rb#154
Cucumber::Runtime::NormalisedEncodingFile::ENCODING_PATTERN = T.let(T.unsafe(nil), Regexp)

class Cucumber::Runtime::StepHooks
  # source://cucumber/8.0.0/lib/cucumber/runtime/step_hooks.rb#6
  def initialize(id_generator, hooks, event_bus); end

  # source://cucumber/8.0.0/lib/cucumber/runtime/step_hooks.rb#12
  def apply(test_steps); end

  private

  # source://cucumber/8.0.0/lib/cucumber/runtime/step_hooks.rb#20
  def after_step_hooks(test_step); end
end

class Cucumber::Runtime::SupportCode
  include ::Cucumber::Constantize

  # source://cucumber/8.0.0/lib/cucumber/runtime/support_code.rb#44
  def initialize(user_interface, configuration = T.unsafe(nil)); end

  # source://cucumber/8.0.0/lib/cucumber/runtime/support_code.rb#119
  def apply_after_hooks(test_case); end

  # source://cucumber/8.0.0/lib/cucumber/runtime/support_code.rb#111
  def apply_before_hooks(test_case); end

  # source://cucumber/8.0.0/lib/cucumber/runtime/support_code.rb#51
  def configure(new_configuration); end

  # source://cucumber/8.0.0/lib/cucumber/runtime/support_code.rb#105
  def find_after_step_hooks(test_case); end

  # source://cucumber/8.0.0/lib/cucumber/runtime/support_code.rb#127
  def find_around_hooks(test_case); end

  # source://cucumber/8.0.0/lib/cucumber/runtime/support_code.rb#96
  def fire_hook(name, *args); end

  # source://cucumber/8.0.0/lib/cucumber/runtime/support_code.rb#72
  def invoke_dynamic_step(step_name, multiline_argument, _location = T.unsafe(nil)); end

  # source://cucumber/8.0.0/lib/cucumber/runtime/support_code.rb#61
  def invoke_dynamic_steps(steps_text, iso_code, _location); end

  # source://cucumber/8.0.0/lib/cucumber/runtime/support_code.rb#79
  def load_files!(files); end

  # source://cucumber/8.0.0/lib/cucumber/runtime/support_code.rb#87
  def load_files_from_paths(paths); end

  # source://cucumber/8.0.0/lib/cucumber/runtime/support_code.rb#42
  def registry; end

  # source://cucumber/8.0.0/lib/cucumber/runtime/support_code.rb#101
  def step_definitions; end

  # source://cucumber/8.0.0/lib/cucumber/runtime/support_code.rb#92
  def unmatched_step_definitions; end

  private

  # source://cucumber/8.0.0/lib/cucumber/runtime/support_code.rb#143
  def load_file(file); end

  # source://cucumber/8.0.0/lib/cucumber/runtime/support_code.rb#148
  def log; end

  # source://cucumber/8.0.0/lib/cucumber/runtime/support_code.rb#139
  def step_matches(step_name); end
end

class Cucumber::Runtime::SupportCode::StepInvoker
  # source://cucumber/8.0.0/lib/cucumber/runtime/support_code.rb#16
  def initialize(support_code); end

  # source://cucumber/8.0.0/lib/cucumber/runtime/support_code.rb#29
  def multiline_arg(step, location); end

  # source://cucumber/8.0.0/lib/cucumber/runtime/support_code.rb#24
  def step(step); end

  # source://cucumber/8.0.0/lib/cucumber/runtime/support_code.rb#20
  def steps(steps); end
end

module Cucumber::Runtime::UserInterface
  # source://cucumber/8.0.0/lib/cucumber/runtime/user_interface.rb#23
  def ask(question, timeout_seconds); end

  # source://cucumber/8.0.0/lib/cucumber/runtime/user_interface.rb#44
  def attach(src, media_type); end

  # source://cucumber/8.0.0/lib/cucumber/runtime/user_interface.rb#8
  def visitor=(_arg0); end

  private

  # source://cucumber/8.0.0/lib/cucumber/runtime/user_interface.rb#58
  def jruby_gets(timeout_seconds); end

  # source://cucumber/8.0.0/lib/cucumber/runtime/user_interface.rb#50
  def mri_gets(timeout_seconds); end
end

class Cucumber::SkippingStepMatch
  # source://cucumber/8.0.0/lib/cucumber/step_match.rb#100
  def activate(test_step); end
end

class Cucumber::StepDefinitionLight
  # source://cucumber/8.0.0/lib/cucumber/step_definition_light.rb#11
  def initialize(regexp_source, location); end

  # source://cucumber/8.0.0/lib/cucumber/step_definition_light.rb#16
  def eql?(other); end

  # source://cucumber/8.0.0/lib/cucumber/step_definition_light.rb#20
  def hash; end

  # source://cucumber/8.0.0/lib/cucumber/step_definition_light.rb#9
  def location; end

  # source://cucumber/8.0.0/lib/cucumber/step_definition_light.rb#9
  def regexp_source; end
end

class Cucumber::StepDefinitions
  # source://cucumber/8.0.0/lib/cucumber/step_definitions.rb#5
  def initialize(configuration = T.unsafe(nil)); end

  # source://cucumber/8.0.0/lib/cucumber/step_definitions.rb#11
  def to_json(obj = T.unsafe(nil)); end
end

class Cucumber::StepMatch
  # source://cucumber/8.0.0/lib/cucumber/step_match.rb#10
  def initialize(step_definition, step_name, step_arguments); end

  # source://cucumber/8.0.0/lib/cucumber/step_match.rb#25
  def activate(test_step); end

  # source://cucumber/8.0.0/lib/cucumber/step_match.rb#18
  def args; end

  # source://cucumber/8.0.0/lib/cucumber/step_match.rb#64
  def backtrace_line; end

  # source://cucumber/8.0.0/lib/cucumber/step_match.rb#60
  def file_colon_line; end

  # source://cucumber/8.0.0/lib/cucumber/step_match.rb#52
  def format_args(format = T.unsafe(nil), &proc); end

  # source://cucumber/8.0.0/lib/cucumber/step_match.rb#94
  def inspect; end

  # source://cucumber/8.0.0/lib/cucumber/step_match.rb#31
  def invoke(multiline_arg); end

  # source://cucumber/8.0.0/lib/cucumber/step_match.rb#56
  def location; end

  # source://cucumber/8.0.0/lib/cucumber/step_match.rb#72
  def replace_arguments(string, step_arguments, format); end

  # source://cucumber/8.0.0/lib/cucumber/step_match.rb#8
  def step_arguments; end

  # source://cucumber/8.0.0/lib/cucumber/step_match.rb#8
  def step_definition; end

  # source://cucumber/8.0.0/lib/cucumber/step_match.rb#68
  def text_length; end
end

module Cucumber::StepMatchSearch
  class << self
    # source://cucumber/8.0.0/lib/cucumber/step_match_search.rb#5
    def new(search, configuration); end
  end
end

class Cucumber::StepMatchSearch::AssertUnambiguousMatch
  # source://cucumber/8.0.0/lib/cucumber/step_match_search.rb#15
  def initialize(search, configuration); end

  # source://cucumber/8.0.0/lib/cucumber/step_match_search.rb#20
  def call(step_name); end
end

class Cucumber::StepMatchSearch::AttemptToGuessAmbiguousMatch
  # source://cucumber/8.0.0/lib/cucumber/step_match_search.rb#29
  def initialize(search); end

  # source://cucumber/8.0.0/lib/cucumber/step_match_search.rb#33
  def call(step_name); end

  private

  # source://cucumber/8.0.0/lib/cucumber/step_match_search.rb#39
  def best_matches(_step_name, step_matches); end
end

class Cucumber::StepMatchSearch::CachesStepMatch < ::SimpleDelegator
  # source://cucumber/8.0.0/lib/cucumber/step_match_search.rb#58
  def call(step_name); end
end

class Cucumber::TagExcess < ::StandardError
  # source://cucumber/8.0.0/lib/cucumber/errors.rb#48
  def initialize(messages); end
end

module Cucumber::TagExpressions; end

class Cucumber::TagExpressions::And
  # source://cucumber-tag-expressions/4.1.0/lib/cucumber/tag_expressions/expressions.rb#51
  def initialize(left, right); end

  # source://cucumber-tag-expressions/4.1.0/lib/cucumber/tag_expressions/expressions.rb#56
  def evaluate(variables); end

  # source://cucumber-tag-expressions/4.1.0/lib/cucumber/tag_expressions/expressions.rb#60
  def to_s; end
end

class Cucumber::TagExpressions::Literal
  # source://cucumber-tag-expressions/4.1.0/lib/cucumber/tag_expressions/expressions.rb#5
  def initialize(value); end

  # source://cucumber-tag-expressions/4.1.0/lib/cucumber/tag_expressions/expressions.rb#9
  def evaluate(variables); end

  # source://cucumber-tag-expressions/4.1.0/lib/cucumber/tag_expressions/expressions.rb#13
  def to_s; end
end

class Cucumber::TagExpressions::Not
  # source://cucumber-tag-expressions/4.1.0/lib/cucumber/tag_expressions/expressions.rb#20
  def initialize(expression); end

  # source://cucumber-tag-expressions/4.1.0/lib/cucumber/tag_expressions/expressions.rb#24
  def evaluate(variables); end

  # source://cucumber-tag-expressions/4.1.0/lib/cucumber/tag_expressions/expressions.rb#28
  def to_s; end
end

class Cucumber::TagExpressions::Or
  # source://cucumber-tag-expressions/4.1.0/lib/cucumber/tag_expressions/expressions.rb#35
  def initialize(left, right); end

  # source://cucumber-tag-expressions/4.1.0/lib/cucumber/tag_expressions/expressions.rb#40
  def evaluate(variables); end

  # source://cucumber-tag-expressions/4.1.0/lib/cucumber/tag_expressions/expressions.rb#44
  def to_s; end
end

class Cucumber::TagExpressions::Parser
  # source://cucumber-tag-expressions/4.1.0/lib/cucumber/tag_expressions/parser.rb#7
  def initialize; end

  # source://cucumber-tag-expressions/4.1.0/lib/cucumber/tag_expressions/parser.rb#20
  def parse(infix_expression); end

  private

  # source://cucumber-tag-expressions/4.1.0/lib/cucumber/tag_expressions/parser.rb#35
  def assoc_of(token, value); end

  # source://cucumber-tag-expressions/4.1.0/lib/cucumber/tag_expressions/parser.rb#153
  def check(expected_token_type, token_type); end

  # source://cucumber-tag-expressions/4.1.0/lib/cucumber/tag_expressions/parser.rb#121
  def handle_binary_operator(token, expected_token_type); end

  # source://cucumber-tag-expressions/4.1.0/lib/cucumber/tag_expressions/parser.rb#137
  def handle_close_paren(_token, expected_token_type); end

  # source://cucumber-tag-expressions/4.1.0/lib/cucumber/tag_expressions/parser.rb#147
  def handle_literal(token, expected_token_type); end

  # source://cucumber-tag-expressions/4.1.0/lib/cucumber/tag_expressions/parser.rb#131
  def handle_open_paren(token, expected_token_type); end

  # source://cucumber-tag-expressions/4.1.0/lib/cucumber/tag_expressions/parser.rb#115
  def handle_unary_operator(token, expected_token_type); end

  # source://cucumber-tag-expressions/4.1.0/lib/cucumber/tag_expressions/parser.rb#39
  def lower_precedence?(operation); end

  # source://cucumber-tag-expressions/4.1.0/lib/cucumber/tag_expressions/parser.rb#46
  def operator?(token); end

  # source://cucumber-tag-expressions/4.1.0/lib/cucumber/tag_expressions/parser.rb#159
  def pop(array, n = T.unsafe(nil)); end

  # source://cucumber-tag-expressions/4.1.0/lib/cucumber/tag_expressions/parser.rb#51
  def precedence(token); end

  # source://cucumber-tag-expressions/4.1.0/lib/cucumber/tag_expressions/parser.rb#88
  def process_tokens!(infix_expression); end

  # source://cucumber-tag-expressions/4.1.0/lib/cucumber/tag_expressions/parser.rb#99
  def push_expression(token); end

  # source://cucumber-tag-expressions/4.1.0/lib/cucumber/tag_expressions/parser.rb#55
  def tokens(infix_expression); end
end

module Cucumber::Term; end

module Cucumber::Term::ANSIColor
  # source://cucumber/8.0.0/lib/cucumber/term/ansicolor.rb#117
  def attributes; end

  # source://cucumber/8.0.0/lib/cucumber/term/ansicolor.rb#89
  def black(text = T.unsafe(nil), &block); end

  # source://cucumber/8.0.0/lib/cucumber/term/ansicolor.rb#89
  def blink(text = T.unsafe(nil), &block); end

  # source://cucumber/8.0.0/lib/cucumber/term/ansicolor.rb#89
  def blue(text = T.unsafe(nil), &block); end

  # source://cucumber/8.0.0/lib/cucumber/term/ansicolor.rb#89
  def bold(text = T.unsafe(nil), &block); end

  # source://cucumber/8.0.0/lib/cucumber/term/ansicolor.rb#89
  def clear(text = T.unsafe(nil), &block); end

  # source://cucumber/8.0.0/lib/cucumber/term/ansicolor.rb#89
  def concealed(text = T.unsafe(nil), &block); end

  # source://cucumber/8.0.0/lib/cucumber/term/ansicolor.rb#89
  def cyan(text = T.unsafe(nil), &block); end

  # source://cucumber/8.0.0/lib/cucumber/term/ansicolor.rb#89
  def dark(text = T.unsafe(nil), &block); end

  # source://cucumber/8.0.0/lib/cucumber/term/ansicolor.rb#89
  def green(text = T.unsafe(nil), &block); end

  # source://cucumber/8.0.0/lib/cucumber/term/ansicolor.rb#89
  def grey(text = T.unsafe(nil), &block); end

  # source://cucumber/8.0.0/lib/cucumber/term/ansicolor.rb#89
  def italic(text = T.unsafe(nil), &block); end

  # source://cucumber/8.0.0/lib/cucumber/term/ansicolor.rb#89
  def magenta(text = T.unsafe(nil), &block); end

  # source://cucumber/8.0.0/lib/cucumber/term/ansicolor.rb#89
  def negative(text = T.unsafe(nil), &block); end

  # source://cucumber/8.0.0/lib/cucumber/term/ansicolor.rb#89
  def on_black(text = T.unsafe(nil), &block); end

  # source://cucumber/8.0.0/lib/cucumber/term/ansicolor.rb#89
  def on_blue(text = T.unsafe(nil), &block); end

  # source://cucumber/8.0.0/lib/cucumber/term/ansicolor.rb#89
  def on_cyan(text = T.unsafe(nil), &block); end

  # source://cucumber/8.0.0/lib/cucumber/term/ansicolor.rb#89
  def on_green(text = T.unsafe(nil), &block); end

  # source://cucumber/8.0.0/lib/cucumber/term/ansicolor.rb#89
  def on_magenta(text = T.unsafe(nil), &block); end

  # source://cucumber/8.0.0/lib/cucumber/term/ansicolor.rb#89
  def on_red(text = T.unsafe(nil), &block); end

  # source://cucumber/8.0.0/lib/cucumber/term/ansicolor.rb#89
  def on_white(text = T.unsafe(nil), &block); end

  # source://cucumber/8.0.0/lib/cucumber/term/ansicolor.rb#89
  def on_yellow(text = T.unsafe(nil), &block); end

  # source://cucumber/8.0.0/lib/cucumber/term/ansicolor.rb#89
  def rapid_blink(text = T.unsafe(nil), &block); end

  # source://cucumber/8.0.0/lib/cucumber/term/ansicolor.rb#89
  def red(text = T.unsafe(nil), &block); end

  # source://cucumber/8.0.0/lib/cucumber/term/ansicolor.rb#89
  def reset(text = T.unsafe(nil), &block); end

  # source://cucumber/8.0.0/lib/cucumber/term/ansicolor.rb#89
  def strikethrough(text = T.unsafe(nil), &block); end

  # source://cucumber/8.0.0/lib/cucumber/term/ansicolor.rb#104
  def uncolored(text = T.unsafe(nil)); end

  # source://cucumber/8.0.0/lib/cucumber/term/ansicolor.rb#89
  def underline(text = T.unsafe(nil), &block); end

  # source://cucumber/8.0.0/lib/cucumber/term/ansicolor.rb#89
  def underscore(text = T.unsafe(nil), &block); end

  # source://cucumber/8.0.0/lib/cucumber/term/ansicolor.rb#89
  def white(text = T.unsafe(nil), &block); end

  # source://cucumber/8.0.0/lib/cucumber/term/ansicolor.rb#89
  def yellow(text = T.unsafe(nil), &block); end

  private

  # source://cucumber/8.0.0/lib/cucumber/term/ansicolor.rb#123
  def colorize(text, color_code); end

  # source://cucumber/8.0.0/lib/cucumber/term/ansicolor.rb#130
  def uncolorize(string); end

  class << self
    # source://cucumber/8.0.0/lib/cucumber/term/ansicolor.rb#74
    def coloring; end

    # source://cucumber/8.0.0/lib/cucumber/term/ansicolor.rb#74
    def coloring=(_arg0); end

    # source://cucumber/8.0.0/lib/cucumber/term/ansicolor.rb#74
    def coloring?; end

    # source://cucumber/8.0.0/lib/cucumber/term/ansicolor.rb#80
    def included(klass); end
  end
end

# source://cucumber/8.0.0/lib/cucumber/term/ansicolor.rb#29
Cucumber::Term::ANSIColor::ATTRIBUTES = T.let(T.unsafe(nil), Array)

# source://cucumber/8.0.0/lib/cucumber/term/ansicolor.rb#61
Cucumber::Term::ANSIColor::ATTRIBUTE_NAMES = T.let(T.unsafe(nil), Array)

# source://cucumber/8.0.0/lib/cucumber/term/ansicolor.rb#66
Cucumber::Term::ANSIColor::COLORED_REGEXP = T.let(T.unsafe(nil), Regexp)

module Cucumber::Term::Banner
  # source://cucumber/8.0.0/lib/cucumber/term/banner.rb#6
  def display_banner(lines, io, border_modifiers = T.unsafe(nil)); end
end

class Cucumber::Term::Banner::BannerMaker
  include ::Cucumber::Term::ANSIColor

  # source://cucumber/8.0.0/lib/cucumber/term/banner.rb#13
  def display_banner(lines, io, border_modifiers); end

  private

  # source://cucumber/8.0.0/lib/cucumber/term/banner.rb#37
  def apply_modifiers(str, modifiers); end

  # source://cucumber/8.0.0/lib/cucumber/term/banner.rb#27
  def display_line(line); end

  # source://cucumber/8.0.0/lib/cucumber/term/banner.rb#31
  def display_span(span); end

  # source://cucumber/8.0.0/lib/cucumber/term/banner.rb#43
  def line_length(line); end

  # source://cucumber/8.0.0/lib/cucumber/term/banner.rb#51
  def span_length(span); end
end

class Cucumber::Undefined < ::Cucumber::Core::Test::Result::Undefined
  class << self
    # source://cucumber/8.0.0/lib/cucumber/errors.rb#8
    def from(result, step_name); end

    # source://cucumber/8.0.0/lib/cucumber/errors.rb#18
    def with_prefix(step_name); end
  end
end

class Cucumber::UndefinedDynamicStep < ::StandardError
  # source://cucumber/8.0.0/lib/cucumber/errors.rb#26
  def initialize(step_name); end
end

# source://cucumber/8.0.0/lib/cucumber/platform.rb#10
Cucumber::VERSION = T.let(T.unsafe(nil), String)

# source://cucumber-core//lib/cucumber/core/platform.rb#10
Cucumber::WINDOWS = T.let(T.unsafe(nil), T.untyped)

# source://cucumber-core//lib/cucumber/core/platform.rb#12
Cucumber::WINDOWS_MRI = T.let(T.unsafe(nil), T.untyped)
