# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `sys-uname` gem.
# Please instead update this file by running `bin/tapioca gem sys-uname`.

module FFI::DataConverter
  # source://ffi/1.15.5/lib/ffi/data_converter.rb#63
  def from_native(value, ctx); end

  # source://ffi/1.15.5/lib/ffi/data_converter.rb#45
  def native_type(type = T.unsafe(nil)); end

  # source://ffi/1.15.5/lib/ffi/data_converter.rb#58
  def to_native(value, ctx); end
end

module FFI::Library
  # source://ffi/1.15.5/lib/ffi/library.rb#234
  def attach_function(name, func, args, returns = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://ffi/1.15.5/lib/ffi/library.rb#331
  def attach_variable(mname, a1, a2 = T.unsafe(nil)); end

  # source://ffi/1.15.5/lib/ffi/library.rb#554
  def bitmask(*args); end

  # source://ffi/1.15.5/lib/ffi/library.rb#384
  def callback(*args); end

  # source://ffi/1.15.5/lib/ffi/library.rb#511
  def enum(*args); end

  # source://ffi/1.15.5/lib/ffi/library.rb#561
  def enum_type(name); end

  # source://ffi/1.15.5/lib/ffi/library.rb#568
  def enum_value(symbol); end

  # source://ffi/1.15.5/lib/ffi/library.rb#163
  def ffi_convention(convention = T.unsafe(nil)); end

  # source://ffi/1.15.5/lib/ffi/library.rb#95
  def ffi_lib(*names); end

  # source://ffi/1.15.5/lib/ffi/library.rb#196
  def ffi_lib_flags(*flags); end

  # source://ffi/1.15.5/lib/ffi/library.rb#173
  def ffi_libraries; end

  # source://ffi/1.15.5/lib/ffi/library.rb#575
  def find_type(t); end

  # source://ffi/1.15.5/lib/ffi/library.rb#289
  def function_names(name, arg_types); end

  # source://ffi/1.15.5/lib/ffi/library.rb#428
  def typedef(old, add, info = T.unsafe(nil)); end

  private

  # source://ffi/1.15.5/lib/ffi/library.rb#456
  def generic_enum(klass, *args); end

  class << self
    # source://ffi/1.15.5/lib/ffi/library.rb#86
    def extended(mod); end
  end
end

# source://ffi/1.15.5/lib/ffi/library.rb#79
FFI::Library::CURRENT_PROCESS = T.let(T.unsafe(nil), Object)

# source://ffi/1.15.5/lib/ffi/library.rb#182
FFI::Library::FlagsMap = T.let(T.unsafe(nil), Hash)

# source://ffi/1.15.5/lib/ffi/library.rb#80
FFI::Library::LIBC = T.let(T.unsafe(nil), String)

class FFI::Struct
  def initialize(*_arg0); end

  def [](_arg0); end
  def []=(_arg0, _arg1); end

  # source://ffi/1.15.5/lib/ffi/struct.rb#50
  def align; end

  # source://ffi/1.15.5/lib/ffi/struct.rb#50
  def alignment; end

  # source://ffi/1.15.5/lib/ffi/struct.rb#78
  def clear; end

  def layout; end

  # source://ffi/1.15.5/lib/ffi/struct.rb#61
  def members; end

  def null?; end

  # source://ffi/1.15.5/lib/ffi/struct.rb#56
  def offset_of(name); end

  # source://ffi/1.15.5/lib/ffi/struct.rb#72
  def offsets; end

  def order(*_arg0); end
  def pointer; end

  # source://ffi/1.15.5/lib/ffi/struct.rb#45
  def size; end

  # source://ffi/1.15.5/lib/ffi/struct.rb#85
  def to_ptr; end

  # source://ffi/1.15.5/lib/ffi/struct.rb#67
  def values; end

  private

  def initialize_copy(_arg0); end
  def layout=(_arg0); end
  def pointer=(_arg0); end

  class << self
    # source://ffi/1.15.5/lib/ffi/struct.rb#104
    def alignment; end

    def alloc_in(*_arg0); end
    def alloc_inout(*_arg0); end
    def alloc_out(*_arg0); end

    # source://ffi/1.15.5/lib/ffi/struct.rb#165
    def auto_ptr; end

    # source://ffi/1.15.5/lib/ffi/struct.rb#143
    def by_ref(flags = T.unsafe(nil)); end

    # source://ffi/1.15.5/lib/ffi/struct.rb#139
    def by_value; end

    # source://ffi/1.15.5/lib/ffi/struct.rb#123
    def in; end

    # source://ffi/1.15.5/lib/ffi/struct.rb#205
    def layout(*spec); end

    # source://ffi/1.15.5/lib/ffi/struct.rb#109
    def members; end

    def new_in(*_arg0); end
    def new_inout(*_arg0); end
    def new_out(*_arg0); end

    # source://ffi/1.15.5/lib/ffi/struct.rb#119
    def offset_of(name); end

    # source://ffi/1.15.5/lib/ffi/struct.rb#114
    def offsets; end

    # source://ffi/1.15.5/lib/ffi/struct.rb#127
    def out; end

    # source://ffi/1.15.5/lib/ffi/struct.rb#131
    def ptr(flags = T.unsafe(nil)); end

    # source://ffi/1.15.5/lib/ffi/struct.rb#91
    def size; end

    # source://ffi/1.15.5/lib/ffi/struct.rb#98
    def size=(size); end

    # source://ffi/1.15.5/lib/ffi/struct.rb#135
    def val; end

    protected

    # source://ffi/1.15.5/lib/ffi/struct.rb#243
    def align(alignment = T.unsafe(nil)); end

    # source://ffi/1.15.5/lib/ffi/struct.rb#243
    def aligned(alignment = T.unsafe(nil)); end

    # source://ffi/1.15.5/lib/ffi/struct.rb#229
    def callback(params, ret); end

    # source://ffi/1.15.5/lib/ffi/struct.rb#248
    def enclosing_module; end

    # source://ffi/1.15.5/lib/ffi/struct.rb#260
    def find_field_type(type, mod = T.unsafe(nil)); end

    # source://ffi/1.15.5/lib/ffi/struct.rb#275
    def find_type(type, mod = T.unsafe(nil)); end

    # source://ffi/1.15.5/lib/ffi/struct.rb#238
    def pack(packed = T.unsafe(nil)); end

    # source://ffi/1.15.5/lib/ffi/struct.rb#238
    def packed(packed = T.unsafe(nil)); end

    private

    # source://ffi/1.15.5/lib/ffi/struct.rb#297
    def array_layout(builder, spec); end

    # source://ffi/1.15.5/lib/ffi/struct.rb#287
    def hash_layout(builder, spec); end
  end
end

class FFI::Struct::InlineArray
  include ::Enumerable

  def initialize(_arg0, _arg1); end

  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def each; end
  def size; end
  def to_a; end
  def to_ptr; end
end

class FFI::Struct::ManagedStructConverter < ::FFI::StructByReference
  # source://ffi/1.15.5/lib/ffi/struct.rb#150
  def initialize(struct_class); end

  # source://ffi/1.15.5/lib/ffi/struct.rb#160
  def from_native(ptr, ctx); end
end

class FFI::StructByReference
  include ::FFI::DataConverter

  # source://ffi/1.15.5/lib/ffi/struct_by_reference.rb#39
  def initialize(struct_class); end

  # source://ffi/1.15.5/lib/ffi/struct_by_reference.rb#68
  def from_native(value, ctx); end

  # source://ffi/1.15.5/lib/ffi/struct_by_reference.rb#47
  def native_type; end

  # source://ffi/1.15.5/lib/ffi/struct_by_reference.rb#36
  def struct_class; end

  # source://ffi/1.15.5/lib/ffi/struct_by_reference.rb#54
  def to_native(value, ctx); end
end

# The Sys module provides a namespace only.
module Sys; end

class Sys::Platform
  class << self
    # Returns whether or not you're on any BSD platform
    #
    # @return [Boolean]
    #
    # source://sys-uname//lib/sys/platform.rb#50
    def bsd?; end

    # Returns whether or not you're on Linux
    #
    # @return [Boolean]
    #
    # source://sys-uname//lib/sys/platform.rb#40
    def linux?; end

    # Returns whether or not you're on a mac, i.e. OSX
    #
    # @return [Boolean]
    #
    # source://sys-uname//lib/sys/platform.rb#35
    def mac?; end

    # Returns whether or not you're on Solaris
    #
    # @return [Boolean]
    #
    # source://sys-uname//lib/sys/platform.rb#45
    def solaris?; end

    # Returns whether or not you're on a Unixy (non-Windows) OS
    #
    # @return [Boolean]
    #
    # source://sys-uname//lib/sys/platform.rb#30
    def unix?; end

    # Returns whether or not you're on a Windows OS
    #
    # @return [Boolean]
    #
    # source://sys-uname//lib/sys/platform.rb#25
    def windows?; end
  end
end

# The CPU architecture
#
# source://sys-uname//lib/sys/platform.rb#4
Sys::Platform::ARCH = T.let(T.unsafe(nil), Symbol)

# Returns the OS type, :macosx, :linux, :mingw32, etc
#
# source://sys-uname//lib/sys/platform.rb#10
Sys::Platform::IMPL = T.let(T.unsafe(nil), Symbol)

# Returns a basic OS family, either :windows or :unix
#
# source://sys-uname//lib/sys/platform.rb#7
Sys::Platform::OS = T.let(T.unsafe(nil), Symbol)

# The version of the sys-uname gem.
#
# source://sys-uname//lib/sys/uname.rb#9
Sys::Platform::VERSION = T.let(T.unsafe(nil), String)

# The Uname class encapsulates uname (platform) information.
class Sys::Uname
  extend ::FFI::Library

  def sysctl(*_arg0); end
  def uname_c(*_arg0); end

  class << self
    # Returns the CPU architecture, e.g. "x86"
    #
    # source://sys-uname//lib/sys/unix/uname.rb#256
    def architecture; end

    # The string consisting of the ASCII hexidecimal encoding of the name
    # of the interface configured by boot(1M) followed by the DHCPACK reply
    # from the server.
    #
    # source://sys-uname//lib/sys/unix/uname.rb#270
    def dhcp_cache; end

    # The name of the of the hardware provider.
    #
    # source://sys-uname//lib/sys/unix/uname.rb#290
    def hw_provider; end

    # The ASCII representation of the hardware-specific serial number
    # of the physical machine on which the function is executed.
    #
    # source://sys-uname//lib/sys/unix/uname.rb#284
    def hw_serial; end

    # The variant instruction set architectures executable on the
    # current system.
    #
    # source://sys-uname//lib/sys/unix/uname.rb#277
    def isa_list; end

    # Returns the machine hardware type.  e.g. "i686".
    # --
    # This may or may not return the expected value because some CPU types
    # were unknown to the OS when the OS was originally released.  It
    # appears that MS doesn't necessarily patch this, either.
    #
    # source://sys-uname//lib/sys/unix/uname.rb#236
    def machine; end

    # Returns the model type.
    #
    # Example:
    #
    #  Uname.model # => 'MacBookPro5,3'
    #
    # source://sys-uname//lib/sys/unix/uname.rb#247
    def model; end

    # Returns the nodename.  This is usually, but not necessarily, the
    # same as the system's hostname.
    #
    # source://sys-uname//lib/sys/unix/uname.rb#206
    def nodename; end

    # The specific model of the hardware platform, e.g Sun-Blade-1500, etc.
    #
    # source://sys-uname//lib/sys/unix/uname.rb#262
    def platform; end

    # Returns the release number, e.g. 5.1.2600.
    #
    # source://sys-uname//lib/sys/unix/uname.rb#216
    def release; end

    # The Secure Remote Procedure Call domain name.
    #
    # source://sys-uname//lib/sys/unix/uname.rb#296
    def srpc_domain; end

    # Returns the operating system name, e.g. "Microsoft Windows XP Home"
    #
    # source://sys-uname//lib/sys/unix/uname.rb#194
    def sysname; end

    # Returns a struct of type UnameStruct that contains sysname, nodename,
    # machine, version, and release, as well as a plethora of other fields.
    # Please see the MSDN documentation for what each of these fields mean.
    #
    # source://sys-uname//lib/sys/unix/uname.rb#133
    def uname; end

    # Returns the version plus patch information of the operating system,
    # separated by a hyphen, e.g. "2915-Service Pack 2".
    # --
    # The instance name is unpredictable, so we have to resort to using
    # the 'InstancesOf' method to get the data we need, rather than
    # including it as part of the connection.
    #
    # source://sys-uname//lib/sys/unix/uname.rb#226
    def version; end

    private

    # Returns the model for systems that define sysctl().
    #
    # source://sys-uname//lib/sys/unix/uname.rb#305
    def get_model; end

    # Returns the various sysinfo information based on +flag+.
    #
    # source://sys-uname//lib/sys/unix/uname.rb#319
    def get_si(flag); end

    def sysctl(*_arg0); end
    def uname_c(*_arg0); end
  end
end

# source://sys-uname//lib/sys/unix/uname.rb#26
Sys::Uname::BUFSIZE = T.let(T.unsafe(nil), Integer)

# source://sys-uname//lib/sys/unix/uname.rb#36
Sys::Uname::CTL_HW = T.let(T.unsafe(nil), Integer)

# This is the error raised if any of the Sys::Uname methods should fail.
class Sys::Uname::Error < ::StandardError; end

# source://sys-uname//lib/sys/unix/uname.rb#37
Sys::Uname::HW_MODEL = T.let(T.unsafe(nil), Integer)

class Sys::Uname::UnameFFIStruct < ::FFI::Struct; end

# The UnameStruct is used to store platform information for some methods.
#
# source://sys-uname//lib/sys/unix/uname.rb#116
Sys::Uname::UnameStruct = Struct

# The version of the sys-uname gem.
#
# source://sys-uname//lib/sys/uname.rb#4
Sys::Uname::VERSION = T.let(T.unsafe(nil), String)
