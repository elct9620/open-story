# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `rspec-expectations` gem.
# Please instead update this file by running `bin/tapioca gem rspec-expectations`.

# RSpec's top level namespace. All of rspec-expectations is contained
# in the `RSpec::Expectations` and `RSpec::Matchers` namespaces.
module RSpec
  extend ::RSpec::Support::Warnings
  extend ::RSpec::Core::Warnings

  class << self
    # source://rspec-core/3.12.0/lib/rspec/core.rb#70
    def clear_examples; end

    # source://rspec-core/3.12.0/lib/rspec/core.rb#85
    def configuration; end

    # source://rspec-core/3.12.0/lib/rspec/core.rb#49
    def configuration=(_arg0); end

    # source://rspec-core/3.12.0/lib/rspec/core.rb#97
    def configure; end

    # source://rspec-core/3.12.0/lib/rspec/core.rb#194
    def const_missing(name); end

    # source://rspec-core/3.12.0/lib/rspec/core/dsl.rb#42
    def context(*args, &example_group_block); end

    # source://rspec-core/3.12.0/lib/rspec/core.rb#122
    def current_example; end

    # source://rspec-core/3.12.0/lib/rspec/core.rb#128
    def current_example=(example); end

    # source://rspec-core/3.12.0/lib/rspec/core.rb#154
    def current_scope; end

    # source://rspec-core/3.12.0/lib/rspec/core.rb#134
    def current_scope=(scope); end

    # source://rspec-core/3.12.0/lib/rspec/core/dsl.rb#42
    def describe(*args, &example_group_block); end

    # source://rspec-core/3.12.0/lib/rspec/core/dsl.rb#42
    def example_group(*args, &example_group_block); end

    # source://rspec-core/3.12.0/lib/rspec/core/dsl.rb#42
    def fcontext(*args, &example_group_block); end

    # source://rspec-core/3.12.0/lib/rspec/core/dsl.rb#42
    def fdescribe(*args, &example_group_block); end

    # source://rspec-core/3.12.0/lib/rspec/core.rb#58
    def reset; end

    # source://rspec-core/3.12.0/lib/rspec/core/shared_example_group.rb#110
    def shared_context(name, *args, &block); end

    # source://rspec-core/3.12.0/lib/rspec/core/shared_example_group.rb#110
    def shared_examples(name, *args, &block); end

    # source://rspec-core/3.12.0/lib/rspec/core/shared_example_group.rb#110
    def shared_examples_for(name, *args, &block); end

    # source://rspec-core/3.12.0/lib/rspec/core.rb#160
    def world; end

    # source://rspec-core/3.12.0/lib/rspec/core.rb#49
    def world=(_arg0); end

    # source://rspec-core/3.12.0/lib/rspec/core/dsl.rb#42
    def xcontext(*args, &example_group_block); end

    # source://rspec-core/3.12.0/lib/rspec/core/dsl.rb#42
    def xdescribe(*args, &example_group_block); end
  end
end

class RSpec::CallerFilter
  class << self
    # source://rspec-support/3.12.0/lib/rspec/support/caller_filter.rb#47
    def first_non_rspec_line(skip_frames = T.unsafe(nil), increment = T.unsafe(nil)); end
  end
end

# source://rspec-support/3.12.0/lib/rspec/support/caller_filter.rb#18
RSpec::CallerFilter::ADDITIONAL_TOP_LEVEL_FILES = T.let(T.unsafe(nil), Array)

# source://rspec-support/3.12.0/lib/rspec/support/caller_filter.rb#28
RSpec::CallerFilter::IGNORE_REGEX = T.let(T.unsafe(nil), Regexp)

# source://rspec-support/3.12.0/lib/rspec/support/caller_filter.rb#20
RSpec::CallerFilter::LIB_REGEX = T.let(T.unsafe(nil), Regexp)

# source://rspec-support/3.12.0/lib/rspec/support/caller_filter.rb#9
RSpec::CallerFilter::RSPEC_LIBS = T.let(T.unsafe(nil), Array)

module RSpec::Core
  class << self
    # source://rspec-core/3.12.0/lib/rspec/core.rb#181
    def path_to_executable; end
  end
end

class RSpec::Core::AnonymousExampleGroup < ::RSpec::Core::ExampleGroup
  class << self
    # source://rspec-core/3.12.0/lib/rspec/core/example_group.rb#776
    def metadata; end
  end
end

class RSpec::Core::BacktraceFormatter
  # source://rspec-core/3.12.0/lib/rspec/core/backtrace_formatter.rb#8
  def initialize; end

  # source://rspec-core/3.12.0/lib/rspec/core/backtrace_formatter.rb#49
  def backtrace_line(line); end

  # source://rspec-core/3.12.0/lib/rspec/core/backtrace_formatter.rb#53
  def exclude?(line); end

  # source://rspec-core/3.12.0/lib/rspec/core/backtrace_formatter.rb#6
  def exclusion_patterns; end

  # source://rspec-core/3.12.0/lib/rspec/core/backtrace_formatter.rb#6
  def exclusion_patterns=(_arg0); end

  # source://rspec-core/3.12.0/lib/rspec/core/backtrace_formatter.rb#28
  def filter_gem(gem_name); end

  # source://rspec-core/3.12.0/lib/rspec/core/backtrace_formatter.rb#33
  def format_backtrace(backtrace, options = T.unsafe(nil)); end

  # source://rspec-core/3.12.0/lib/rspec/core/backtrace_formatter.rb#22
  def full_backtrace=(_arg0); end

  # source://rspec-core/3.12.0/lib/rspec/core/backtrace_formatter.rb#24
  def full_backtrace?; end

  # source://rspec-core/3.12.0/lib/rspec/core/backtrace_formatter.rb#6
  def inclusion_patterns; end

  # source://rspec-core/3.12.0/lib/rspec/core/backtrace_formatter.rb#6
  def inclusion_patterns=(_arg0); end

  private

  # source://rspec-core/3.12.0/lib/rspec/core/backtrace_formatter.rb#60
  def matches?(patterns, line); end
end

class RSpec::Core::Configuration
  include ::RSpec::Core::Hooks
  include ::RSpec::Core::Configuration::Readers

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#509
  def initialize; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#975
  def add_formatter(formatter, output = T.unsafe(nil)); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#638
  def add_setting(name, opts = T.unsafe(nil)); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#2004
  def after(scope = T.unsafe(nil), *meta, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#1188
  def alias_example_group_to(new_name, *args); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#1156
  def alias_example_to(name, *args); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#1219
  def alias_it_behaves_like_to(new_name, report_label = T.unsafe(nil)); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#1219
  def alias_it_should_behave_like_to(new_name, report_label = T.unsafe(nil)); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#2034
  def append_after(scope = T.unsafe(nil), *meta, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#1949
  def append_before(scope = T.unsafe(nil), *meta, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#1914
  def apply_derived_metadata_to(metadata); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#2052
  def around(scope = T.unsafe(nil), *meta, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#676
  def backtrace_exclusion_patterns; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#682
  def backtrace_exclusion_patterns=(patterns); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#503
  def backtrace_formatter; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#695
  def backtrace_inclusion_patterns; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#701
  def backtrace_inclusion_patterns=(patterns); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#1949
  def before(scope = T.unsafe(nil), *meta, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#480
  def bisect_runner; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#481
  def bisect_runner=(value); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#2098
  def bisect_runner_class; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#901
  def color; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#939
  def color=(_arg0); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#922
  def color_enabled?(output = T.unsafe(nil)); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#914
  def color_mode; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#932
  def color_mode=(_arg0); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#1556
  def configure_example(example, example_hooks); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#1596
  def configure_expectation_framework; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#1544
  def configure_group(group); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#1590
  def configure_mock_framework; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#66
  def default_color; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#89
  def default_color=(_arg0); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#78
  def default_color?; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#982
  def default_formatter; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#993
  def default_formatter=(value); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#66
  def default_path; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#121
  def default_path=(path); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#78
  def default_path?; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#1873
  def define_derived_metadata(*filters, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#66
  def deprecation_stream; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#168
  def deprecation_stream=(value); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#66
  def detail_color; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#89
  def detail_color=(_arg0); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#78
  def detail_color?; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#1854
  def disable_monkey_patching; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#1846
  def disable_monkey_patching!; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#1854
  def disable_monkey_patching=(_arg0); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#66
  def drb; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#89
  def drb=(_arg0); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#78
  def drb?; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#66
  def drb_port; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#89
  def drb_port=(_arg0); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#78
  def drb_port?; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#66
  def dry_run; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#89
  def dry_run=(_arg0); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#78
  def dry_run?; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#66
  def error_exit_code; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#89
  def error_exit_code=(_arg0); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#78
  def error_exit_code?; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#66
  def error_stream; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#89
  def error_stream=(_arg0); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#78
  def error_stream?; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#66
  def example_status_persistence_file_path; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#192
  def example_status_persistence_file_path=(value); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#66
  def exclude_pattern; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#304
  def exclude_pattern=(value); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#1348
  def exclusion_filter; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#1341
  def exclusion_filter=(filter); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#837
  def expect_with(*frameworks); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#810
  def expectation_framework=(framework); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#798
  def expectation_frameworks; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#1784
  def expose_current_running_example_as(method_name); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#151
  def expose_dsl_globally=(value); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#143
  def expose_dsl_globally?; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#1494
  def extend(mod, *filters); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#66
  def fail_fast; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#214
  def fail_fast=(value); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#66
  def fail_if_no_examples; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#89
  def fail_if_no_examples=(_arg0); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#78
  def fail_if_no_examples?; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#66
  def failure_color; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#89
  def failure_color=(_arg0); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#78
  def failure_color?; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#66
  def failure_exit_code; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#89
  def failure_exit_code=(_arg0); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#78
  def failure_exit_code?; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#1062
  def files_or_directories_to_run=(*files); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#1075
  def files_to_run; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#497
  def files_to_run=(_arg0); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#1292
  def filter; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#1283
  def filter=(filter); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#721
  def filter_gems_from_backtrace(*gem_names); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#499
  def filter_manager; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#499
  def filter_manager=(_arg0); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#1254
  def filter_run(*args); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#1328
  def filter_run_excluding(*args); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#1254
  def filter_run_including(*args); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#1270
  def filter_run_when_matching(*args); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#66
  def fixed_color; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#89
  def fixed_color=(_arg0); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#78
  def fixed_color?; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#571
  def force(hash); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#1635
  def format_docstrings(&block); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#1640
  def format_docstrings_block; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#975
  def formatter=(formatter, output = T.unsafe(nil)); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#1008
  def formatter_loader; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#1003
  def formatters; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#887
  def full_backtrace=(true_or_false); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#881
  def full_backtrace?; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#956
  def full_description; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#951
  def full_description=(description); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#2082
  def hooks; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#1581
  def in_project_source_dir_regex; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#1404
  def include(mod, *filters); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#1451
  def include_context(shared_group_name, *filters); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#1292
  def inclusion_filter; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#1283
  def inclusion_filter=(filter); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#1080
  def last_run_statuses; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#66
  def libs; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#942
  def libs=(libs); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#1604
  def load_spec_files; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#503
  def loaded_spec_files; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#66
  def max_displayed_failure_line_count; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#89
  def max_displayed_failure_line_count=(_arg0); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#78
  def max_displayed_failure_line_count?; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#648
  def mock_framework; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#660
  def mock_framework=(framework); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#765
  def mock_with(framework); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#2087
  def on_example_group_definition(&block); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#2093
  def on_example_group_definition_callbacks; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#66
  def only_failures; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#66
  def only_failures?; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#203
  def only_failures_but_not_configured?; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#1647
  def order=(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#503
  def ordering_manager; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#1647
  def ordering_registry(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#66
  def output_stream; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#274
  def output_stream=(value); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#66
  def pattern; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#293
  def pattern=(value); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#66
  def pending_color; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#89
  def pending_color=(_arg0); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#78
  def pending_color?; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#1533
  def prepend(mod, *filters); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#2004
  def prepend_after(scope = T.unsafe(nil), *meta, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#1979
  def prepend_before(scope = T.unsafe(nil), *meta, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#1052
  def profile_examples; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#322
  def profile_examples=(_arg0); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#78
  def profile_examples?; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#66
  def project_source_dirs; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#89
  def project_source_dirs=(_arg0); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#78
  def project_source_dirs?; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#1806
  def raise_errors_for_deprecations!; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#1754
  def raise_on_warning=(value); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#1647
  def register_ordering(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#1035
  def reporter; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#66
  def requires; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#1573
  def requires=(paths); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#580
  def reset; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#593
  def reset_filters; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#586
  def reset_reporter; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#66
  def run_all_when_everything_filtered; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#89
  def run_all_when_everything_filtered=(_arg0); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#78
  def run_all_when_everything_filtered?; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#1647
  def seed(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#1647
  def seed=(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#1647
  def seed_used?(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#66
  def shared_context_metadata_behavior; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#434
  def shared_context_metadata_behavior=(value); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#66
  def silence_filter_announcements; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#89
  def silence_filter_announcements=(_arg0); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#78
  def silence_filter_announcements?; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#1117
  def spec_files_with_failures; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#66
  def start_time; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#89
  def start_time=(_arg0); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#78
  def start_time?; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#501
  def static_config_filter_manager; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#501
  def static_config_filter_manager=(_arg0); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#66
  def success_color; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#89
  def success_color=(_arg0); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#78
  def success_color?; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#66
  def threadsafe; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#89
  def threadsafe=(_arg0); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#78
  def threadsafe?; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#383
  def treat_symbols_as_metadata_keys_with_true_values=(_value); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#66
  def tty; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#89
  def tty=(_arg0); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#78
  def tty?; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#1734
  def warnings=(value); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#1739
  def warnings?; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#1896
  def when_first_matching_example_defined(*filters); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#2064
  def with_suite_hooks; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#499
  def world; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#499
  def world=(_arg0); end

  private

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#2220
  def absolute_pattern?(pattern); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#2321
  def add_hook_to_existing_matching_groups(meta, scope, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#2260
  def assert_no_example_groups_defined(config_option); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#2310
  def clear_values_derived_from_example_status_persistence_file_path; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#2242
  def command; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#2286
  def conditionally_disable_expectations_monkey_patching; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#2277
  def conditionally_disable_mocks_monkey_patching; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#2315
  def configure_group_with(group, module_list, application_method); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#2250
  def define_built_in_hooks; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#2373
  def define_mixed_in_module(mod, filters, mod_list, config_method, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#2225
  def extract_location(path); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#2202
  def file_glob_from(path, pattern); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#2191
  def gather_directories(path); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#2170
  def get_files_to_run(paths); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#2197
  def get_matching_files(path, pattern); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#2137
  def handle_suite_hook(scope, meta); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#2116
  def load_file_handling_errors(method, file); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#2343
  def metadata_applies_to_group?(meta, group); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#2335
  def on_existing_matching_groups(meta); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#2273
  def output_to_tty?(output = T.unsafe(nil)); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#2269
  def output_wrapper; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#2182
  def paths_to_check(paths); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#2187
  def pattern_might_load_specs_from_vendored_dirs?; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#2296
  def rspec_expectations_loaded?; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#2292
  def rspec_mocks_loaded?; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#2152
  def run_suite_hooks(hook_description, hooks); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#2358
  def safe_extend(mod, host); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#2354
  def safe_include(mod, host); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#2348
  def safe_prepend(mod, host); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#2300
  def update_pattern_attr(name, value); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#2246
  def value_for(key); end

  class << self
    # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#100
    def add_read_only_setting(name, opts = T.unsafe(nil)); end

    # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#87
    def add_setting(name, opts = T.unsafe(nil)); end

    # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#70
    def define_alias(name, alias_name); end

    # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#77
    def define_predicate(name); end

    # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#60
    def define_reader(name); end

    # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#1645
    def delegate_to_ordering_manager(*methods); end
  end
end

# source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#1625
RSpec::Core::Configuration::DEFAULT_FORMATTER = T.let(T.unsafe(nil), Proc)

class RSpec::Core::Configuration::DeprecationReporterBuffer
  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#1019
  def initialize; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#1023
  def deprecation(*args); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#1027
  def play_onto(reporter); end
end

module RSpec::Core::Configuration::ExposeCurrentExample; end

# source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#1105
RSpec::Core::Configuration::FAILED_STATUS = T.let(T.unsafe(nil), String)

# source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#728
RSpec::Core::Configuration::MOCKING_ADAPTERS = T.let(T.unsafe(nil), Hash)

class RSpec::Core::Configuration::MustBeConfiguredBeforeExampleGroupsError < ::StandardError; end

# source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#1108
RSpec::Core::Configuration::PASSED_STATUS = T.let(T.unsafe(nil), String)

# source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#1111
RSpec::Core::Configuration::PENDING_STATUS = T.let(T.unsafe(nil), String)

# source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#1744
RSpec::Core::Configuration::RAISE_ERROR_WARNING_NOTIFIER = T.let(T.unsafe(nil), Proc)

module RSpec::Core::Configuration::Readers
  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#63
  def default_color; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#63
  def default_path; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#63
  def deprecation_stream; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#63
  def detail_color; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#63
  def drb; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#63
  def drb_port; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#63
  def dry_run; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#63
  def error_exit_code; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#63
  def error_stream; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#63
  def example_status_persistence_file_path; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#63
  def exclude_pattern; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#63
  def fail_fast; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#63
  def fail_if_no_examples; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#63
  def failure_color; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#63
  def failure_exit_code; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#63
  def fixed_color; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#63
  def libs; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#63
  def max_displayed_failure_line_count; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#63
  def only_failures; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#63
  def output_stream; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#63
  def pattern; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#63
  def pending_color; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#63
  def project_source_dirs; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#63
  def requires; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#63
  def run_all_when_everything_filtered; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#63
  def shared_context_metadata_behavior; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#63
  def silence_filter_announcements; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#63
  def start_time; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#63
  def success_color; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#63
  def threadsafe; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#63
  def tty; end
end

# source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#1102
RSpec::Core::Configuration::UNKNOWN_STATUS = T.let(T.unsafe(nil), String)

# source://rspec-core/3.12.0/lib/rspec/core/configuration.rb#1114
RSpec::Core::Configuration::VALID_STATUSES = T.let(T.unsafe(nil), Array)

class RSpec::Core::ConfigurationOptions
  # source://rspec-core/3.12.0/lib/rspec/core/configuration_options.rb#12
  def initialize(args); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration_options.rb#40
  def args; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration_options.rb#21
  def configure(config); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration_options.rb#30
  def configure_filter_manager(filter_manager); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration_options.rb#37
  def options; end

  private

  # source://rspec-core/3.12.0/lib/rspec/core/configuration_options.rb#169
  def args_from_options_file(path); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration_options.rb#138
  def command_line_options; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration_options.rb#142
  def custom_options; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration_options.rb#183
  def custom_options_file; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration_options.rb#129
  def env_options; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration_options.rb#121
  def file_options; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration_options.rb#66
  def force?(key); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration_options.rb#154
  def global_options; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration_options.rb#195
  def global_options_file; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration_options.rb#206
  def home_options_file_path; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration_options.rb#117
  def load_formatters_into(config); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration_options.rb#146
  def local_options; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration_options.rb#191
  def local_options_file; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration_options.rb#175
  def options_file_as_erb_string(path); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration_options.rb#158
  def options_from(path); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration_options.rb#70
  def order(keys); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration_options.rb#44
  def organize_options; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration_options.rb#163
  def parse_args_ignoring_files_or_dirs_to_run(args, source); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration_options.rb#109
  def process_options_into(config); end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration_options.rb#150
  def project_options; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration_options.rb#187
  def project_options_file; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration_options.rb#222
  def resolve_xdg_config_home; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration_options.rb#199
  def xdg_options_file_if_exists; end

  # source://rspec-core/3.12.0/lib/rspec/core/configuration_options.rb#215
  def xdg_options_file_path; end
end

# source://rspec-core/3.12.0/lib/rspec/core/configuration_options.rb#77
RSpec::Core::ConfigurationOptions::OPTIONS_ORDER = T.let(T.unsafe(nil), Array)

# source://rspec-core/3.12.0/lib/rspec/core/configuration_options.rb#59
RSpec::Core::ConfigurationOptions::UNFORCED_OPTIONS = T.let(T.unsafe(nil), RSpec::Core::Set)

# source://rspec-core/3.12.0/lib/rspec/core/configuration_options.rb#64
RSpec::Core::ConfigurationOptions::UNPROCESSABLE_OPTIONS = T.let(T.unsafe(nil), RSpec::Core::Set)

module RSpec::Core::DSL
  class << self
    # source://rspec-core/3.12.0/lib/rspec/core/dsl.rb#89
    def change_global_dsl(&changes); end

    # source://rspec-core/3.12.0/lib/rspec/core/dsl.rb#27
    def example_group_aliases; end

    # source://rspec-core/3.12.0/lib/rspec/core/dsl.rb#37
    def expose_example_group_alias(name); end

    # source://rspec-core/3.12.0/lib/rspec/core/dsl.rb#81
    def expose_example_group_alias_globally(method_name); end

    # source://rspec-core/3.12.0/lib/rspec/core/dsl.rb#58
    def expose_globally!; end

    # source://rspec-core/3.12.0/lib/rspec/core/dsl.rb#32
    def exposed_globally?; end

    # source://rspec-core/3.12.0/lib/rspec/core/dsl.rb#70
    def remove_globally!; end

    # source://rspec-core/3.12.0/lib/rspec/core/dsl.rb#53
    def top_level; end

    # source://rspec-core/3.12.0/lib/rspec/core/dsl.rb#53
    def top_level=(_arg0); end
  end
end

class RSpec::Core::DeprecationError < ::StandardError; end

class RSpec::Core::DidYouMean
  # source://rspec-core/3.12.0/lib/rspec/core/did_you_mean.rb#8
  def initialize(relative_file_name); end

  # source://rspec-core/3.12.0/lib/rspec/core/did_you_mean.rb#14
  def call; end

  # source://rspec-core/3.12.0/lib/rspec/core/did_you_mean.rb#6
  def relative_file_name; end

  private

  # source://rspec-core/3.12.0/lib/rspec/core/did_you_mean.rb#30
  def formats(probables); end

  # source://rspec-core/3.12.0/lib/rspec/core/did_you_mean.rb#40
  def red_font(mytext); end

  # source://rspec-core/3.12.0/lib/rspec/core/did_you_mean.rb#35
  def top_and_tail(rspec_format); end
end

class RSpec::Core::Example
  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#186
  def initialize(example_group_class, description, user_metadata, example_block = T.unsafe(nil)); end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#174
  def clock; end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#174
  def clock=(_arg0); end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#76
  def description; end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#388
  def display_exception; end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#396
  def display_exception=(ex); end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#132
  def duplicate_with(metadata_overrides = T.unsafe(nil)); end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#230
  def example_group; end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#170
  def example_group_instance; end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#158
  def exception; end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#49
  def execution_result; end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#439
  def fail_with_exception(reporter, exception); end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#49
  def file_path; end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#49
  def full_description; end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#117
  def id; end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#220
  def inspect; end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#87
  def inspect_output; end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#456
  def instance_exec(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#49
  def location; end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#96
  def location_rerun_argument; end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#163
  def metadata; end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#49
  def pending; end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#234
  def pending?; end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#226
  def reporter; end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#111
  def rerun_argument; end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#246
  def run(example_group_instance, reporter); end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#425
  def set_aggregate_failures_exception(exception); end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#412
  def set_exception(exception); end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#49
  def skip; end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#449
  def skip_with_exception(reporter, exception); end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#238
  def skipped?; end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#220
  def to_s; end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#148
  def update_inherited_metadata(updates); end

  private

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#534
  def assign_generated_description; end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#478
  def finish(reporter); end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#543
  def generate_description; end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#462
  def hooks; end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#550
  def location_description; end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#530
  def mocks_need_verification?; end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#498
  def record_finished(status, reporter); end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#516
  def run_after_example; end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#503
  def run_before_example; end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#473
  def start(reporter); end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#524
  def verify_mocks; end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#508
  def with_around_and_singleton_context_hooks; end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#466
  def with_around_example_hooks; end

  class << self
    # source://rspec-core/3.12.0/lib/rspec/core/example.rb#48
    def delegate_to_metadata(key); end

    # source://rspec-core/3.12.0/lib/rspec/core/example.rb#122
    def parse_id(id); end
  end
end

# source://rspec-core/3.12.0/lib/rspec/core/example.rb#310
RSpec::Core::Example::AllExceptionsExcludingDangerousOnesOnRubiesThatAllowIt = RSpec::Support::AllExceptionsExceptOnesWeMustNotRescue

class RSpec::Core::Example::ExecutionResult
  include ::RSpec::Core::HashImitatable
  extend ::RSpec::Core::HashImitatable::ClassMethods

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#610
  def ensure_timing_set(clock); end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#597
  def example_skipped?; end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#442
  def exception; end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#442
  def exception=(_arg0); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#442
  def finished_at; end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#442
  def finished_at=(_arg0); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#442
  def pending_exception; end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#442
  def pending_exception=(_arg0); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#442
  def pending_fixed; end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#442
  def pending_fixed=(_arg0); end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#588
  def pending_fixed?; end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#442
  def pending_message; end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#442
  def pending_message=(_arg0); end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#603
  def record_finished(status, finished_at); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#442
  def run_time; end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#442
  def run_time=(_arg0); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#442
  def started_at; end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#442
  def started_at=(_arg0); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#442
  def status; end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#442
  def status=(_arg0); end

  private

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#616
  def calculate_run_time(finished_at); end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#634
  def get_value(name); end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#623
  def hash_for_delegation; end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#642
  def issue_deprecation(_method_name, *_args); end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#629
  def set_value(name, value); end
end

class RSpec::Core::Example::Procsy
  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#362
  def initialize(example, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#346
  def <<(*a, &b); end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#346
  def ==(*a, &b); end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#346
  def ===(*a, &b); end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#346
  def >>(*a, &b); end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#346
  def [](*a, &b); end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#346
  def arity(*a, &b); end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#346
  def binding(*a, &b); end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#350
  def call(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#339
  def clock(*a, &b); end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#339
  def clock=(*a, &b); end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#346
  def clone(*a, &b); end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#346
  def curry(*a, &b); end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#339
  def description(*a, &b); end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#346
  def dup(*a, &b); end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#339
  def duplicate_with(*a, &b); end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#346
  def eql?(*a, &b); end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#333
  def example; end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#339
  def example_group(*a, &b); end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#339
  def example_group_instance(*a, &b); end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#339
  def exception(*a, &b); end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#374
  def executed?; end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#339
  def execution_result(*a, &b); end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#339
  def file_path(*a, &b); end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#339
  def full_description(*a, &b); end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#346
  def hash(*a, &b); end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#339
  def id(*a, &b); end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#379
  def inspect; end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#339
  def inspect_output(*a, &b); end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#346
  def lambda?(*a, &b); end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#339
  def location(*a, &b); end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#339
  def location_rerun_argument(*a, &b); end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#339
  def metadata(*a, &b); end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#346
  def parameters(*a, &b); end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#339
  def pending(*a, &b); end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#339
  def pending?(*a, &b); end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#339
  def reporter(*a, &b); end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#339
  def rerun_argument(*a, &b); end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#346
  def ruby2_keywords(*a, &b); end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#350
  def run(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#339
  def skip(*a, &b); end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#339
  def skipped?(*a, &b); end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#346
  def source_location(*a, &b); end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#358
  def to_proc; end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#339
  def update_inherited_metadata(*a, &b); end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#369
  def wrap(&block); end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#346
  def yield(*a, &b); end
end

class RSpec::Core::ExampleGroup
  include ::RSpec::Core::MemoizedHelpers
  include ::RSpec::Core::Pending
  extend ::RSpec::Core::Hooks
  extend ::RSpec::Core::MemoizedHelpers::ClassMethods
  extend ::RSpec::Core::SharedExampleGroup

  # source://rspec-core/3.12.0/lib/rspec/core/example_group.rb#707
  def initialize(inspect_output = T.unsafe(nil)); end

  # source://rspec-core/3.12.0/lib/rspec/core/example_group.rb#99
  def described_class; end

  # source://rspec-core/3.12.0/lib/rspec/core/example_group.rb#713
  def inspect; end

  private

  # source://rspec-core/3.12.0/lib/rspec/core/example_group.rb#758
  def method_missing(name, *args, **_arg2); end

  class << self
    # source://rspec-core/3.12.0/lib/rspec/core/example_group.rb#367
    def add_example(example); end

    # source://rspec-core/3.12.0/lib/rspec/core/example_group.rb#529
    def before_context_ivars; end

    # source://rspec-core/3.12.0/lib/rspec/core/example_group.rb#466
    def children; end

    # source://rspec-core/3.12.0/lib/rspec/core/example_group.rb#247
    def context(*args, &example_group_block); end

    # source://rspec-core/3.12.0/lib/rspec/core/example_group.rb#542
    def currently_executing_a_context_hook?; end

    # source://rspec-core/3.12.0/lib/rspec/core/example_group.rb#667
    def declaration_locations; end

    # source://rspec-core/3.12.0/lib/rspec/core/example_group.rb#246
    def define_example_group_method(name, metadata = T.unsafe(nil)); end

    # source://rspec-core/3.12.0/lib/rspec/core/example_group.rb#145
    def define_example_method(name, extra_options = T.unsafe(nil)); end

    # source://rspec-core/3.12.0/lib/rspec/core/example_group.rb#317
    def define_nested_shared_group_method(new_name, report_label = T.unsafe(nil)); end

    # source://rspec-core/3.12.0/lib/rspec/core/example_group.rb#76
    def delegate_to_metadata(*names); end

    # source://rspec-core/3.12.0/lib/rspec/core/example_group.rb#460
    def descendant_filtered_examples; end

    # source://rspec-core/3.12.0/lib/rspec/core/example_group.rb#503
    def descendants; end

    # source://rspec-core/3.12.0/lib/rspec/core/example_group.rb#247
    def describe(*args, &example_group_block); end

    # source://rspec-core/3.12.0/lib/rspec/core/example_group.rb#78
    def described_class; end

    # source://rspec-core/3.12.0/lib/rspec/core/example_group.rb#85
    def description; end

    # source://rspec-core/3.12.0/lib/rspec/core/example_group.rb#700
    def each_instance_variable_for_example(group); end

    # source://rspec-core/3.12.0/lib/rspec/core/example_group.rb#518
    def ensure_example_groups_are_configured; end

    # source://rspec-core/3.12.0/lib/rspec/core/example_group.rb#146
    def example(*all_args, &block); end

    # source://rspec-core/3.12.0/lib/rspec/core/example_group.rb#247
    def example_group(*args, &example_group_block); end

    # source://rspec-core/3.12.0/lib/rspec/core/example_group.rb#450
    def examples; end

    # source://rspec-core/3.12.0/lib/rspec/core/example_group.rb#247
    def fcontext(*args, &example_group_block); end

    # source://rspec-core/3.12.0/lib/rspec/core/example_group.rb#247
    def fdescribe(*args, &example_group_block); end

    # source://rspec-core/3.12.0/lib/rspec/core/example_group.rb#146
    def fexample(*all_args, &block); end

    # source://rspec-core/3.12.0/lib/rspec/core/example_group.rb#78
    def file_path; end

    # source://rspec-core/3.12.0/lib/rspec/core/example_group.rb#455
    def filtered_examples; end

    # source://rspec-core/3.12.0/lib/rspec/core/example_group.rb#379
    def find_and_eval_shared(label, name, inclusion_location, *args, &customization_block); end

    # source://rspec-core/3.12.0/lib/rspec/core/example_group.rb#146
    def fit(*all_args, &block); end

    # source://rspec-core/3.12.0/lib/rspec/core/example_group.rb#146
    def focus(*all_args, &block); end

    # source://rspec-core/3.12.0/lib/rspec/core/example_group.rb#655
    def for_filtered_examples(reporter, &block); end

    # source://rspec-core/3.12.0/lib/rspec/core/example_group.rb#146
    def fspecify(*all_args, &block); end

    # source://rspec-core/3.12.0/lib/rspec/core/example_group.rb#675
    def id; end

    # source://rspec-core/3.12.0/lib/rspec/core/example_group.rb#40
    def idempotently_define_singleton_method(name, &definition); end

    # source://rspec-core/3.12.0/lib/rspec/core/example_group.rb#343
    def include_context(name, *args, &block); end

    # source://rspec-core/3.12.0/lib/rspec/core/example_group.rb#353
    def include_examples(name, *args, &block); end

    # source://rspec-core/3.12.0/lib/rspec/core/example_group.rb#146
    def it(*all_args, &block); end

    # source://rspec-core/3.12.0/lib/rspec/core/example_group.rb#318
    def it_behaves_like(name, *args, &customization_block); end

    # source://rspec-core/3.12.0/lib/rspec/core/example_group.rb#318
    def it_should_behave_like(name, *args, &customization_block); end

    # source://rspec-core/3.12.0/lib/rspec/core/example_group.rb#78
    def location; end

    # source://rspec-core/3.12.0/lib/rspec/core/example_group.rb#51
    def metadata; end

    # source://rspec-core/3.12.0/lib/rspec/core/example_group.rb#485
    def next_runnable_index_for(file); end

    # source://rspec-core/3.12.0/lib/rspec/core/example_group.rb#625
    def ordering_strategy; end

    # source://rspec-core/3.12.0/lib/rspec/core/example_group.rb#508
    def parent_groups; end

    # source://rspec-core/3.12.0/lib/rspec/core/example_group.rb#146
    def pending(*all_args, &block); end

    # source://rspec-core/3.12.0/lib/rspec/core/example_group.rb#373
    def remove_example(example); end

    # source://rspec-core/3.12.0/lib/rspec/core/example_group.rb#359
    def reset_memoized; end

    # source://rspec-core/3.12.0/lib/rspec/core/example_group.rb#599
    def run(reporter = T.unsafe(nil)); end

    # source://rspec-core/3.12.0/lib/rspec/core/example_group.rb#585
    def run_after_context_hooks(example_group_instance); end

    # source://rspec-core/3.12.0/lib/rspec/core/example_group.rb#547
    def run_before_context_hooks(example_group_instance); end

    # source://rspec-core/3.12.0/lib/rspec/core/example_group.rb#641
    def run_examples(reporter); end

    # source://rspec-core/3.12.0/lib/rspec/core/example_group.rb#410
    def set_it_up(description, args, registration_collection, &example_group_block); end

    # source://rspec-core/3.12.0/lib/rspec/core/example_group.rb#685
    def set_ivars(instance, ivars); end

    # source://rspec-core/3.12.0/lib/rspec/core/example_group.rb#146
    def skip(*all_args, &block); end

    # source://rspec-core/3.12.0/lib/rspec/core/example_group.rb#146
    def specify(*all_args, &block); end

    # source://rspec-core/3.12.0/lib/rspec/core/example_group.rb#534
    def store_before_context_ivars(example_group_instance); end

    # source://rspec-core/3.12.0/lib/rspec/core/example_group.rb#395
    def subclass(parent, description, args, registration_collection, &example_group_block); end

    # source://rspec-core/3.12.0/lib/rspec/core/example_group.rb#562
    def superclass_before_context_ivars; end

    # source://rspec-core/3.12.0/lib/rspec/core/example_group.rb#71
    def superclass_metadata; end

    # source://rspec-core/3.12.0/lib/rspec/core/example_group.rb#513
    def top_level?; end

    # source://rspec-core/3.12.0/lib/rspec/core/example_group.rb#680
    def top_level_description; end

    # source://rspec-core/3.12.0/lib/rspec/core/example_group.rb#476
    def traverse_tree_until(&block); end

    # source://rspec-core/3.12.0/lib/rspec/core/example_group.rb#727
    def update_inherited_metadata(updates); end

    # source://rspec-core/3.12.0/lib/rspec/core/example_group.rb#61
    def with_replaced_metadata(meta); end

    # source://rspec-core/3.12.0/lib/rspec/core/example_group.rb#247
    def xcontext(*args, &example_group_block); end

    # source://rspec-core/3.12.0/lib/rspec/core/example_group.rb#247
    def xdescribe(*args, &example_group_block); end

    # source://rspec-core/3.12.0/lib/rspec/core/example_group.rb#146
    def xexample(*all_args, &block); end

    # source://rspec-core/3.12.0/lib/rspec/core/example_group.rb#146
    def xit(*all_args, &block); end

    # source://rspec-core/3.12.0/lib/rspec/core/example_group.rb#146
    def xspecify(*all_args, &block); end

    private

    # source://rspec-core/3.12.0/lib/rspec/core/example_group.rb#742
    def method_missing(name, *args); end
  end
end

# source://rspec-core/3.12.0/lib/rspec/core/example_group.rb#696
RSpec::Core::ExampleGroup::INSTANCE_VARIABLE_TO_IGNORE = T.let(T.unsafe(nil), Symbol)

class RSpec::Core::ExampleGroup::WrongScopeError < ::NoMethodError; end

class RSpec::Core::ExampleStatusPersister
  # source://rspec-core/3.12.0/lib/rspec/core/example_status_persister.rb#18
  def initialize(examples, file_name); end

  # source://rspec-core/3.12.0/lib/rspec/core/example_status_persister.rb#23
  def persist; end

  private

  # source://rspec-core/3.12.0/lib/rspec/core/example_status_persister.rb#40
  def dump_statuses(unparsed_previous_runs); end

  # source://rspec-core/3.12.0/lib/rspec/core/example_status_persister.rb#46
  def statuses_from_this_run; end

  class << self
    # source://rspec-core/3.12.0/lib/rspec/core/example_status_persister.rb#9
    def load_from(file_name); end

    # source://rspec-core/3.12.0/lib/rspec/core/example_status_persister.rb#14
    def persist(examples, file_name); end
  end
end

# source://rspec-core/3.12.0/lib/rspec/core/filter_manager.rb#183
RSpec::Core::ExclusionRules = RSpec::Core::FilterRules

class RSpec::Core::FilterManager
  # source://rspec-core/3.12.0/lib/rspec/core/filter_manager.rb#7
  def initialize; end

  # source://rspec-core/3.12.0/lib/rspec/core/filter_manager.rb#22
  def add_ids(rerun_path, scoped_ids); end

  # source://rspec-core/3.12.0/lib/rspec/core/filter_manager.rb#15
  def add_location(file_path, line_numbers); end

  # source://rspec-core/3.12.0/lib/rspec/core/filter_manager.rb#30
  def empty?; end

  # source://rspec-core/3.12.0/lib/rspec/core/filter_manager.rb#57
  def exclude(*args); end

  # source://rspec-core/3.12.0/lib/rspec/core/filter_manager.rb#61
  def exclude_only(*args); end

  # source://rspec-core/3.12.0/lib/rspec/core/filter_manager.rb#65
  def exclude_with_low_priority(*args); end

  # source://rspec-core/3.12.0/lib/rspec/core/filter_manager.rb#5
  def exclusions; end

  # source://rspec-core/3.12.0/lib/rspec/core/filter_manager.rb#69
  def include(*args); end

  # source://rspec-core/3.12.0/lib/rspec/core/filter_manager.rb#73
  def include_only(*args); end

  # source://rspec-core/3.12.0/lib/rspec/core/filter_manager.rb#77
  def include_with_low_priority(*args); end

  # source://rspec-core/3.12.0/lib/rspec/core/filter_manager.rb#5
  def inclusions; end

  # source://rspec-core/3.12.0/lib/rspec/core/filter_manager.rb#34
  def prune(examples); end

  private

  # source://rspec-core/3.12.0/lib/rspec/core/filter_manager.rb#83
  def add_path_to_arrays_filter(filter_key, path, values); end

  # source://rspec-core/3.12.0/lib/rspec/core/filter_manager.rb#101
  def file_scoped_include?(ex_metadata, ids, locations); end

  # source://rspec-core/3.12.0/lib/rspec/core/filter_manager.rb#89
  def prune_conditionally_filtered_examples(examples); end
end

class RSpec::Core::FilterRules
  # source://rspec-core/3.12.0/lib/rspec/core/filter_manager.rb#130
  def initialize(rules = T.unsafe(nil)); end

  # source://rspec-core/3.12.0/lib/rspec/core/filter_manager.rb#161
  def [](key); end

  # source://rspec-core/3.12.0/lib/rspec/core/filter_manager.rb#134
  def add(updated); end

  # source://rspec-core/3.12.0/lib/rspec/core/filter_manager.rb#138
  def add_with_low_priority(updated); end

  # source://rspec-core/3.12.0/lib/rspec/core/filter_manager.rb#149
  def clear; end

  # source://rspec-core/3.12.0/lib/rspec/core/filter_manager.rb#153
  def delete(key); end

  # source://rspec-core/3.12.0/lib/rspec/core/filter_manager.rb#173
  def description; end

  # source://rspec-core/3.12.0/lib/rspec/core/filter_manager.rb#169
  def each_pair(&block); end

  # source://rspec-core/3.12.0/lib/rspec/core/filter_manager.rb#165
  def empty?; end

  # source://rspec-core/3.12.0/lib/rspec/core/filter_manager.rb#157
  def fetch(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/filter_manager.rb#177
  def include_example?(example); end

  # source://rspec-core/3.12.0/lib/rspec/core/filter_manager.rb#119
  def opposite; end

  # source://rspec-core/3.12.0/lib/rspec/core/filter_manager.rb#119
  def opposite=(_arg0); end

  # source://rspec-core/3.12.0/lib/rspec/core/filter_manager.rb#120
  def rules; end

  # source://rspec-core/3.12.0/lib/rspec/core/filter_manager.rb#144
  def use_only(updated); end

  class << self
    # source://rspec-core/3.12.0/lib/rspec/core/filter_manager.rb#122
    def build; end
  end
end

# source://rspec-core/3.12.0/lib/rspec/core/filter_manager.rb#116
RSpec::Core::FilterRules::PROC_HEX_NUMBER = T.let(T.unsafe(nil), Regexp)

# source://rspec-core/3.12.0/lib/rspec/core/filter_manager.rb#117
RSpec::Core::FilterRules::PROJECT_DIR = T.let(T.unsafe(nil), String)

module RSpec::Core::FilterableItemRepository; end

class RSpec::Core::FilterableItemRepository::QueryOptimized < ::RSpec::Core::FilterableItemRepository::UpdateOptimized
  # source://rspec-core/3.12.0/lib/rspec/core/metadata_filter.rb#155
  def initialize(applies_predicate); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata_filter.rb#164
  def append(item, metadata); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata_filter.rb#174
  def delete(item, metadata); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata_filter.rb#179
  def items_for(metadata); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata_filter.rb#169
  def prepend(item, metadata); end

  private

  # source://rspec-core/3.12.0/lib/rspec/core/metadata_filter.rb#217
  def applicable_metadata_from(metadata); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata_filter.rb#118
  def find_items_for(request_meta); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata_filter.rb#211
  def handle_mutation(metadata); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata_filter.rb#235
  def proc_keys_from(metadata); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata_filter.rb#203
  def reconstruct_caches; end
end

class RSpec::Core::FilterableItemRepository::UpdateOptimized
  # source://rspec-core/3.12.0/lib/rspec/core/metadata_filter.rb#101
  def initialize(applies_predicate); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata_filter.rb#106
  def append(item, metadata); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata_filter.rb#114
  def delete(item, metadata); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata_filter.rb#99
  def items_and_filters; end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata_filter.rb#118
  def items_for(request_meta); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata_filter.rb#110
  def prepend(item, metadata); end
end

module RSpec::Core::FlatMap
  private

  # source://rspec-core/3.12.0/lib/rspec/core/flat_map.rb#6
  def flat_map(array, &block); end

  class << self
    # source://rspec-core/3.12.0/lib/rspec/core/flat_map.rb#6
    def flat_map(array, &block); end
  end
end

module RSpec::Core::Formatters
  class << self
    # source://rspec-core/3.12.0/lib/rspec/core/formatters.rb#86
    def register(formatter_class, *notifications); end
  end
end

class RSpec::Core::Formatters::BaseBisectFormatter
  # source://rspec-core/3.12.0/lib/rspec/core/formatters/base_bisect_formatter.rb#17
  def initialize(expected_failures); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/base_bisect_formatter.rb#23
  def example_failed(notification); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/base_bisect_formatter.rb#27
  def example_finished(notification); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/base_bisect_formatter.rb#37
  def start_dump(_notification); end

  class << self
    # source://rspec-core/3.12.0/lib/rspec/core/formatters/base_bisect_formatter.rb#13
    def inherited(formatter); end
  end
end

class RSpec::Core::Formatters::BaseFormatter
  # source://rspec-core/3.12.0/lib/rspec/core/formatters/base_formatter.rb#23
  def initialize(output); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/base_formatter.rb#50
  def close(_notification); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/base_formatter.rb#17
  def example_group; end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/base_formatter.rb#17
  def example_group=(_arg0); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/base_formatter.rb#42
  def example_group_started(notification); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/base_formatter.rb#18
  def output; end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/base_formatter.rb#32
  def start(notification); end

  private

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/base_formatter.rb#64
  def output_supports_sync; end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/base_formatter.rb#60
  def restore_sync_output; end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/base_formatter.rb#56
  def start_sync_output; end
end

class RSpec::Core::Formatters::BaseTextFormatter < ::RSpec::Core::Formatters::BaseFormatter
  # source://rspec-core/3.12.0/lib/rspec/core/formatters/base_text_formatter.rb#65
  def close(_notification); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/base_text_formatter.rb#30
  def dump_failures(notification); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/base_text_formatter.rb#47
  def dump_pending(notification); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/base_text_formatter.rb#42
  def dump_summary(summary); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/base_text_formatter.rb#21
  def message(notification); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/base_text_formatter.rb#53
  def seed(notification); end
end

class RSpec::Core::Formatters::BisectDRbFormatter < ::RSpec::Core::Formatters::BaseBisectFormatter
  # source://rspec-core/3.12.0/lib/rspec/core/formatters/bisect_drb_formatter.rb#16
  def initialize(_output); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/bisect_drb_formatter.rb#23
  def notify_results(results); end
end

module RSpec::Core::Formatters::ConsoleCodes
  private

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/console_codes.rb#34
  def config_colors_to_methods; end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/console_codes.rb#47
  def console_code_for(code_or_symbol); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/console_codes.rb#66
  def wrap(text, code_or_symbol); end

  class << self
    # source://rspec-core/3.12.0/lib/rspec/core/formatters/console_codes.rb#34
    def config_colors_to_methods; end

    # source://rspec-core/3.12.0/lib/rspec/core/formatters/console_codes.rb#47
    def console_code_for(code_or_symbol); end

    # source://rspec-core/3.12.0/lib/rspec/core/formatters/console_codes.rb#66
    def wrap(text, code_or_symbol); end
  end
end

# source://rspec-core/3.12.0/lib/rspec/core/formatters/console_codes.rb#8
RSpec::Core::Formatters::ConsoleCodes::VT100_CODES = T.let(T.unsafe(nil), Hash)

# source://rspec-core/3.12.0/lib/rspec/core/formatters/console_codes.rb#29
RSpec::Core::Formatters::ConsoleCodes::VT100_CODE_VALUES = T.let(T.unsafe(nil), Hash)

class RSpec::Core::Formatters::DeprecationFormatter
  # source://rspec-core/3.12.0/lib/rspec/core/formatters/deprecation_formatter.rb#12
  def initialize(deprecation_stream, summary_stream); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/deprecation_formatter.rb#10
  def count; end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/deprecation_formatter.rb#32
  def deprecation(notification); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/deprecation_formatter.rb#44
  def deprecation_message_for(data); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/deprecation_formatter.rb#10
  def deprecation_stream; end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/deprecation_formatter.rb#40
  def deprecation_summary(_notification); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/deprecation_formatter.rb#10
  def output; end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/deprecation_formatter.rb#20
  def printer; end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/deprecation_formatter.rb#10
  def summary_stream; end
end

# source://rspec-core/3.12.0/lib/rspec/core/formatters/deprecation_formatter.rb#60
RSpec::Core::Formatters::DeprecationFormatter::DEPRECATION_STREAM_NOTICE = T.let(T.unsafe(nil), String)

class RSpec::Core::Formatters::DeprecationFormatter::DelayedPrinter
  # source://rspec-core/3.12.0/lib/rspec/core/formatters/deprecation_formatter.rb#140
  def initialize(deprecation_stream, summary_stream, deprecation_formatter); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/deprecation_formatter.rb#138
  def deprecation_formatter; end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/deprecation_formatter.rb#138
  def deprecation_stream; end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/deprecation_formatter.rb#163
  def deprecation_summary; end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/deprecation_formatter.rb#172
  def print_deferred_deprecation_warnings; end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/deprecation_formatter.rb#148
  def print_deprecation_message(data); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/deprecation_formatter.rb#155
  def stash_deprecation_message(deprecation_message); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/deprecation_formatter.rb#138
  def summary_stream; end
end

# source://rspec-core/3.12.0/lib/rspec/core/formatters/deprecation_formatter.rb#136
RSpec::Core::Formatters::DeprecationFormatter::DelayedPrinter::TOO_MANY_USES_LIMIT = T.let(T.unsafe(nil), Integer)

class RSpec::Core::Formatters::DeprecationFormatter::FileStream
  # source://rspec-core/3.12.0/lib/rspec/core/formatters/deprecation_formatter.rb#197
  def initialize(file); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/deprecation_formatter.rb#207
  def puts(*args); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/deprecation_formatter.rb#211
  def summarize(summary_stream, deprecation_count); end
end

class RSpec::Core::Formatters::DeprecationFormatter::GeneratedDeprecationMessage < ::Struct
  # source://rspec-core/3.12.0/lib/rspec/core/formatters/deprecation_formatter.rb#95
  def initialize(data); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/deprecation_formatter.rb#100
  def to_s; end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/deprecation_formatter.rb#107
  def too_many_warnings_message; end

  def type; end
  def type=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

class RSpec::Core::Formatters::DeprecationFormatter::ImmediatePrinter
  # source://rspec-core/3.12.0/lib/rspec/core/formatters/deprecation_formatter.rb#116
  def initialize(deprecation_stream, summary_stream, deprecation_formatter); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/deprecation_formatter.rb#114
  def deprecation_formatter; end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/deprecation_formatter.rb#114
  def deprecation_stream; end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/deprecation_formatter.rb#128
  def deprecation_summary; end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/deprecation_formatter.rb#123
  def print_deprecation_message(data); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/deprecation_formatter.rb#114
  def summary_stream; end
end

# source://rspec-core/3.12.0/lib/rspec/core/formatters/deprecation_formatter.rb#52
RSpec::Core::Formatters::DeprecationFormatter::RAISE_ERROR_CONFIG_NOTICE = T.let(T.unsafe(nil), String)

class RSpec::Core::Formatters::DeprecationFormatter::RaiseErrorStream
  # source://rspec-core/3.12.0/lib/rspec/core/formatters/deprecation_formatter.rb#185
  def puts(message); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/deprecation_formatter.rb#189
  def summarize(summary_stream, deprecation_count); end
end

class RSpec::Core::Formatters::DeprecationFormatter::SpecifiedDeprecationMessage < ::Struct
  # source://rspec-core/3.12.0/lib/rspec/core/formatters/deprecation_formatter.rb#67
  def initialize(data); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/deprecation_formatter.rb#72
  def to_s; end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/deprecation_formatter.rb#76
  def too_many_warnings_message; end

  def type; end
  def type=(_); end

  private

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/deprecation_formatter.rb#88
  def deprecation_type_for(data); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/deprecation_formatter.rb#82
  def output_formatted(str); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://rspec-core/3.12.0/lib/rspec/core/formatters/deprecation_formatter.rb#62
RSpec::Core::Formatters::DeprecationFormatter::TOO_MANY_WARNINGS_NOTICE = T.let(T.unsafe(nil), String)

class RSpec::Core::Formatters::DocumentationFormatter < ::RSpec::Core::Formatters::BaseTextFormatter
  # source://rspec-core/3.12.0/lib/rspec/core/formatters/documentation_formatter.rb#12
  def initialize(output); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/documentation_formatter.rb#50
  def example_failed(failure); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/documentation_formatter.rb#31
  def example_group_finished(_notification); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/documentation_formatter.rb#24
  def example_group_started(notification); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/documentation_formatter.rb#35
  def example_passed(passed); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/documentation_formatter.rb#42
  def example_pending(pending); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/documentation_formatter.rb#20
  def example_started(_notification); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/documentation_formatter.rb#57
  def message(notification); end

  private

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/documentation_formatter.rb#96
  def current_indentation(offset = T.unsafe(nil)); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/documentation_formatter.rb#85
  def failure_output(example); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/documentation_formatter.rb#67
  def flush_messages; end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/documentation_formatter.rb#91
  def next_failure_index; end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/documentation_formatter.rb#75
  def passed_output(example); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/documentation_formatter.rb#79
  def pending_output(example, message); end
end

class RSpec::Core::Formatters::ExceptionPresenter
  # source://rspec-core/3.12.0/lib/rspec/core/formatters/exception_presenter.rb#16
  def initialize(exception, example, options = T.unsafe(nil)); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/exception_presenter.rb#73
  def colorized_formatted_backtrace(colorizer = T.unsafe(nil)); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/exception_presenter.rb#33
  def colorized_message_lines(colorizer = T.unsafe(nil)); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/exception_presenter.rb#12
  def description; end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/exception_presenter.rb#12
  def example; end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/exception_presenter.rb#12
  def exception; end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/exception_presenter.rb#39
  def formatted_backtrace(exception = T.unsafe(nil)); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/exception_presenter.rb#45
  def formatted_cause(exception); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/exception_presenter.rb#79
  def fully_formatted(failure_number, colorizer = T.unsafe(nil)); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/exception_presenter.rb#84
  def fully_formatted_lines(failure_number, colorizer); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/exception_presenter.rb#29
  def message_lines; end

  private

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/exception_presenter.rb#207
  def add_shared_group_lines(lines, colorizer); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/exception_presenter.rb#12
  def backtrace_formatter; end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/exception_presenter.rb#12
  def detail_formatter; end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/exception_presenter.rb#265
  def encoded_description(description); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/exception_presenter.rb#115
  def encoded_string(string); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/exception_presenter.rb#111
  def encoding_of(string); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/exception_presenter.rb#275
  def exception_backtrace; end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/exception_presenter.rb#145
  def exception_class_name(exception = T.unsafe(nil)); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/exception_presenter.rb#185
  def exception_lines; end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/exception_presenter.rb#178
  def exception_message_string(exception); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/exception_presenter.rb#12
  def extra_detail_formatter; end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/exception_presenter.rb#196
  def extra_failure_lines; end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/exception_presenter.rb#151
  def failure_lines; end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/exception_presenter.rb#165
  def failure_slash_error_lines; end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/exception_presenter.rb#99
  def final_exception(exception, previous = T.unsafe(nil)); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/exception_presenter.rb#241
  def find_failed_line; end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/exception_presenter.rb#256
  def formatted_message_and_backtrace(colorizer); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/exception_presenter.rb#129
  def indent_lines(lines, failure_number); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/exception_presenter.rb#12
  def message_color; end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/exception_presenter.rb#217
  def read_failed_lines; end
end

class RSpec::Core::Formatters::ExceptionPresenter::Factory
  # source://rspec-core/3.12.0/lib/rspec/core/formatters/exception_presenter.rb#291
  def initialize(example); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/exception_presenter.rb#285
  def build; end

  private

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/exception_presenter.rb#342
  def multiple_exception_summarizer(exception, prior_detail_formatter, color); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/exception_presenter.rb#338
  def multiple_exceptions_error?(exception); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/exception_presenter.rb#301
  def options; end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/exception_presenter.rb#305
  def pending_options; end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/exception_presenter.rb#363
  def sub_failure_list_formatter(exception, message_color); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/exception_presenter.rb#322
  def with_multiple_error_options_as_needed(exception, options); end
end

class RSpec::Core::Formatters::ExceptionPresenter::Factory::CommonBacktraceTruncater
  # source://rspec-core/3.12.0/lib/rspec/core/formatters/exception_presenter.rb#397
  def initialize(parent); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/exception_presenter.rb#401
  def with_truncated_backtrace(child); end
end

module RSpec::Core::Formatters::ExceptionPresenter::Factory::EmptyBacktraceFormatter
  class << self
    # source://rspec-core/3.12.0/lib/rspec/core/formatters/exception_presenter.rb#390
    def format_backtrace(*_arg0); end
  end
end

# source://rspec-core/3.12.0/lib/rspec/core/formatters/exception_presenter.rb#421
RSpec::Core::Formatters::ExceptionPresenter::PENDING_DETAIL_FORMATTER = T.let(T.unsafe(nil), Proc)

class RSpec::Core::Formatters::FailureListFormatter < ::RSpec::Core::Formatters::BaseFormatter
  # source://rspec-core/3.12.0/lib/rspec/core/formatters/failure_list_formatter.rb#18
  def dump_profile(_profile); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/failure_list_formatter.rb#10
  def example_failed(failure); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/failure_list_formatter.rb#19
  def message(_message); end
end

class RSpec::Core::Formatters::FallbackMessageFormatter
  # source://rspec-core/3.12.0/lib/rspec/core/formatters/fallback_message_formatter.rb#10
  def initialize(output); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/fallback_message_formatter.rb#22
  def message(notification); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/fallback_message_formatter.rb#15
  def output; end
end

module RSpec::Core::Formatters::Helpers
  class << self
    # source://rspec-core/3.12.0/lib/rspec/core/formatters/helpers.rb#24
    def format_duration(duration); end

    # source://rspec-core/3.12.0/lib/rspec/core/formatters/helpers.rb#60
    def format_seconds(float, precision = T.unsafe(nil)); end

    # source://rspec-core/3.12.0/lib/rspec/core/formatters/helpers.rb#102
    def organize_ids(ids); end

    # source://rspec-core/3.12.0/lib/rspec/core/formatters/helpers.rb#88
    def pluralize(count, string); end

    private

    # source://rspec-core/3.12.0/lib/rspec/core/formatters/helpers.rb#76
    def strip_trailing_zeroes(string); end
  end
end

# source://rspec-core/3.12.0/lib/rspec/core/formatters/helpers.rb#12
RSpec::Core::Formatters::Helpers::DEFAULT_PRECISION = T.let(T.unsafe(nil), Integer)

# source://rspec-core/3.12.0/lib/rspec/core/formatters/helpers.rb#9
RSpec::Core::Formatters::Helpers::SUB_SECOND_PRECISION = T.let(T.unsafe(nil), Integer)

class RSpec::Core::Formatters::HtmlFormatter < ::RSpec::Core::Formatters::BaseFormatter
  # source://rspec-core/3.12.0/lib/rspec/core/formatters/html_formatter.rb#13
  def initialize(output); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/html_formatter.rb#103
  def dump_summary(summary); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/html_formatter.rb#55
  def example_failed(failure); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/html_formatter.rb#28
  def example_group_started(notification); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/html_formatter.rb#49
  def example_passed(passed); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/html_formatter.rb#93
  def example_pending(pending); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/html_formatter.rb#45
  def example_started(_notification); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/html_formatter.rb#22
  def start(notification); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/html_formatter.rb#40
  def start_dump(_notification); end

  private

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/html_formatter.rb#120
  def example_group_number; end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/html_formatter.rb#125
  def example_number; end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/html_formatter.rb#141
  def extra_failure_content(failure); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/html_formatter.rb#130
  def percent_done; end
end

class RSpec::Core::Formatters::JsonFormatter < ::RSpec::Core::Formatters::BaseFormatter
  # source://rspec-core/3.12.0/lib/rspec/core/formatters/json_formatter.rb#13
  def initialize(output); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/json_formatter.rb#55
  def close(_notification); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/json_formatter.rb#59
  def dump_profile(profile); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/json_formatter.rb#78
  def dump_profile_slowest_example_groups(profile); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/json_formatter.rb#66
  def dump_profile_slowest_examples(profile); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/json_formatter.rb#24
  def dump_summary(summary); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/json_formatter.rb#20
  def message(notification); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/json_formatter.rb#11
  def output_hash; end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/json_formatter.rb#50
  def seed(notification); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/json_formatter.rb#35
  def stop(notification); end

  private

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/json_formatter.rb#87
  def format_example(example); end
end

class RSpec::Core::Formatters::Loader
  # source://rspec-core/3.12.0/lib/rspec/core/formatters.rb#105
  def initialize(reporter); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters.rb#144
  def add(formatter_to_use, *paths); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters.rb#118
  def default_formatter; end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters.rb#118
  def default_formatter=(_arg0); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters.rb#112
  def formatters; end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters.rb#121
  def prepare_default(output_stream, deprecation_stream); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters.rb#115
  def reporter; end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters.rb#126
  def setup_default(output_stream, deprecation_stream); end

  private

  # source://rspec-core/3.12.0/lib/rspec/core/formatters.rb#211
  def built_in_formatter(key); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters.rb#234
  def custom_formatter(formatter_ref); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters.rb#195
  def duplicate_formatter_exists?(new_formatter); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters.rb#207
  def existing_formatter_implements?(notification); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters.rb#181
  def find_formatter(formatter_to_use); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters.rb#202
  def has_matching_output?(formatter, new_formatter); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters.rb#228
  def notifications_for(formatter_class); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters.rb#269
  def open_stream(path_or_wrapper); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters.rb#250
  def path_for(const_ref); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters.rb#188
  def register(formatter, notifications); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters.rb#246
  def string_const?(str); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters.rb#259
  def underscore(camel_cased_word); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters.rb#254
  def underscore_with_fix_for_non_standard_rspec_naming(string); end

  class << self
    # source://rspec-core/3.12.0/lib/rspec/core/formatters.rb#100
    def formatters; end
  end
end

class RSpec::Core::Formatters::ProfileFormatter
  # source://rspec-core/3.12.0/lib/rspec/core/formatters/profile_formatter.rb#11
  def initialize(output); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/profile_formatter.rb#25
  def dump_profile(profile); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/profile_formatter.rb#16
  def output; end

  private

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/profile_formatter.rb#62
  def bold(text); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/profile_formatter.rb#44
  def dump_profile_slowest_example_groups(profile); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/profile_formatter.rb#32
  def dump_profile_slowest_examples(profile); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/profile_formatter.rb#57
  def format_caller(caller_info); end
end

class RSpec::Core::Formatters::ProgressFormatter < ::RSpec::Core::Formatters::BaseTextFormatter
  # source://rspec-core/3.12.0/lib/rspec/core/formatters/progress_formatter.rb#19
  def example_failed(_notification); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/progress_formatter.rb#11
  def example_passed(_notification); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/progress_formatter.rb#15
  def example_pending(_notification); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/progress_formatter.rb#23
  def start_dump(_notification); end
end

class RSpec::Core::Formatters::SnippetExtractor
  # source://rspec-core/3.12.0/lib/rspec/core/formatters/snippet_extractor.rb#35
  def initialize(source, beginning_line_number, max_line_count = T.unsafe(nil)); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/snippet_extractor.rb#24
  def beginning_line_number; end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/snippet_extractor.rb#41
  def expression_lines; end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/snippet_extractor.rb#24
  def max_line_count; end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/snippet_extractor.rb#24
  def source; end

  private

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/snippet_extractor.rb#95
  def expression_node; end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/snippet_extractor.rb#107
  def expression_outmost_node?(node); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/snippet_extractor.rb#55
  def line_range_of_expression; end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/snippet_extractor.rb#87
  def line_range_of_location_nodes_in_expression; end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/snippet_extractor.rb#117
  def location_nodes_at_beginning_line; end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/snippet_extractor.rb#70
  def unclosed_tokens_in_line_range(line_range); end

  class << self
    # source://rspec-core/3.12.0/lib/rspec/core/formatters/snippet_extractor.rb#26
    def extract_expression_lines_at(file_path, beginning_line_number, max_line_count = T.unsafe(nil)); end

    # source://rspec-core/3.12.0/lib/rspec/core/formatters/snippet_extractor.rb#9
    def extract_line_at(file_path, line_number); end

    # source://rspec-core/3.12.0/lib/rspec/core/formatters/snippet_extractor.rb#128
    def least_indentation_from(lines); end

    # source://rspec-core/3.12.0/lib/rspec/core/formatters/snippet_extractor.rb#16
    def source_from_file(path); end
  end
end

class RSpec::Core::Formatters::SnippetExtractor::NoExpressionAtLineError < ::StandardError; end
class RSpec::Core::Formatters::SnippetExtractor::NoSuchFileError < ::StandardError; end
class RSpec::Core::Formatters::SnippetExtractor::NoSuchLineError < ::StandardError; end

class RSpec::Core::Formatters::SyntaxHighlighter
  # source://rspec-core/3.12.0/lib/rspec/core/formatters/syntax_highlighter.rb#8
  def initialize(configuration); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/syntax_highlighter.rb#12
  def highlight(lines); end

  private

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/syntax_highlighter.rb#50
  def color_enabled_implementation; end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/syntax_highlighter.rb#44
  def implementation; end

  class << self
    # source://rspec-core/3.12.0/lib/rspec/core/formatters/syntax_highlighter.rb#18
    def attempt_to_add_rspec_terms_to_coderay_keywords; end
  end
end

module RSpec::Core::Formatters::SyntaxHighlighter::CodeRayImplementation
  class << self
    # source://rspec-core/3.12.0/lib/rspec/core/formatters/syntax_highlighter.rb#64
    def highlight_syntax(lines); end
  end
end

# source://rspec-core/3.12.0/lib/rspec/core/formatters/syntax_highlighter.rb#62
RSpec::Core::Formatters::SyntaxHighlighter::CodeRayImplementation::RESET_CODE = T.let(T.unsafe(nil), String)

module RSpec::Core::Formatters::SyntaxHighlighter::NoSyntaxHighlightingImplementation
  class << self
    # source://rspec-core/3.12.0/lib/rspec/core/formatters/syntax_highlighter.rb#79
    def highlight_syntax(lines); end
  end
end

# source://rspec-core/3.12.0/lib/rspec/core/formatters/syntax_highlighter.rb#87
RSpec::Core::Formatters::SyntaxHighlighter::WindowsImplementation = RSpec::Core::Formatters::SyntaxHighlighter::NoSyntaxHighlightingImplementation

module RSpec::Core::HashImitatable
  mixes_in_class_methods ::RSpec::Core::HashImitatable::ClassMethods

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def <(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def <=(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def >(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def >=(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#388
  def [](key); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#398
  def []=(key, value); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def all?(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def any?(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def assoc(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def chain(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def chunk(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def chunk_while(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def clear(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def collect(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def collect_concat(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def compact(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def compact!(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def compare_by_identity(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def compare_by_identity?(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def count(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def cycle(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def deconstruct_keys(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def default(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def default=(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def default_proc(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def default_proc=(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def delete(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def delete_if(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def detect(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def dig(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def drop(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def drop_while(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def each(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def each_cons(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def each_entry(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def each_key(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def each_pair(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def each_slice(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def each_value(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def each_with_index(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def each_with_object(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def empty?(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def entries(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def except(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def fetch(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def fetch_values(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def filter(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def filter!(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def filter_map(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def find(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def find_all(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def find_index(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def first(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def flat_map(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def flatten(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def grep(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def grep_v(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def group_by(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def has_key?(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def has_value?(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def include?(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def inject(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def invert(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def keep_if(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def key(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def key?(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def keys(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def lazy(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def length(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def map(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def max(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def max_by(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def member?(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def merge(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def merge!(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def min(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def min_by(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def minmax(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def minmax_by(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def none?(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def one?(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def partition(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def rassoc(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def reduce(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def rehash(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def reject(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def reject!(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def replace(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def reverse_each(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def select(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def select!(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def shift(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def size(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def slice(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def slice_after(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def slice_before(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def slice_when(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def sort(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def sort_by(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def store(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def sum(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def take(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def take_while(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def tally(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def to_a(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#354
  def to_h; end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def to_hash(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def to_proc(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def to_set(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def transform_keys(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def transform_keys!(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def transform_values(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def transform_values!(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def uniq(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def update(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def value?(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def values(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def values_at(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#367
  def zip(*args, &block); end

  private

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#414
  def directly_supports_attribute?(name); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#410
  def extra_hash_attributes; end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#418
  def get_value(name); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#426
  def hash_for_delegation; end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#430
  def issue_deprecation(_method_name, *_args); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#422
  def set_value(name, value); end

  class << self
    # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#350
    def included(klass); end
  end
end

module RSpec::Core::HashImitatable::ClassMethods
  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#440
  def attr_accessor(*names); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#436
  def hash_attribute_names; end
end

module RSpec::Core::Hooks
  # source://rspec-core/3.12.0/lib/rspec/core/hooks.rb#277
  def after(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/hooks.rb#287
  def append_after(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/hooks.rb#200
  def append_before(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/hooks.rb#349
  def around(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/hooks.rb#200
  def before(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/hooks.rb#355
  def hooks; end

  # source://rspec-core/3.12.0/lib/rspec/core/hooks.rb#277
  def prepend_after(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/hooks.rb#210
  def prepend_before(*args, &block); end
end

class RSpec::Core::Hooks::AfterContextHook < ::RSpec::Core::Hooks::Hook
  # source://rspec-core/3.12.0/lib/rspec/core/hooks.rb#380
  def run(example); end
end

class RSpec::Core::Hooks::AfterHook < ::RSpec::Core::Hooks::Hook
  # source://rspec-core/3.12.0/lib/rspec/core/hooks.rb#371
  def run(example); end
end

class RSpec::Core::Hooks::AroundHook < ::RSpec::Core::Hooks::Hook
  # source://rspec-core/3.12.0/lib/rspec/core/hooks.rb#389
  def execute_with(example, procsy); end

  # source://rspec-core/3.12.0/lib/rspec/core/hooks.rb#397
  def hook_description; end
end

class RSpec::Core::Hooks::BeforeHook < ::RSpec::Core::Hooks::Hook
  # source://rspec-core/3.12.0/lib/rspec/core/hooks.rb#364
  def run(example); end
end

class RSpec::Core::Hooks::Hook < ::Struct
  def block; end
  def block=(_); end
  def options; end
  def options=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

class RSpec::Core::Hooks::HookCollections
  # source://rspec-core/3.12.0/lib/rspec/core/hooks.rb#421
  def initialize(owner, filterable_item_repo_class); end

  # source://rspec-core/3.12.0/lib/rspec/core/hooks.rb#449
  def register(prepend_or_append, position, *args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/hooks.rb#442
  def register_global_singleton_context_hooks(example, globals); end

  # source://rspec-core/3.12.0/lib/rspec/core/hooks.rb#431
  def register_globals(host, globals); end

  # source://rspec-core/3.12.0/lib/rspec/core/hooks.rb#475
  def run(position, scope, example_or_group); end

  protected

  # source://rspec-core/3.12.0/lib/rspec/core/hooks.rb#523
  def all_hooks_for(position, scope); end

  # source://rspec-core/3.12.0/lib/rspec/core/hooks.rb#507
  def matching_hooks_for(position, scope, example_or_group); end

  # source://rspec-core/3.12.0/lib/rspec/core/hooks.rb#533
  def processable_hooks_for(position, scope, host); end

  # source://rspec-core/3.12.0/lib/rspec/core/hooks.rb#527
  def run_owned_hooks_for(position, scope, example_or_group); end

  private

  # source://rspec-core/3.12.0/lib/rspec/core/hooks.rb#553
  def ensure_hooks_initialized_for(position, scope); end

  # source://rspec-core/3.12.0/lib/rspec/core/hooks.rb#591
  def extract_scope_from(args); end

  # source://rspec-core/3.12.0/lib/rspec/core/hooks.rb#543
  def hooks_for(position, scope); end

  # source://rspec-core/3.12.0/lib/rspec/core/hooks.rb#605
  def known_scope?(scope); end

  # source://rspec-core/3.12.0/lib/rspec/core/hooks.rb#609
  def normalized_scope_for(scope); end

  # source://rspec-core/3.12.0/lib/rspec/core/hooks.rb#633
  def owner_parent_groups; end

  # source://rspec-core/3.12.0/lib/rspec/core/hooks.rb#571
  def process(host, parent_groups, globals, position, scope); end

  # source://rspec-core/3.12.0/lib/rspec/core/hooks.rb#619
  def run_around_example_hooks_for(example); end

  # source://rspec-core/3.12.0/lib/rspec/core/hooks.rb#613
  def run_example_hooks_for(example, position, each_method); end

  # source://rspec-core/3.12.0/lib/rspec/core/hooks.rb#584
  def scope_and_options_from(*args); end
end

# source://rspec-core/3.12.0/lib/rspec/core/hooks.rb#505
RSpec::Core::Hooks::HookCollections::EMPTY_HOOK_ARRAY = T.let(T.unsafe(nil), Array)

# source://rspec-core/3.12.0/lib/rspec/core/hooks.rb#495
RSpec::Core::Hooks::HookCollections::HOOK_TYPES = T.let(T.unsafe(nil), Hash)

# source://rspec-core/3.12.0/lib/rspec/core/hooks.rb#491
RSpec::Core::Hooks::HookCollections::SCOPES = T.let(T.unsafe(nil), Array)

# source://rspec-core/3.12.0/lib/rspec/core/hooks.rb#493
RSpec::Core::Hooks::HookCollections::SCOPE_ALIASES = T.let(T.unsafe(nil), Hash)

class RSpec::Core::InclusionRules < ::RSpec::Core::FilterRules
  # source://rspec-core/3.12.0/lib/rspec/core/filter_manager.rb#187
  def add(*args); end

  # source://rspec-core/3.12.0/lib/rspec/core/filter_manager.rb#191
  def add_with_low_priority(*args); end

  # source://rspec-core/3.12.0/lib/rspec/core/filter_manager.rb#195
  def include_example?(example); end

  # source://rspec-core/3.12.0/lib/rspec/core/filter_manager.rb#203
  def split_file_scoped_rules; end

  # source://rspec-core/3.12.0/lib/rspec/core/filter_manager.rb#199
  def standalone?; end

  private

  # source://rspec-core/3.12.0/lib/rspec/core/filter_manager.rb#213
  def apply_standalone_filter(updated); end

  # source://rspec-core/3.12.0/lib/rspec/core/filter_manager.rb#226
  def is_standalone_filter?(rules); end

  # source://rspec-core/3.12.0/lib/rspec/core/filter_manager.rb#221
  def replace_filters(new_rules); end
end

module RSpec::Core::Invocations; end

class RSpec::Core::Invocations::Bisect
  # source://rspec-core/3.12.0/lib/rspec/core/invocations.rb#29
  def call(options, err, out); end

  private

  # source://rspec-core/3.12.0/lib/rspec/core/invocations.rb#45
  def bisect_formatter_klass_for(argument); end
end

class RSpec::Core::Invocations::DRbWithFallback
  # source://rspec-core/3.12.0/lib/rspec/core/invocations.rb#16
  def call(options, err, out); end
end

class RSpec::Core::Invocations::InitializeProject
  # source://rspec-core/3.12.0/lib/rspec/core/invocations.rb#7
  def call(*_args); end
end

class RSpec::Core::Invocations::PrintHelp < ::Struct
  # source://rspec-core/3.12.0/lib/rspec/core/invocations.rb#79
  def call(_options, _err, out); end

  def hidden_options; end
  def hidden_options=(_); end
  def parser; end
  def parser=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

class RSpec::Core::Invocations::PrintVersion
  # source://rspec-core/3.12.0/lib/rspec/core/invocations.rb#53
  def call(_options, _err, out); end
end

class RSpec::Core::LegacyExampleGroupHash
  include ::RSpec::Core::HashImitatable
  extend ::RSpec::Core::HashImitatable::ClassMethods

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#473
  def initialize(metadata); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#479
  def to_h; end

  private

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#485
  def directly_supports_attribute?(name); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#489
  def get_value(name); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#493
  def set_value(name, value); end
end

module RSpec::Core::MemoizedHelpers
  # source://rspec-core/3.12.0/lib/rspec/core/memoized_helpers.rb#135
  def initialize(*_arg0); end

  # source://rspec-core/3.12.0/lib/rspec/core/memoized_helpers.rb#120
  def is_expected; end

  # source://rspec-core/3.12.0/lib/rspec/core/memoized_helpers.rb#80
  def should(matcher = T.unsafe(nil), message = T.unsafe(nil)); end

  # source://rspec-core/3.12.0/lib/rspec/core/memoized_helpers.rb#100
  def should_not(matcher = T.unsafe(nil), message = T.unsafe(nil)); end

  # source://rspec-core/3.12.0/lib/rspec/core/memoized_helpers.rb#57
  def subject; end

  private

  # source://rspec-core/3.12.0/lib/rspec/core/memoized_helpers.rb#141
  def __init_memoized; end

  # source://rspec-core/3.12.0/lib/rspec/core/memoized_helpers.rb#129
  def __memoized; end

  # source://rspec-core/3.12.0/lib/rspec/core/memoized_helpers.rb#150
  def enforce_value_expectation(matcher, method_name); end

  # source://rspec-core/3.12.0/lib/rspec/core/memoized_helpers.rb#163
  def matcher_supports_value_expectations?(matcher); end

  class << self
    # source://rspec-core/3.12.0/lib/rspec/core/memoized_helpers.rb#542
    def define_helpers_on(example_group); end

    # source://rspec-core/3.12.0/lib/rspec/core/memoized_helpers.rb#570
    def get_constant_or_yield(example_group, name); end

    # source://rspec-core/3.12.0/lib/rspec/core/memoized_helpers.rb#528
    def module_for(example_group); end
  end
end

module RSpec::Core::MemoizedHelpers::ClassMethods
  # source://rspec-core/3.12.0/lib/rspec/core/memoized_helpers.rb#306
  def let(name, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/memoized_helpers.rb#400
  def let!(name, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/memoized_helpers.rb#444
  def subject(name = T.unsafe(nil), &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/memoized_helpers.rb#510
  def subject!(name = T.unsafe(nil), &block); end
end

class RSpec::Core::MemoizedHelpers::ContextHookMemoized
  class << self
    # source://rspec-core/3.12.0/lib/rspec/core/memoized_helpers.rb#222
    def fetch_or_store(key, &_block); end

    # source://rspec-core/3.12.0/lib/rspec/core/memoized_helpers.rb#201
    def isolate_for_context_hook(example_group_instance); end
  end
end

class RSpec::Core::MemoizedHelpers::ContextHookMemoized::After < ::RSpec::Core::MemoizedHelpers::ContextHookMemoized
  class << self
    # source://rspec-core/3.12.0/lib/rspec/core/memoized_helpers.rb#261
    def article; end

    # source://rspec-core/3.12.0/lib/rspec/core/memoized_helpers.rb#257
    def hook_expression; end

    # source://rspec-core/3.12.0/lib/rspec/core/memoized_helpers.rb#265
    def hook_intention; end
  end
end

class RSpec::Core::MemoizedHelpers::ContextHookMemoized::Before < ::RSpec::Core::MemoizedHelpers::ContextHookMemoized
  class << self
    # source://rspec-core/3.12.0/lib/rspec/core/memoized_helpers.rb#246
    def article; end

    # source://rspec-core/3.12.0/lib/rspec/core/memoized_helpers.rb#242
    def hook_expression; end

    # source://rspec-core/3.12.0/lib/rspec/core/memoized_helpers.rb#250
    def hook_intention; end
  end
end

class RSpec::Core::MemoizedHelpers::NonThreadSafeMemoized
  # source://rspec-core/3.12.0/lib/rspec/core/memoized_helpers.rb#187
  def initialize; end

  # source://rspec-core/3.12.0/lib/rspec/core/memoized_helpers.rb#191
  def fetch_or_store(key); end
end

class RSpec::Core::MemoizedHelpers::ThreadsafeMemoized
  # source://rspec-core/3.12.0/lib/rspec/core/memoized_helpers.rb#171
  def initialize; end

  # source://rspec-core/3.12.0/lib/rspec/core/memoized_helpers.rb#176
  def fetch_or_store(key); end
end

module RSpec::Core::Metadata
  class << self
    # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#71
    def ascend(metadata); end

    # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#58
    def ascending(metadata); end

    # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#80
    def build_hash_from(args, warn_about_example_group_filtering = T.unsafe(nil)); end

    # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#94
    def deep_hash_dup(object); end

    # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#105
    def id_from(metadata); end

    # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#110
    def location_tuple_from(metadata); end

    # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#44
    def relative_path(line); end

    # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#36
    def relative_path_regex; end
  end
end

class RSpec::Core::Metadata::ExampleGroupHash < ::RSpec::Core::Metadata::HashPopulator
  private

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#304
  def described_class; end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#311
  def full_description; end

  class << self
    # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#265
    def backwards_compatibility_default_proc(&example_group_selector); end

    # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#248
    def create(parent_group_metadata, user_metadata, example_group_index, *args, &block); end

    # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#261
    def hash_with_backwards_compatibility_default_proc; end
  end
end

class RSpec::Core::Metadata::ExampleHash < ::RSpec::Core::Metadata::HashPopulator
  private

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#234
  def described_class; end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#238
  def full_description; end

  class << self
    # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#214
    def create(group_metadata, user_metadata, index_provider, description, block); end
  end
end

class RSpec::Core::Metadata::HashPopulator
  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#120
  def initialize(metadata, user_metadata, index_provider, description_args, block); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#118
  def block; end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#118
  def description_args; end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#118
  def metadata; end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#128
  def populate; end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#118
  def user_metadata; end

  private

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#178
  def build_description_from(parent_description = T.unsafe(nil), my_description = T.unsafe(nil)); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#185
  def build_scoped_id_for(file_path); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#170
  def description_separator(parent_part, child_part); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#191
  def ensure_valid_user_keys; end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#164
  def file_path_and_line_number_from(backtrace); end

  # source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#143
  def populate_location_attributes; end
end

# source://rspec-core/3.12.0/lib/rspec/core/metadata.rb#325
RSpec::Core::Metadata::RESERVED_KEYS = T.let(T.unsafe(nil), Array)

module RSpec::Core::MetadataFilter
  class << self
    # source://rspec-core/3.12.0/lib/rspec/core/metadata_filter.rb#11
    def apply?(predicate, filters, metadata); end

    # source://rspec-core/3.12.0/lib/rspec/core/metadata_filter.rb#16
    def filter_applies?(key, filter_value, metadata); end

    # source://rspec-core/3.12.0/lib/rspec/core/metadata_filter.rb#33
    def silence_metadata_example_group_deprecations; end

    private

    # source://rspec-core/3.12.0/lib/rspec/core/metadata_filter.rb#42
    def filter_applies_to_any_value?(key, value, metadata); end

    # source://rspec-core/3.12.0/lib/rspec/core/metadata_filter.rb#73
    def filters_apply?(key, value, metadata); end

    # source://rspec-core/3.12.0/lib/rspec/core/metadata_filter.rb#46
    def id_filter_applies?(rerun_paths_to_scoped_ids, metadata); end

    # source://rspec-core/3.12.0/lib/rspec/core/metadata_filter.rb#54
    def location_filter_applies?(locations, metadata); end

    # source://rspec-core/3.12.0/lib/rspec/core/metadata_filter.rb#65
    def proc_filter_applies?(key, proc, metadata); end
  end
end

class RSpec::Core::MultipleExceptionError < ::StandardError
  include ::RSpec::Core::MultipleExceptionError::InterfaceTag

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/exception_presenter.rb#492
  def initialize(*exceptions); end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/exception_presenter.rb#489
  def aggregation_block_label; end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/exception_presenter.rb#485
  def aggregation_metadata; end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/exception_presenter.rb#482
  def all_exceptions; end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/exception_presenter.rb#517
  def exception_count_description; end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/exception_presenter.rb#476
  def failures; end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/exception_presenter.rb#507
  def message; end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/exception_presenter.rb#479
  def other_errors; end

  # source://rspec-core/3.12.0/lib/rspec/core/formatters/exception_presenter.rb#512
  def summary; end
end

module RSpec::Core::MultipleExceptionError::InterfaceTag
  # source://rspec-core/3.12.0/lib/rspec/core/formatters/exception_presenter.rb#441
  def add(exception); end

  class << self
    # source://rspec-core/3.12.0/lib/rspec/core/formatters/exception_presenter.rb#467
    def for(ex); end
  end
end

module RSpec::Core::Notifications; end

class RSpec::Core::Notifications::CustomNotification < ::Struct
  class << self
    # source://rspec-core/3.12.0/lib/rspec/core/notifications.rb#515
    def for(options = T.unsafe(nil)); end
  end
end

class RSpec::Core::Notifications::DeprecationNotification < ::Struct
  def call_site; end
  def call_site=(_); end
  def deprecated; end
  def deprecated=(_); end
  def message; end
  def message=(_); end
  def replacement; end
  def replacement=(_); end

  class << self
    def [](*_arg0); end

    # source://rspec-core/3.12.0/lib/rspec/core/notifications.rb#497
    def from_hash(data); end

    def inspect; end
    def keyword_init?; end
    def members; end

    private

    def new(*_arg0); end
  end
end

class RSpec::Core::Notifications::ExampleNotification < ::Struct
  def example; end
  def example=(_); end

  class << self
    def [](*_arg0); end

    # source://rspec-core/3.12.0/lib/rspec/core/notifications.rb#41
    def for(example); end

    def inspect; end
    def keyword_init?; end
    def members; end

    private

    def new(*_arg0); end
  end
end

class RSpec::Core::Notifications::ExamplesNotification
  # source://rspec-core/3.12.0/lib/rspec/core/notifications.rb#70
  def initialize(reporter); end

  # source://rspec-core/3.12.0/lib/rspec/core/notifications.rb#75
  def examples; end

  # source://rspec-core/3.12.0/lib/rspec/core/notifications.rb#80
  def failed_examples; end

  # source://rspec-core/3.12.0/lib/rspec/core/notifications.rb#97
  def failure_notifications; end

  # source://rspec-core/3.12.0/lib/rspec/core/notifications.rb#110
  def fully_formatted_failed_examples(colorizer = T.unsafe(nil)); end

  # source://rspec-core/3.12.0/lib/rspec/core/notifications.rb#122
  def fully_formatted_pending_examples(colorizer = T.unsafe(nil)); end

  # source://rspec-core/3.12.0/lib/rspec/core/notifications.rb#91
  def notifications; end

  # source://rspec-core/3.12.0/lib/rspec/core/notifications.rb#85
  def pending_examples; end

  # source://rspec-core/3.12.0/lib/rspec/core/notifications.rb#104
  def pending_notifications; end

  private

  # source://rspec-core/3.12.0/lib/rspec/core/notifications.rb#134
  def format_examples(examples); end
end

class RSpec::Core::Notifications::FailedExampleNotification < ::RSpec::Core::Notifications::ExampleNotification
  # source://rspec-core/3.12.0/lib/rspec/core/notifications.rb#211
  def initialize(example, exception_presenter = T.unsafe(nil)); end

  # source://rspec-core/3.12.0/lib/rspec/core/notifications.rb#193
  def colorized_formatted_backtrace(colorizer = T.unsafe(nil)); end

  # source://rspec-core/3.12.0/lib/rspec/core/notifications.rb#178
  def colorized_message_lines(colorizer = T.unsafe(nil)); end

  # source://rspec-core/3.12.0/lib/rspec/core/notifications.rb#163
  def description; end

  # source://rspec-core/3.12.0/lib/rspec/core/notifications.rb#158
  def exception; end

  # source://rspec-core/3.12.0/lib/rspec/core/notifications.rb#185
  def formatted_backtrace; end

  # source://rspec-core/3.12.0/lib/rspec/core/notifications.rb#199
  def fully_formatted(failure_number, colorizer = T.unsafe(nil)); end

  # source://rspec-core/3.12.0/lib/rspec/core/notifications.rb#205
  def fully_formatted_lines(failure_number, colorizer = T.unsafe(nil)); end

  # source://rspec-core/3.12.0/lib/rspec/core/notifications.rb#170
  def message_lines; end

  class << self
    def new(*_arg0); end
  end
end

class RSpec::Core::Notifications::GroupNotification < ::Struct
  def group; end
  def group=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

class RSpec::Core::Notifications::MessageNotification < ::Struct
  def message; end
  def message=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

module RSpec::Core::Notifications::NullColorizer
  private

  # source://rspec-core/3.12.0/lib/rspec/core/notifications.rb#14
  def wrap(line, _code_or_symbol); end

  class << self
    # source://rspec-core/3.12.0/lib/rspec/core/notifications.rb#14
    def wrap(line, _code_or_symbol); end
  end
end

class RSpec::Core::Notifications::NullNotification; end
class RSpec::Core::Notifications::PendingExampleFailedAsExpectedNotification < ::RSpec::Core::Notifications::FailedExampleNotification; end
class RSpec::Core::Notifications::PendingExampleFixedNotification < ::RSpec::Core::Notifications::FailedExampleNotification; end

class RSpec::Core::Notifications::ProfileNotification
  # source://rspec-core/3.12.0/lib/rspec/core/notifications.rb#428
  def initialize(duration, examples, number_of_examples, example_groups); end

  # source://rspec-core/3.12.0/lib/rspec/core/notifications.rb#434
  def duration; end

  # source://rspec-core/3.12.0/lib/rspec/core/notifications.rb#434
  def examples; end

  # source://rspec-core/3.12.0/lib/rspec/core/notifications.rb#434
  def number_of_examples; end

  # source://rspec-core/3.12.0/lib/rspec/core/notifications.rb#453
  def percentage; end

  # source://rspec-core/3.12.0/lib/rspec/core/notifications.rb#445
  def slow_duration; end

  # source://rspec-core/3.12.0/lib/rspec/core/notifications.rb#437
  def slowest_examples; end

  # source://rspec-core/3.12.0/lib/rspec/core/notifications.rb#462
  def slowest_groups; end

  private

  # source://rspec-core/3.12.0/lib/rspec/core/notifications.rb#468
  def calculate_slowest_groups; end
end

class RSpec::Core::Notifications::SeedNotification < ::Struct
  # source://rspec-core/3.12.0/lib/rspec/core/notifications.rb#280
  def fully_formatted; end

  def seed; end
  def seed=(_); end

  # source://rspec-core/3.12.0/lib/rspec/core/notifications.rb#273
  def seed_used?; end

  def used=(_); end

  private

  def used; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

class RSpec::Core::Notifications::SkippedExampleNotification < ::RSpec::Core::Notifications::ExampleNotification
  # source://rspec-core/3.12.0/lib/rspec/core/notifications.rb#233
  def fully_formatted(pending_number, colorizer = T.unsafe(nil)); end

  class << self
    def new(*_arg0); end
  end
end

class RSpec::Core::Notifications::StartNotification < ::Struct
  def count; end
  def count=(_); end
  def load_time; end
  def load_time=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

class RSpec::Core::Notifications::SummaryNotification < ::Struct
  include ::RSpec::Core::ShellEscape

  # source://rspec-core/3.12.0/lib/rspec/core/notifications.rb#362
  def colorized_rerun_commands(colorizer = T.unsafe(nil)); end

  # source://rspec-core/3.12.0/lib/rspec/core/notifications.rb#345
  def colorized_totals_line(colorizer = T.unsafe(nil)); end

  def duration; end
  def duration=(_); end
  def errors_outside_of_examples_count; end
  def errors_outside_of_examples_count=(_); end

  # source://rspec-core/3.12.0/lib/rspec/core/notifications.rb#304
  def example_count; end

  def examples; end
  def examples=(_); end
  def failed_examples; end
  def failed_examples=(_); end

  # source://rspec-core/3.12.0/lib/rspec/core/notifications.rb#310
  def failure_count; end

  # source://rspec-core/3.12.0/lib/rspec/core/notifications.rb#372
  def formatted_duration; end

  # source://rspec-core/3.12.0/lib/rspec/core/notifications.rb#378
  def formatted_load_time; end

  # source://rspec-core/3.12.0/lib/rspec/core/notifications.rb#384
  def fully_formatted(colorizer = T.unsafe(nil)); end

  def load_time; end
  def load_time=(_); end

  # source://rspec-core/3.12.0/lib/rspec/core/notifications.rb#316
  def pending_count; end

  def pending_examples; end
  def pending_examples=(_); end

  # source://rspec-core/3.12.0/lib/rspec/core/notifications.rb#322
  def totals_line; end

  private

  # source://rspec-core/3.12.0/lib/rspec/core/notifications.rb#406
  def duplicate_rerun_locations; end

  # source://rspec-core/3.12.0/lib/rspec/core/notifications.rb#400
  def rerun_argument_for(example); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

class RSpec::Core::NullReporter
  class << self
    private

    # source://rspec-core/3.12.0/lib/rspec/core/reporter.rb#260
    def method_missing(*_arg0); end
  end
end

module RSpec::Core::Ordering; end

class RSpec::Core::Ordering::ConfigurationManager
  # source://rspec-core/3.12.0/lib/rspec/core/ordering.rb#119
  def initialize; end

  # source://rspec-core/3.12.0/lib/rspec/core/ordering.rb#151
  def force(hash); end

  # source://rspec-core/3.12.0/lib/rspec/core/ordering.rb#136
  def order=(type); end

  # source://rspec-core/3.12.0/lib/rspec/core/ordering.rb#117
  def ordering_registry; end

  # source://rspec-core/3.12.0/lib/rspec/core/ordering.rb#162
  def register_ordering(name, strategy = T.unsafe(nil)); end

  # source://rspec-core/3.12.0/lib/rspec/core/ordering.rb#117
  def seed; end

  # source://rspec-core/3.12.0/lib/rspec/core/ordering.rb#130
  def seed=(seed); end

  # source://rspec-core/3.12.0/lib/rspec/core/ordering.rb#126
  def seed_used?; end
end

class RSpec::Core::Ordering::Custom
  # source://rspec-core/3.12.0/lib/rspec/core/ordering.rb#72
  def initialize(callable); end

  # source://rspec-core/3.12.0/lib/rspec/core/ordering.rb#76
  def order(list); end
end

class RSpec::Core::Ordering::Identity
  # source://rspec-core/3.12.0/lib/rspec/core/ordering.rb#8
  def order(items); end
end

class RSpec::Core::Ordering::Random
  # source://rspec-core/3.12.0/lib/rspec/core/ordering.rb#16
  def initialize(configuration); end

  # source://rspec-core/3.12.0/lib/rspec/core/ordering.rb#25
  def order(items); end

  # source://rspec-core/3.12.0/lib/rspec/core/ordering.rb#21
  def used?; end

  private

  # source://rspec-core/3.12.0/lib/rspec/core/ordering.rb#39
  def jenkins_hash_digest(string); end
end

# source://rspec-core/3.12.0/lib/rspec/core/ordering.rb#58
RSpec::Core::Ordering::Random::MAX_32_BIT = T.let(T.unsafe(nil), Integer)

class RSpec::Core::Ordering::RecentlyModified
  # source://rspec-core/3.12.0/lib/rspec/core/ordering.rb#64
  def order(list); end
end

class RSpec::Core::Ordering::Registry
  # source://rspec-core/3.12.0/lib/rspec/core/ordering.rb#84
  def initialize(configuration); end

  # source://rspec-core/3.12.0/lib/rspec/core/ordering.rb#98
  def fetch(name, &fallback); end

  # source://rspec-core/3.12.0/lib/rspec/core/ordering.rb#102
  def register(sym, strategy); end

  # source://rspec-core/3.12.0/lib/rspec/core/ordering.rb#106
  def used_random_seed?; end
end

class RSpec::Core::OutputWrapper
  # source://rspec-core/3.12.0/lib/rspec/core/output_wrapper.rb#9
  def initialize(output); end

  # source://rspec-core/3.12.0/lib/rspec/core/output_wrapper.rb#23
  def <<(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/output_wrapper.rb#23
  def advise(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/output_wrapper.rb#23
  def autoclose=(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/output_wrapper.rb#23
  def autoclose?(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/output_wrapper.rb#23
  def binmode(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/output_wrapper.rb#23
  def binmode?(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/output_wrapper.rb#23
  def close(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/output_wrapper.rb#23
  def close_on_exec=(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/output_wrapper.rb#23
  def close_on_exec?(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/output_wrapper.rb#23
  def close_read(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/output_wrapper.rb#23
  def close_write(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/output_wrapper.rb#23
  def closed?(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/output_wrapper.rb#23
  def each(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/output_wrapper.rb#23
  def each_byte(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/output_wrapper.rb#23
  def each_char(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/output_wrapper.rb#23
  def each_codepoint(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/output_wrapper.rb#23
  def each_line(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/output_wrapper.rb#23
  def eof(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/output_wrapper.rb#23
  def eof?(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/output_wrapper.rb#23
  def external_encoding(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/output_wrapper.rb#23
  def fcntl(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/output_wrapper.rb#23
  def fdatasync(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/output_wrapper.rb#23
  def fileno(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/output_wrapper.rb#23
  def flush(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/output_wrapper.rb#23
  def fsync(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/output_wrapper.rb#23
  def getbyte(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/output_wrapper.rb#23
  def getc(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/output_wrapper.rb#23
  def gets(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/output_wrapper.rb#23
  def inspect(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/output_wrapper.rb#23
  def internal_encoding(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/output_wrapper.rb#23
  def ioctl(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/output_wrapper.rb#23
  def isatty(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/output_wrapper.rb#23
  def lineno(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/output_wrapper.rb#23
  def lineno=(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/output_wrapper.rb#17
  def method_missing(name, *args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/output_wrapper.rb#23
  def nonblock(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/output_wrapper.rb#23
  def nonblock=(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/output_wrapper.rb#23
  def nonblock?(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/output_wrapper.rb#23
  def nread(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/output_wrapper.rb#6
  def output; end

  # source://rspec-core/3.12.0/lib/rspec/core/output_wrapper.rb#6
  def output=(_arg0); end

  # source://rspec-core/3.12.0/lib/rspec/core/output_wrapper.rb#23
  def pathconf(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/output_wrapper.rb#23
  def pid(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/output_wrapper.rb#23
  def pos(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/output_wrapper.rb#23
  def pos=(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/output_wrapper.rb#23
  def pread(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/output_wrapper.rb#23
  def print(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/output_wrapper.rb#23
  def printf(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/output_wrapper.rb#23
  def putc(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/output_wrapper.rb#23
  def puts(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/output_wrapper.rb#23
  def pwrite(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/output_wrapper.rb#23
  def read(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/output_wrapper.rb#23
  def read_nonblock(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/output_wrapper.rb#23
  def readbyte(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/output_wrapper.rb#23
  def readchar(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/output_wrapper.rb#23
  def readline(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/output_wrapper.rb#23
  def readlines(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/output_wrapper.rb#23
  def readpartial(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/output_wrapper.rb#23
  def ready?(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/output_wrapper.rb#23
  def reopen(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/output_wrapper.rb#13
  def respond_to?(name, priv = T.unsafe(nil)); end

  # source://rspec-core/3.12.0/lib/rspec/core/output_wrapper.rb#23
  def rewind(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/output_wrapper.rb#23
  def seek(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/output_wrapper.rb#23
  def set_encoding(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/output_wrapper.rb#23
  def set_encoding_by_bom(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/output_wrapper.rb#23
  def stat(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/output_wrapper.rb#23
  def sync(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/output_wrapper.rb#23
  def sync=(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/output_wrapper.rb#23
  def sysread(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/output_wrapper.rb#23
  def sysseek(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/output_wrapper.rb#23
  def syswrite(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/output_wrapper.rb#23
  def tell(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/output_wrapper.rb#23
  def to_i(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/output_wrapper.rb#23
  def to_io(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/output_wrapper.rb#23
  def tty?(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/output_wrapper.rb#23
  def ungetbyte(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/output_wrapper.rb#23
  def ungetc(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/output_wrapper.rb#23
  def wait(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/output_wrapper.rb#23
  def wait_priority(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/output_wrapper.rb#23
  def wait_readable(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/output_wrapper.rb#23
  def wait_writable(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/output_wrapper.rb#23
  def write(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/output_wrapper.rb#23
  def write_nonblock(*args, &block); end
end

class RSpec::Core::Parser
  # source://rspec-core/3.12.0/lib/rspec/core/option_parser.rb#13
  def initialize(original_args); end

  # source://rspec-core/3.12.0/lib/rspec/core/option_parser.rb#11
  def original_args; end

  # source://rspec-core/3.12.0/lib/rspec/core/option_parser.rb#17
  def parse(source = T.unsafe(nil)); end

  private

  # source://rspec-core/3.12.0/lib/rspec/core/option_parser.rb#310
  def add_tag_filter(options, filter_type, tag_name, value = T.unsafe(nil)); end

  # source://rspec-core/3.12.0/lib/rspec/core/option_parser.rb#318
  def configure_only_failures(options); end

  # source://rspec-core/3.12.0/lib/rspec/core/option_parser.rb#39
  def parser(options); end

  # source://rspec-core/3.12.0/lib/rspec/core/option_parser.rb#314
  def set_fail_fast(options, value); end

  class << self
    # source://rspec-core/3.12.0/lib/rspec/core/option_parser.rb#7
    def parse(args, source = T.unsafe(nil)); end
  end
end

module RSpec::Core::Pending
  # source://rspec-core/3.12.0/lib/rspec/core/pending.rb#62
  def pending(message = T.unsafe(nil)); end

  # source://rspec-core/3.12.0/lib/rspec/core/pending.rb#110
  def skip(message = T.unsafe(nil)); end

  class << self
    # source://rspec-core/3.12.0/lib/rspec/core/pending.rb#152
    def mark_fixed!(example); end

    # source://rspec-core/3.12.0/lib/rspec/core/pending.rb#135
    def mark_pending!(example, message_or_bool); end

    # source://rspec-core/3.12.0/lib/rspec/core/pending.rb#124
    def mark_skipped!(example, message_or_bool); end
  end
end

# source://rspec-core/3.12.0/lib/rspec/core/pending.rb#29
RSpec::Core::Pending::NOT_YET_IMPLEMENTED = T.let(T.unsafe(nil), String)

# source://rspec-core/3.12.0/lib/rspec/core/pending.rb#26
RSpec::Core::Pending::NO_REASON_GIVEN = T.let(T.unsafe(nil), String)

class RSpec::Core::Pending::PendingExampleFixedError < ::StandardError; end

class RSpec::Core::Pending::SkipDeclaredInExample < ::StandardError
  # source://rspec-core/3.12.0/lib/rspec/core/pending.rb#11
  def initialize(argument); end

  # source://rspec-core/3.12.0/lib/rspec/core/pending.rb#9
  def argument; end
end

class RSpec::Core::Profiler
  # source://rspec-core/3.12.0/lib/rspec/core/profiler.rb#7
  def initialize; end

  # source://rspec-core/3.12.0/lib/rspec/core/profiler.rb#20
  def example_group_finished(notification); end

  # source://rspec-core/3.12.0/lib/rspec/core/profiler.rb#13
  def example_group_started(notification); end

  # source://rspec-core/3.12.0/lib/rspec/core/profiler.rb#11
  def example_groups; end

  # source://rspec-core/3.12.0/lib/rspec/core/profiler.rb#28
  def example_started(notification); end
end

# source://rspec-core/3.12.0/lib/rspec/core/profiler.rb#5
RSpec::Core::Profiler::NOTIFICATIONS = T.let(T.unsafe(nil), Array)

class RSpec::Core::Reporter
  # source://rspec-core/3.12.0/lib/rspec/core/reporter.rb#14
  def initialize(configuration); end

  # source://rspec-core/3.12.0/lib/rspec/core/reporter.rb#214
  def abort_with(msg, exit_status); end

  # source://rspec-core/3.12.0/lib/rspec/core/reporter.rb#193
  def close_after; end

  # source://rspec-core/3.12.0/lib/rspec/core/reporter.rb#155
  def deprecation(hash); end

  # source://rspec-core/3.12.0/lib/rspec/core/reporter.rb#143
  def example_failed(example); end

  # source://rspec-core/3.12.0/lib/rspec/core/reporter.rb#133
  def example_finished(example); end

  # source://rspec-core/3.12.0/lib/rspec/core/reporter.rb#122
  def example_group_finished(group); end

  # source://rspec-core/3.12.0/lib/rspec/core/reporter.rb#117
  def example_group_started(group); end

  # source://rspec-core/3.12.0/lib/rspec/core/reporter.rb#138
  def example_passed(example); end

  # source://rspec-core/3.12.0/lib/rspec/core/reporter.rb#149
  def example_pending(example); end

  # source://rspec-core/3.12.0/lib/rspec/core/reporter.rb#127
  def example_started(example); end

  # source://rspec-core/3.12.0/lib/rspec/core/reporter.rb#28
  def examples; end

  # source://rspec-core/3.12.0/lib/rspec/core/reporter.rb#84
  def exit_early(exit_code); end

  # source://rspec-core/3.12.0/lib/rspec/core/reporter.rb#221
  def fail_fast_limit_met?; end

  # source://rspec-core/3.12.0/lib/rspec/core/reporter.rb#28
  def failed_examples; end

  # source://rspec-core/3.12.0/lib/rspec/core/reporter.rb#173
  def finish; end

  # source://rspec-core/3.12.0/lib/rspec/core/reporter.rb#99
  def message(message); end

  # source://rspec-core/3.12.0/lib/rspec/core/reporter.rb#206
  def notify(event, notification); end

  # source://rspec-core/3.12.0/lib/rspec/core/reporter.rb#163
  def notify_non_example_exception(exception, context_description); end

  # source://rspec-core/3.12.0/lib/rspec/core/reporter.rb#28
  def pending_examples; end

  # source://rspec-core/3.12.0/lib/rspec/core/reporter.rb#45
  def prepare_default(loader, output_stream, deprecation_stream); end

  # source://rspec-core/3.12.0/lib/rspec/core/reporter.rb#108
  def publish(event, options = T.unsafe(nil)); end

  # source://rspec-core/3.12.0/lib/rspec/core/reporter.rb#37
  def register_listener(listener, *notifications); end

  # source://rspec-core/3.12.0/lib/rspec/core/reporter.rb#52
  def registered_listeners(notification); end

  # source://rspec-core/3.12.0/lib/rspec/core/reporter.rb#71
  def report(expected_example_count); end

  # source://rspec-core/3.12.0/lib/rspec/core/reporter.rb#89
  def start(expected_example_count, time = T.unsafe(nil)); end

  # source://rspec-core/3.12.0/lib/rspec/core/reporter.rb#200
  def stop; end

  private

  # source://rspec-core/3.12.0/lib/rspec/core/reporter.rb#242
  def close; end

  # source://rspec-core/3.12.0/lib/rspec/core/reporter.rb#233
  def ensure_listeners_ready; end

  # source://rspec-core/3.12.0/lib/rspec/core/reporter.rb#246
  def mute_profile_output?; end

  # source://rspec-core/3.12.0/lib/rspec/core/reporter.rb#252
  def seed_used?; end
end

# source://rspec-core/3.12.0/lib/rspec/core/reporter.rb#6
RSpec::Core::Reporter::RSPEC_NOTIFICATIONS = T.let(T.unsafe(nil), RSpec::Core::Set)

module RSpec::Core::RubyProject
  private

  # source://rspec-core/3.12.0/lib/rspec/core/ruby_project.rb#12
  def add_dir_to_load_path(dir); end

  # source://rspec-core/3.12.0/lib/rspec/core/ruby_project.rb#8
  def add_to_load_path(*dirs); end

  # source://rspec-core/3.12.0/lib/rspec/core/ruby_project.rb#28
  def ascend_until; end

  # source://rspec-core/3.12.0/lib/rspec/core/ruby_project.rb#20
  def determine_root; end

  # source://rspec-core/3.12.0/lib/rspec/core/ruby_project.rb#24
  def find_first_parent_containing(dir); end

  # source://rspec-core/3.12.0/lib/rspec/core/ruby_project.rb#16
  def root; end

  class << self
    # source://rspec-core/3.12.0/lib/rspec/core/ruby_project.rb#12
    def add_dir_to_load_path(dir); end

    # source://rspec-core/3.12.0/lib/rspec/core/ruby_project.rb#8
    def add_to_load_path(*dirs); end

    # source://rspec-core/3.12.0/lib/rspec/core/ruby_project.rb#28
    def ascend_until; end

    # source://rspec-core/3.12.0/lib/rspec/core/ruby_project.rb#20
    def determine_root; end

    # source://rspec-core/3.12.0/lib/rspec/core/ruby_project.rb#24
    def find_first_parent_containing(dir); end

    # source://rspec-core/3.12.0/lib/rspec/core/ruby_project.rb#16
    def root; end
  end
end

class RSpec::Core::Runner
  # source://rspec-core/3.12.0/lib/rspec/core/runner.rb#75
  def initialize(options, configuration = T.unsafe(nil), world = T.unsafe(nil)); end

  # source://rspec-core/3.12.0/lib/rspec/core/runner.rb#7
  def configuration; end

  # source://rspec-core/3.12.0/lib/rspec/core/runner.rb#129
  def configure(err, out); end

  # source://rspec-core/3.12.0/lib/rspec/core/runner.rb#190
  def exit_code(examples_passed = T.unsafe(nil)); end

  # source://rspec-core/3.12.0/lib/rspec/core/runner.rb#7
  def options; end

  # source://rspec-core/3.12.0/lib/rspec/core/runner.rb#85
  def run(err, out); end

  # source://rspec-core/3.12.0/lib/rspec/core/runner.rb#113
  def run_specs(example_groups); end

  # source://rspec-core/3.12.0/lib/rspec/core/runner.rb#98
  def setup(err, out); end

  # source://rspec-core/3.12.0/lib/rspec/core/runner.rb#7
  def world; end

  private

  # source://rspec-core/3.12.0/lib/rspec/core/runner.rb#199
  def persist_example_statuses; end

  class << self
    # source://rspec-core/3.12.0/lib/rspec/core/runner.rb#16
    def autorun; end

    # source://rspec-core/3.12.0/lib/rspec/core/runner.rb#141
    def autorun_disabled?; end

    # source://rspec-core/3.12.0/lib/rspec/core/runner.rb#136
    def disable_autorun!; end

    # source://rspec-core/3.12.0/lib/rspec/core/runner.rb#180
    def handle_interrupt; end

    # source://rspec-core/3.12.0/lib/rspec/core/runner.rb#146
    def installed_at_exit?; end

    # source://rspec-core/3.12.0/lib/rspec/core/runner.rb#43
    def invoke; end

    # source://rspec-core/3.12.0/lib/rspec/core/runner.rb#29
    def perform_at_exit; end

    # source://rspec-core/3.12.0/lib/rspec/core/runner.rb#64
    def run(args, err = T.unsafe(nil), out = T.unsafe(nil)); end

    # source://rspec-core/3.12.0/lib/rspec/core/runner.rb#151
    def running_in_drb?; end

    # source://rspec-core/3.12.0/lib/rspec/core/runner.rb#175
    def trap_interrupt; end
  end
end

class RSpec::Core::Set
  include ::Enumerable

  # source://rspec-core/3.12.0/lib/rspec/core/set.rb#14
  def initialize(array = T.unsafe(nil)); end

  # source://rspec-core/3.12.0/lib/rspec/core/set.rb#23
  def <<(key); end

  # source://rspec-core/3.12.0/lib/rspec/core/set.rb#48
  def clear; end

  # source://rspec-core/3.12.0/lib/rspec/core/set.rb#28
  def delete(key); end

  # source://rspec-core/3.12.0/lib/rspec/core/set.rb#32
  def each(&block); end

  # source://rspec-core/3.12.0/lib/rspec/core/set.rb#19
  def empty?; end

  # source://rspec-core/3.12.0/lib/rspec/core/set.rb#37
  def include?(key); end

  # source://rspec-core/3.12.0/lib/rspec/core/set.rb#41
  def merge(values); end
end

module RSpec::Core::SharedContext
  # source://rspec-core/3.12.0/lib/rspec/core/shared_context.rb#28
  def __shared_context_recordings; end

  # source://rspec-core/3.12.0/lib/rspec/core/shared_context.rb#42
  def after(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/shared_context.rb#42
  def append_after(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/shared_context.rb#42
  def append_before(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/shared_context.rb#42
  def around(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/shared_context.rb#42
  def before(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/shared_context.rb#42
  def context(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/shared_context.rb#42
  def describe(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/shared_context.rb#42
  def hooks(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/shared_context.rb#21
  def included(group); end

  # source://rspec-core/3.12.0/lib/rspec/core/shared_context.rb#42
  def let(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/shared_context.rb#42
  def let!(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/shared_context.rb#42
  def prepend_after(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/shared_context.rb#42
  def prepend_before(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/shared_context.rb#42
  def subject(*args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/shared_context.rb#42
  def subject!(*args, &block); end

  class << self
    # source://rspec-core/3.12.0/lib/rspec/core/shared_context.rb#40
    def record(methods); end
  end
end

class RSpec::Core::SharedContext::Recording < ::Struct
  def args; end
  def args=(_); end
  def block; end
  def block=(_); end
  def method_name; end
  def method_name=(_); end

  # source://rspec-core/3.12.0/lib/rspec/core/shared_context.rb#34
  def playback_onto(group); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

module RSpec::Core::SharedExampleGroup
  # source://rspec-core/3.12.0/lib/rspec/core/shared_example_group.rb#90
  def shared_context(name, *args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/shared_example_group.rb#90
  def shared_examples(name, *args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/shared_example_group.rb#90
  def shared_examples_for(name, *args, &block); end
end

class RSpec::Core::SharedExampleGroup::Registry
  # source://rspec-core/3.12.0/lib/rspec/core/shared_example_group.rb#150
  def add(context, name, *metadata_args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/shared_example_group.rb#174
  def find(lookup_contexts, name); end

  private

  # source://rspec-core/3.12.0/lib/rspec/core/shared_example_group.rb#257
  def ensure_block_has_source_location(_block); end

  # source://rspec-core/3.12.0/lib/rspec/core/shared_example_group.rb#245
  def formatted_location(block); end

  # source://rspec-core/3.12.0/lib/rspec/core/shared_example_group.rb#189
  def legacy_add(context, name, *metadata_args, &block); end

  # source://rspec-core/3.12.0/lib/rspec/core/shared_example_group.rb#204
  def shared_example_groups; end

  # source://rspec-core/3.12.0/lib/rspec/core/shared_example_group.rb#208
  def valid_name?(candidate); end

  # source://rspec-core/3.12.0/lib/rspec/core/shared_example_group.rb#215
  def warn_if_key_taken(context, key, new_block); end
end

module RSpec::Core::SharedExampleGroup::TopLevelDSL
  class << self
    # source://rspec-core/3.12.0/lib/rspec/core/shared_example_group.rb#108
    def definitions; end

    # source://rspec-core/3.12.0/lib/rspec/core/shared_example_group.rb#126
    def expose_globally!; end

    # source://rspec-core/3.12.0/lib/rspec/core/shared_example_group.rb#119
    def exposed_globally?; end

    # source://rspec-core/3.12.0/lib/rspec/core/shared_example_group.rb#135
    def remove_globally!; end
  end
end

class RSpec::Core::SharedExampleGroupInclusionStackFrame
  # source://rspec-core/3.12.0/lib/rspec/core/example_group.rb#789
  def initialize(shared_group_name, inclusion_location); end

  # source://rspec-core/3.12.0/lib/rspec/core/example_group.rb#805
  def description; end

  # source://rspec-core/3.12.0/lib/rspec/core/example_group.rb#795
  def formatted_inclusion_location; end

  # source://rspec-core/3.12.0/lib/rspec/core/example_group.rb#786
  def inclusion_location; end

  # source://rspec-core/3.12.0/lib/rspec/core/example_group.rb#784
  def shared_group_name; end

  class << self
    # source://rspec-core/3.12.0/lib/rspec/core/example_group.rb#811
    def current_backtrace; end

    # source://rspec-core/3.12.0/lib/rspec/core/example_group.rb#829
    def shared_example_group_inclusions; end

    # source://rspec-core/3.12.0/lib/rspec/core/example_group.rb#816
    def with_frame(name, location); end
  end
end

class RSpec::Core::SharedExampleGroupModule < ::Module
  # source://rspec-core/3.12.0/lib/rspec/core/shared_example_group.rb#13
  def initialize(description, definition, metadata); end

  # source://rspec-core/3.12.0/lib/rspec/core/shared_example_group.rb#11
  def definition; end

  # source://rspec-core/3.12.0/lib/rspec/core/shared_example_group.rb#34
  def include_in(klass, inclusion_line, args, customization_block); end

  # source://rspec-core/3.12.0/lib/rspec/core/shared_example_group.rb#28
  def included(klass); end

  # source://rspec-core/3.12.0/lib/rspec/core/shared_example_group.rb#20
  def inspect; end

  # source://rspec-core/3.12.0/lib/rspec/core/shared_example_group.rb#20
  def to_s; end
end

module RSpec::Core::ShellEscape
  private

  # source://rspec-core/3.12.0/lib/rspec/core/shell_escape.rb#32
  def conditionally_quote(id); end

  # source://rspec-core/3.12.0/lib/rspec/core/shell_escape.rb#19
  def escape(shell_command); end

  # source://rspec-core/3.12.0/lib/rspec/core/shell_escape.rb#8
  def quote(argument); end

  # source://rspec-core/3.12.0/lib/rspec/core/shell_escape.rb#37
  def shell_allows_unquoted_ids?; end

  class << self
    # source://rspec-core/3.12.0/lib/rspec/core/shell_escape.rb#32
    def conditionally_quote(id); end

    # source://rspec-core/3.12.0/lib/rspec/core/shell_escape.rb#19
    def escape(shell_command); end

    # source://rspec-core/3.12.0/lib/rspec/core/shell_escape.rb#8
    def quote(argument); end

    # source://rspec-core/3.12.0/lib/rspec/core/shell_escape.rb#37
    def shell_allows_unquoted_ids?; end
  end
end

# source://rspec-core/3.12.0/lib/rspec/core/shell_escape.rb#30
RSpec::Core::ShellEscape::SHELLS_ALLOWING_UNQUOTED_IDS = T.let(T.unsafe(nil), Array)

class RSpec::Core::SuiteHookContext < ::RSpec::Core::Example
  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#652
  def initialize(hook_description, reporter); end

  # source://rspec-core/3.12.0/lib/rspec/core/example.rb#659
  def set_exception(exception); end
end

class RSpec::Core::Time
  class << self
    def now(in: T.unsafe(nil)); end
  end
end

module RSpec::Core::Version; end

# source://rspec-core/3.12.0/lib/rspec/core/version.rb#6
RSpec::Core::Version::STRING = T.let(T.unsafe(nil), String)

module RSpec::Core::Warnings
  # source://rspec-core/3.12.0/lib/rspec/core/warnings.rb#10
  def deprecate(deprecated, data = T.unsafe(nil)); end

  # source://rspec-core/3.12.0/lib/rspec/core/warnings.rb#22
  def warn_deprecation(message, opts = T.unsafe(nil)); end

  # source://rspec-core/3.12.0/lib/rspec/core/warnings.rb#27
  def warn_with(message, options = T.unsafe(nil)); end
end

class RSpec::Core::World
  # source://rspec-core/3.12.0/lib/rspec/core/world.rb#26
  def initialize(configuration = T.unsafe(nil)); end

  # source://rspec-core/3.12.0/lib/rspec/core/world.rb#115
  def all_example_groups; end

  # source://rspec-core/3.12.0/lib/rspec/core/world.rb#120
  def all_examples; end

  # source://rspec-core/3.12.0/lib/rspec/core/world.rb#226
  def announce_exclusion_filter(announcements); end

  # source://rspec-core/3.12.0/lib/rspec/core/world.rb#171
  def announce_filters; end

  # source://rspec-core/3.12.0/lib/rspec/core/world.rb#217
  def announce_inclusion_filter(announcements); end

  # source://rspec-core/3.12.0/lib/rspec/core/world.rb#210
  def everything_filtered_message; end

  # source://rspec-core/3.12.0/lib/rspec/core/world.rb#109
  def example_count(groups = T.unsafe(nil)); end

  # source://rspec-core/3.12.0/lib/rspec/core/world.rb#8
  def example_group_counts_by_spec_file; end

  # source://rspec-core/3.12.0/lib/rspec/core/world.rb#8
  def example_groups; end

  # source://rspec-core/3.12.0/lib/rspec/core/world.rb#102
  def exclusion_filter; end

  # source://rspec-core/3.12.0/lib/rspec/core/world.rb#69
  def filter_manager; end

  # source://rspec-core/3.12.0/lib/rspec/core/world.rb#8
  def filtered_examples; end

  # source://rspec-core/3.12.0/lib/rspec/core/world.rb#97
  def inclusion_filter; end

  # source://rspec-core/3.12.0/lib/rspec/core/world.rb#24
  def non_example_failure; end

  # source://rspec-core/3.12.0/lib/rspec/core/world.rb#24
  def non_example_failure=(_arg0); end

  # source://rspec-core/3.12.0/lib/rspec/core/world.rb#87
  def num_example_groups_defined_in(file); end

  # source://rspec-core/3.12.0/lib/rspec/core/world.rb#52
  def ordered_example_groups; end

  # source://rspec-core/3.12.0/lib/rspec/core/world.rb#140
  def preceding_declaration_line(absolute_file_name, filter_line); end

  # source://rspec-core/3.12.0/lib/rspec/core/world.rb#43
  def prepare_example_filtering; end

  # source://rspec-core/3.12.0/lib/rspec/core/world.rb#81
  def record(example_group); end

  # source://rspec-core/3.12.0/lib/rspec/core/world.rb#74
  def registered_example_group_files; end

  # source://rspec-core/3.12.0/lib/rspec/core/world.rb#205
  def report_filter_message(message); end

  # source://rspec-core/3.12.0/lib/rspec/core/world.rb#149
  def reporter; end

  # source://rspec-core/3.12.0/lib/rspec/core/world.rb#60
  def reset; end

  # source://rspec-core/3.12.0/lib/rspec/core/world.rb#18
  def rspec_is_quitting; end

  # source://rspec-core/3.12.0/lib/rspec/core/world.rb#18
  def rspec_is_quitting=(_arg0); end

  # source://rspec-core/3.12.0/lib/rspec/core/world.rb#92
  def shared_example_group_registry; end

  # source://rspec-core/3.12.0/lib/rspec/core/world.rb#154
  def source_from_file(path); end

  # source://rspec-core/3.12.0/lib/rspec/core/world.rb#164
  def syntax_highlighter; end

  # source://rspec-core/3.12.0/lib/rspec/core/world.rb#131
  def traverse_example_group_trees_until(&block); end

  # source://rspec-core/3.12.0/lib/rspec/core/world.rb#11
  def wants_to_quit; end

  # source://rspec-core/3.12.0/lib/rspec/core/world.rb#11
  def wants_to_quit=(_arg0); end

  private

  # source://rspec-core/3.12.0/lib/rspec/core/world.rb#234
  def descending_declaration_line_numbers_by_file; end

  # source://rspec-core/3.12.0/lib/rspec/core/world.rb#252
  def fail_if_config_and_cli_options_invalid; end
end

module RSpec::Core::World::Null
  class << self
    # source://rspec-core/3.12.0/lib/rspec/core/world.rb#280
    def all_example_groups; end

    # source://rspec-core/3.12.0/lib/rspec/core/world.rb#276
    def example_groups; end

    # source://rspec-core/3.12.0/lib/rspec/core/world.rb#265
    def non_example_failure; end

    # source://rspec-core/3.12.0/lib/rspec/core/world.rb#266
    def non_example_failure=(_); end

    # source://rspec-core/3.12.0/lib/rspec/core/world.rb#268
    def registered_example_group_files; end

    # source://rspec-core/3.12.0/lib/rspec/core/world.rb#272
    def traverse_example_group_trees_until; end
  end
end

module RSpec::ExampleGroups
  extend ::RSpec::Support::RecursiveConstMethods

  class << self
    # source://rspec-core/3.12.0/lib/rspec/core/example_group.rb#842
    def assign_const(group); end

    # source://rspec-core/3.12.0/lib/rspec/core/example_group.rb#862
    def base_name_for(group); end

    # source://rspec-core/3.12.0/lib/rspec/core/example_group.rb#850
    def constant_scope_for(group); end

    # source://rspec-core/3.12.0/lib/rspec/core/example_group.rb#895
    def disambiguate(name, const_scope); end

    # source://rspec-core/3.12.0/lib/rspec/core/example_group.rb#856
    def remove_all_constants; end
  end
end

# RSpec::Expectations provides a simple, readable API to express
# the expected outcomes in a code example. To express an expected
# outcome, wrap an object or block in `expect`, call `to` or `to_not`
# (aliased as `not_to`) and pass it a matcher object:
#
#     expect(order.total).to eq(Money.new(5.55, :USD))
#     expect(list).to include(user)
#     expect(message).not_to match(/foo/)
#     expect { do_something }.to raise_error
#
# The last form (the block form) is needed to match against ruby constructs
# that are not objects, but can only be observed when executing a block
# of code. This includes raising errors, throwing symbols, yielding,
# and changing values.
#
# When `expect(...).to` is invoked with a matcher, it turns around
# and calls `matcher.matches?(<object wrapped by expect>)`.  For example,
# in the expression:
#
#     expect(order.total).to eq(Money.new(5.55, :USD))
#
# ...`eq(Money.new(5.55, :USD))` returns a matcher object, and it results
# in the equivalent of `eq.matches?(order.total)`. If `matches?` returns
# `true`, the expectation is met and execution continues. If `false`, then
# the spec fails with the message returned by `eq.failure_message`.
#
# Given the expression:
#
#     expect(order.entries).not_to include(entry)
#
# ...the `not_to` method (also available as `to_not`) invokes the equivalent of
# `include.matches?(order.entries)`, but it interprets `false` as success, and
# `true` as a failure, using the message generated by
# `include.failure_message_when_negated`.
#
# rspec-expectations ships with a standard set of useful matchers, and writing
# your own matchers is quite simple.
#
# See [RSpec::Matchers](../RSpec/Matchers) for more information about the
# built-in matchers that ship with rspec-expectations, and how to write your
# own custom matchers.
module RSpec::Expectations
  class << self
    # The configuration object.
    #
    # @return [RSpec::Expectations::Configuration] the configuration object
    #
    # source://rspec-expectations//lib/rspec/expectations/configuration.rb#223
    def configuration; end

    # @private
    #
    # source://rspec-expectations//lib/rspec/expectations/fail_with.rb#13
    def differ; end

    # Raises an RSpec::Expectations::ExpectationNotMetError with message.
    # Adds a diff to the failure message when `expected` and `actual` are
    # both present.
    #
    # @param message [String]
    # @param expected [Object]
    # @param actual [Object]
    #
    # source://rspec-expectations//lib/rspec/expectations/fail_with.rb#27
    def fail_with(message, expected = T.unsafe(nil), actual = T.unsafe(nil)); end
  end
end

# Validates the provided matcher to ensure it supports block
# expectations, in order to avoid user confusion when they
# use a block thinking the expectation will be on the return
# value of the block rather than the block itself.
#
# @private
class RSpec::Expectations::BlockExpectationTarget < ::RSpec::Expectations::ExpectationTarget
  # source://rspec-expectations//lib/rspec/expectations/expectation_target.rb#142
  def not_to(matcher, message = T.unsafe(nil), &block); end

  # source://rspec-expectations//lib/rspec/expectations/expectation_target.rb#137
  def to(matcher, message = T.unsafe(nil), &block); end

  # source://rspec-expectations//lib/rspec/expectations/expectation_target.rb#142
  def to_not(matcher, message = T.unsafe(nil), &block); end

  private

  # @raise [ExpectationNotMetError]
  #
  # source://rspec-expectations//lib/rspec/expectations/expectation_target.rb#150
  def enforce_block_expectation(matcher); end

  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/expectations/expectation_target.rb#158
  def supports_block_expectations?(matcher); end
end

# @private
class RSpec::Expectations::BlockSnippetExtractor
  # @return [BlockSnippetExtractor] a new instance of BlockSnippetExtractor
  #
  # source://rspec-expectations//lib/rspec/expectations/block_snippet_extractor.rb#17
  def initialize(proc, method_name); end

  # Ideally we should properly handle indentations of multiline snippet,
  # but it's not implemented yet since because we use result of this method only when it's a
  # single line and implementing the logic introduces additional complexity.
  #
  # source://rspec-expectations//lib/rspec/expectations/block_snippet_extractor.rb#25
  def body_content_lines; end

  # rubocop should properly handle `Struct.new {}` as an inner class definition.
  #
  # source://rspec-expectations//lib/rspec/expectations/block_snippet_extractor.rb#7
  def method_name; end

  # rubocop should properly handle `Struct.new {}` as an inner class definition.
  #
  # source://rspec-expectations//lib/rspec/expectations/block_snippet_extractor.rb#7
  def proc; end

  private

  # source://rspec-expectations//lib/rspec/expectations/block_snippet_extractor.rb#60
  def beginning_line_number; end

  # source://rspec-expectations//lib/rspec/expectations/block_snippet_extractor.rb#39
  def block_token_extractor; end

  # source://rspec-expectations//lib/rspec/expectations/block_snippet_extractor.rb#56
  def file_path; end

  # source://rspec-expectations//lib/rspec/expectations/block_snippet_extractor.rb#31
  def raw_body_lines; end

  # source://rspec-expectations//lib/rspec/expectations/block_snippet_extractor.rb#35
  def raw_body_snippet; end

  # @raise [TargetNotFoundError]
  #
  # source://rspec-expectations//lib/rspec/expectations/block_snippet_extractor.rb#44
  def source; end

  # source://rspec-expectations//lib/rspec/expectations/block_snippet_extractor.rb#64
  def source_location; end

  class << self
    # source://rspec-expectations//lib/rspec/expectations/block_snippet_extractor.rb#9
    def try_extracting_single_line_body_of(proc, method_name); end
  end
end

class RSpec::Expectations::BlockSnippetExtractor::AmbiguousTargetError < ::RSpec::Expectations::BlockSnippetExtractor::Error; end

# Locates target block with node information (semantics), which tokens don't have.
#
# @private
class RSpec::Expectations::BlockSnippetExtractor::BlockLocator < ::Struct
  # Returns the value of attribute beginning_line_number
  #
  # @return [Object] the current value of beginning_line_number
  def beginning_line_number; end

  # Sets the attribute beginning_line_number
  #
  # @param value [Object] the value to set the attribute beginning_line_number to.
  # @return [Object] the newly set value
  def beginning_line_number=(_); end

  # source://rspec-expectations//lib/rspec/expectations/block_snippet_extractor.rb#203
  def body_content_locations; end

  # source://rspec-expectations//lib/rspec/expectations/block_snippet_extractor.rb#199
  def method_call_location; end

  # Returns the value of attribute method_name
  #
  # @return [Object] the current value of method_name
  def method_name; end

  # Sets the attribute method_name
  #
  # @param value [Object] the value to set the attribute method_name to.
  # @return [Object] the newly set value
  def method_name=(_); end

  # Returns the value of attribute source
  #
  # @return [Object] the current value of source
  def source; end

  # Sets the attribute source
  #
  # @param value [Object] the value to set the attribute source to.
  # @return [Object] the newly set value
  def source=(_); end

  private

  # source://rspec-expectations//lib/rspec/expectations/block_snippet_extractor.rb#216
  def block_body_node; end

  # source://rspec-expectations//lib/rspec/expectations/block_snippet_extractor.rb#221
  def block_wrapper_node; end

  # source://rspec-expectations//lib/rspec/expectations/block_snippet_extractor.rb#232
  def candidate_block_wrapper_nodes; end

  # source://rspec-expectations//lib/rspec/expectations/block_snippet_extractor.rb#241
  def candidate_method_ident_nodes; end

  # source://rspec-expectations//lib/rspec/expectations/block_snippet_extractor.rb#209
  def method_ident_node; end

  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/expectations/block_snippet_extractor.rb#247
  def method_ident_node?(node); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# Performs extraction of block body snippet using tokens,
# which cannot be done with node information.
#
# @private
class RSpec::Expectations::BlockSnippetExtractor::BlockTokenExtractor < ::Struct
  # @return [BlockTokenExtractor] a new instance of BlockTokenExtractor
  #
  # source://rspec-expectations//lib/rspec/expectations/block_snippet_extractor.rb#78
  def initialize(*_arg0); end

  # Returns the value of attribute beginning_line_number
  #
  # @return [Object] the current value of beginning_line_number
  def beginning_line_number; end

  # Sets the attribute beginning_line_number
  #
  # @param value [Object] the value to set the attribute beginning_line_number to.
  # @return [Object] the newly set value
  def beginning_line_number=(_); end

  # Returns the value of attribute body_tokens.
  #
  # source://rspec-expectations//lib/rspec/expectations/block_snippet_extractor.rb#76
  def body_tokens; end

  # Returns the value of attribute method_name
  #
  # @return [Object] the current value of method_name
  def method_name; end

  # Sets the attribute method_name
  #
  # @param value [Object] the value to set the attribute method_name to.
  # @return [Object] the newly set value
  def method_name=(_); end

  # Returns the value of attribute source
  #
  # @return [Object] the current value of source
  def source; end

  # Sets the attribute source
  #
  # @param value [Object] the value to set the attribute source to.
  # @return [Object] the newly set value
  def source=(_); end

  # Returns the value of attribute state.
  #
  # source://rspec-expectations//lib/rspec/expectations/block_snippet_extractor.rb#76
  def state; end

  private

  # source://rspec-expectations//lib/rspec/expectations/block_snippet_extractor.rb#124
  def after_beginning_of_args_state(token); end

  # source://rspec-expectations//lib/rspec/expectations/block_snippet_extractor.rb#128
  def after_beginning_of_body_state(token); end

  # source://rspec-expectations//lib/rspec/expectations/block_snippet_extractor.rb#107
  def after_method_call_state(token); end

  # source://rspec-expectations//lib/rspec/expectations/block_snippet_extractor.rb#111
  def after_opener_state(token); end

  # source://rspec-expectations//lib/rspec/expectations/block_snippet_extractor.rb#191
  def block_locator; end

  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/expectations/block_snippet_extractor.rb#185
  def correct_block?(body_tokens); end

  # source://rspec-expectations//lib/rspec/expectations/block_snippet_extractor.rb#141
  def finalize_pending_tokens!; end

  # source://rspec-expectations//lib/rspec/expectations/block_snippet_extractor.rb#95
  def finish!; end

  # source://rspec-expectations//lib/rspec/expectations/block_snippet_extractor.rb#147
  def finish_or_find_next_block_if_incorrect!; end

  # source://rspec-expectations//lib/rspec/expectations/block_snippet_extractor.rb#168
  def handle_closer_token(token); end

  # source://rspec-expectations//lib/rspec/expectations/block_snippet_extractor.rb#158
  def handle_opener_token(token); end

  # source://rspec-expectations//lib/rspec/expectations/block_snippet_extractor.rb#103
  def initial_state(token); end

  # source://rspec-expectations//lib/rspec/expectations/block_snippet_extractor.rb#99
  def invoke_state_handler(token); end

  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/expectations/block_snippet_extractor.rb#164
  def opener_token?(token); end

  # source://rspec-expectations//lib/rspec/expectations/block_snippet_extractor.rb#177
  def opener_token_stack; end

  # source://rspec-expectations//lib/rspec/expectations/block_snippet_extractor.rb#85
  def parse!; end

  # source://rspec-expectations//lib/rspec/expectations/block_snippet_extractor.rb#137
  def pending_tokens; end

  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/expectations/block_snippet_extractor.rb#181
  def pipe_token?(token); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

class RSpec::Expectations::BlockSnippetExtractor::Error < ::StandardError; end
class RSpec::Expectations::BlockSnippetExtractor::TargetNotFoundError < ::RSpec::Expectations::BlockSnippetExtractor::Error; end

# Provides configuration options for rspec-expectations.
# If you are using rspec-core, you can access this via a
# block passed to `RSpec::Core::Configuration#expect_with`.
# Otherwise, you can access it via RSpec::Expectations.configuration.
#
# @example
#   RSpec.configure do |rspec|
#   rspec.expect_with :rspec do |c|
#   # c is the config object
#   end
#   end
#
#   # or
#
#   RSpec::Expectations.configuration
class RSpec::Expectations::Configuration
  # @return [Configuration] a new instance of Configuration
  #
  # source://rspec-expectations//lib/rspec/expectations/configuration.rb#29
  def initialize; end

  # Adds `should` and `should_not` to the given classes
  # or modules. This can be used to ensure `should` works
  # properly on things like proxy objects (particular
  # `Delegator`-subclassed objects on 1.8).
  #
  # @param modules [Array<Module>] the list of classes or modules
  #   to add `should` and `should_not` to.
  #
  # source://rspec-expectations//lib/rspec/expectations/configuration.rb#112
  def add_should_and_should_not_to(*modules); end

  # Sets or gets the backtrace formatter. The backtrace formatter should
  # implement `#format_backtrace(Array<String>)`. This is used
  # to format backtraces of errors handled by the `raise_error`
  # matcher.
  #
  # If you are using rspec-core, rspec-core's backtrace formatting
  # will be used (including respecting the presence or absence of
  # the `--backtrace` option).
  #
  # source://rspec-expectations//lib/rspec/expectations/configuration.rb#129
  def backtrace_formatter; end

  # Sets or gets the backtrace formatter. The backtrace formatter should
  # implement `#format_backtrace(Array<String>)`. This is used
  # to format backtraces of errors handled by the `raise_error`
  # matcher.
  #
  # If you are using rspec-core, rspec-core's backtrace formatting
  # will be used (including respecting the presence or absence of
  # the `--backtrace` option).
  #
  # source://rspec-expectations//lib/rspec/expectations/configuration.rb#128
  def backtrace_formatter=(_arg0); end

  # Indicates whether or not diffs should be colored.
  # Delegates to rspec-core's color option if rspec-core
  # is loaded; otherwise you can set it here.
  #
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/expectations/configuration.rb#88
  def color?; end

  # @private
  #
  # source://rspec-expectations//lib/rspec/expectations/configuration.rb#216
  def false_positives_handler; end

  # Sets if custom matcher descriptions and failure messages
  # should include clauses from methods defined using `chain`.
  #
  # @param value [Boolean]
  #
  # source://rspec-expectations//lib/rspec/expectations/configuration.rb#140
  def include_chain_clauses_in_custom_matcher_descriptions=(_arg0); end

  # Indicates whether or not custom matcher descriptions and failure messages
  # should include clauses from methods defined using `chain`. It is
  # false by default for backwards compatibility.
  #
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/expectations/configuration.rb#145
  def include_chain_clauses_in_custom_matcher_descriptions?; end

  # Configures the maximum character length that RSpec will print while
  # formatting an object. You can set length to nil to prevent RSpec from
  # doing truncation.
  #
  # @example
  #   RSpec.configure do |rspec|
  #   rspec.expect_with :rspec do |c|
  #   c.max_formatted_output_length = 200
  #   end
  #   end
  # @param length [Fixnum] the number of characters to limit the formatted output to.
  #
  # source://rspec-expectations//lib/rspec/expectations/configuration.rb#70
  def max_formatted_output_length=(length); end

  # Indicates what RSpec will do about matcher use which will
  # potentially cause false positives in tests, generally you want to
  # avoid such scenarios so this defaults to `true`.
  #
  # source://rspec-expectations//lib/rspec/expectations/configuration.rb#206
  def on_potential_false_positives; end

  # Configures what RSpec will do about matcher use which will
  # potentially cause false positives in tests.
  #
  # @param behavior [Symbol] can be set to :warn, :raise or :nothing
  #
  # source://rspec-expectations//lib/rspec/expectations/configuration.rb#182
  def on_potential_false_positives=(behavior); end

  # @private
  #
  # source://rspec-expectations//lib/rspec/expectations/configuration.rb#150
  def reset_syntaxes_to_default; end

  # Returns the value of attribute strict_predicate_matchers.
  #
  # source://rspec-expectations//lib/rspec/expectations/configuration.rb#197
  def strict_predicate_matchers; end

  # Configures RSpec to check predicate matchers to `be(true)` / `be(false)` (strict),
  # or `be_truthy` / `be_falsey` (not strict).
  # Historically, the default was `false`, but `true` is recommended.
  #
  # @raise [ArgumentError]
  #
  # source://rspec-expectations//lib/rspec/expectations/configuration.rb#192
  def strict_predicate_matchers=(flag); end

  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/expectations/configuration.rb#199
  def strict_predicate_matchers?; end

  # The list of configured syntaxes.
  #
  # @example
  #   unless RSpec::Matchers.configuration.syntax.include?(:expect)
  #   raise "this RSpec extension gem requires the rspec-expectations `:expect` syntax"
  #   end
  # @return [Array<Symbol>] the list of configured syntaxes.
  #
  # source://rspec-expectations//lib/rspec/expectations/configuration.rb#80
  def syntax; end

  # Configures the supported syntax.
  #
  # @example
  #   RSpec.configure do |rspec|
  #   rspec.expect_with :rspec do |c|
  #   c.syntax = :should
  #   # or
  #   c.syntax = :expect
  #   # or
  #   c.syntax = [:should, :expect]
  #   end
  #   end
  # @param values [Array<Symbol>, Symbol] the syntaxes to enable
  #
  # source://rspec-expectations//lib/rspec/expectations/configuration.rb#46
  def syntax=(values); end

  # Configures whether RSpec will warn about matcher use which will
  # potentially cause false positives in tests.
  #
  # @param boolean [Boolean]
  #
  # source://rspec-expectations//lib/rspec/expectations/configuration.rb#168
  def warn_about_potential_false_positives=(boolean); end

  # Indicates whether RSpec will warn about matcher use which will
  # potentially cause false positives in tests, generally you want to
  # avoid such scenarios so this defaults to `true`.
  #
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/expectations/configuration.rb#211
  def warn_about_potential_false_positives?; end
end

# @private
#
# source://rspec-expectations//lib/rspec/expectations/configuration.rb#22
RSpec::Expectations::Configuration::FALSE_POSITIVE_BEHAVIOURS = T.let(T.unsafe(nil), Hash)

# Null implementation of a backtrace formatter used by default
# when rspec-core is not loaded. Does no filtering.
#
# @api private
module RSpec::Expectations::Configuration::NullBacktraceFormatter
  class << self
    # source://rspec-expectations//lib/rspec/expectations/configuration.rb#159
    def format_backtrace(backtrace); end
  end
end

# @private
module RSpec::Expectations::ExpectationHelper
  class << self
    # source://rspec-expectations//lib/rspec/expectations/handler.rb#5
    def check_message(msg); end

    # source://rspec-expectations//lib/rspec/expectations/handler.rb#33
    def handle_failure(matcher, message, failure_message_method); end

    # Returns an RSpec-3+ compatible matcher, wrapping a legacy one
    # in an adapter if necessary.
    #
    # @private
    #
    # source://rspec-expectations//lib/rspec/expectations/handler.rb#19
    def modern_matcher_from(matcher); end

    # source://rspec-expectations//lib/rspec/expectations/handler.rb#24
    def with_matcher(handler, matcher, message); end
  end
end

# Exception raised when an expectation fails.
#
# the user sets an expectation, it can't be caught in their
# code by a bare `rescue`.
#
# @api public
# @note We subclass Exception so that in a stub implementation if
class RSpec::Expectations::ExpectationNotMetError < ::Exception; end

# Wraps the target of an expectation.
#
# @example
#   expect(something)       # => ExpectationTarget wrapping something
#   expect { do_something } # => ExpectationTarget wrapping the block
#
#   # used with `to`
#   expect(actual).to eq(3)
#
#   # with `not_to`
#   expect(actual).not_to eq(3)
# @note `ExpectationTarget` is not intended to be instantiated
#   directly by users. Use `expect` instead.
class RSpec::Expectations::ExpectationTarget
  include ::RSpec::Expectations::ExpectationTarget::InstanceMethods

  # @api private
  # @return [ExpectationTarget] a new instance of ExpectationTarget
  #
  # source://rspec-expectations//lib/rspec/expectations/expectation_target.rb#31
  def initialize(value); end

  # @note this name aligns with `Minitest::Expectation` so that our
  #   {InstanceMethods} module can be included in that class when
  #   used in a Minitest context.
  # @return [Object] the target of the expectation
  #
  # source://rspec-expectations//lib/rspec/expectations/expectation_target.rb#28
  def target; end

  class << self
    # @private
    #
    # source://rspec-expectations//lib/rspec/expectations/expectation_target.rb#36
    def for(value, block); end
  end
end

# Defines instance {ExpectationTarget} instance methods. These are defined
# in a module so we can include it in `Minitest::Expectation` when
# `rspec/expectations/minitest_integration` is loaded in order to
# support usage with Minitest.
module RSpec::Expectations::ExpectationTarget::InstanceMethods
  # Runs the given expectation, passing if `matcher` returns false.
  #
  # @example
  #   expect(value).not_to eq(5)
  # @param matcher [Matcher]
  # @param message [String, Proc] optional message to display when the expectation fails
  # @return [Boolean] false if the negative expectation succeeds (else raises)
  # @see RSpec::Matchers
  #
  # source://rspec-expectations//lib/rspec/expectations/expectation_target.rb#76
  def not_to(matcher = T.unsafe(nil), message = T.unsafe(nil), &block); end

  # Runs the given expectation, passing if `matcher` returns true.
  #
  # @example
  #   expect(value).to eq(5)
  #   expect { perform }.to raise_error
  # @param matcher [Matcher]
  # @param message [String, Proc] optional message to display when the expectation fails
  # @return [Boolean] true if the expectation succeeds (else raises)
  # @see RSpec::Matchers
  #
  # source://rspec-expectations//lib/rspec/expectations/expectation_target.rb#63
  def to(matcher = T.unsafe(nil), message = T.unsafe(nil), &block); end

  # Runs the given expectation, passing if `matcher` returns false.
  #
  # @example
  #   expect(value).not_to eq(5)
  # @param matcher [Matcher]
  # @param message [String, Proc] optional message to display when the expectation fails
  # @return [Boolean] false if the negative expectation succeeds (else raises)
  # @see RSpec::Matchers
  #
  # source://rspec-expectations//lib/rspec/expectations/expectation_target.rb#76
  def to_not(matcher = T.unsafe(nil), message = T.unsafe(nil), &block); end

  private

  # @raise [ArgumentError]
  #
  # source://rspec-expectations//lib/rspec/expectations/expectation_target.rb#84
  def prevent_operator_matchers(verb); end
end

# Used as a sentinel value to be able to tell when the user
# did not pass an argument. We can't use `nil` for that because
# `nil` is a valid value to pass.
#
# @private
module RSpec::Expectations::ExpectationTarget::UndefinedValue; end

# @private
class RSpec::Expectations::FailureAggregator
  # @return [FailureAggregator] a new instance of FailureAggregator
  #
  # source://rspec-expectations//lib/rspec/expectations/failure_aggregator.rb#73
  def initialize(block_label, metadata); end

  # source://rspec-expectations//lib/rspec/expectations/failure_aggregator.rb#7
  def aggregate; end

  # Returns the value of attribute block_label.
  #
  # source://rspec-expectations//lib/rspec/expectations/failure_aggregator.rb#5
  def block_label; end

  # This method is defined to satisfy the callable interface
  # expected by `RSpec::Support.with_failure_notifier`.
  #
  # source://rspec-expectations//lib/rspec/expectations/failure_aggregator.rb#44
  def call(failure, options); end

  # source://rspec-expectations//lib/rspec/expectations/failure_aggregator.rb#34
  def failures; end

  # Returns the value of attribute metadata.
  #
  # source://rspec-expectations//lib/rspec/expectations/failure_aggregator.rb#5
  def metadata; end

  # source://rspec-expectations//lib/rspec/expectations/failure_aggregator.rb#38
  def other_errors; end

  private

  # Using `caller` performs better (and is simpler) than `raise` on most Rubies.
  #
  # source://rspec-expectations//lib/rspec/expectations/failure_aggregator.rb#68
  def assign_backtrace(failure); end

  # source://rspec-expectations//lib/rspec/expectations/failure_aggregator.rb#79
  def notify_aggregated_failures; end
end

# RSpec 3.0 was released with the class name misspelled. For SemVer compatibility,
# we will provide this misspelled alias until 4.0.
#
# @deprecated Use LegacyMatcherAdapter instead.
# @private
#
# source://rspec-expectations//lib/rspec/expectations/handler.rb#180
RSpec::Expectations::LegacyMacherAdapter = RSpec::Expectations::LegacyMatcherAdapter

# Wraps a matcher written against one of the legacy protocols in
# order to present the current protocol.
#
# @private
class RSpec::Expectations::LegacyMatcherAdapter < ::RSpec::Matchers::MatcherDelegator
  # @return [LegacyMatcherAdapter] a new instance of LegacyMatcherAdapter
  #
  # source://rspec-expectations//lib/rspec/expectations/handler.rb#114
  def initialize(matcher); end

  class << self
    # source://rspec-expectations//lib/rspec/expectations/handler.rb#124
    def wrap(matcher); end
  end
end

# Before RSpec 1.2, the failure message protocol was:
#   * `failure_message`
#   * `negative_failure_message`
#
# @private
class RSpec::Expectations::LegacyMatcherAdapter::RSpec1 < ::RSpec::Expectations::LegacyMatcherAdapter
  # source://rspec-expectations//lib/rspec/expectations/handler.rb#158
  def failure_message; end

  # source://rspec-expectations//lib/rspec/expectations/handler.rb#162
  def failure_message_when_negated; end

  class << self
    # Note: `failure_message` is part of the RSpec 3 protocol
    # (paired with `failure_message_when_negated`), so we don't check
    # for `failure_message` here.
    #
    # @return [Boolean]
    #
    # source://rspec-expectations//lib/rspec/expectations/handler.rb#169
    def interface_matches?(matcher); end
  end
end

# Starting in RSpec 1.2 (and continuing through all 2.x releases),
# the failure message protocol was:
#   * `failure_message_for_should`
#   * `failure_message_for_should_not`
#
# @private
class RSpec::Expectations::LegacyMatcherAdapter::RSpec2 < ::RSpec::Expectations::LegacyMatcherAdapter
  # source://rspec-expectations//lib/rspec/expectations/handler.rb#134
  def failure_message; end

  # source://rspec-expectations//lib/rspec/expectations/handler.rb#138
  def failure_message_when_negated; end

  class << self
    # @return [Boolean]
    #
    # source://rspec-expectations//lib/rspec/expectations/handler.rb#142
    def interface_matches?(matcher); end
  end
end

# Exception raised from `aggregate_failures` when multiple expectations fail.
#
# @note The constant is defined here but the extensive logic of this class
#   is lazily defined when `FailureAggregator` is autoloaded, since we do
#   not need to waste time defining that functionality unless
#   `aggregate_failures` is used.
class RSpec::Expectations::MultipleExpectationsNotMetError < ::RSpec::Expectations::ExpectationNotMetError
  # @return [MultipleExpectationsNotMetError] a new instance of MultipleExpectationsNotMetError
  #
  # source://rspec-expectations//lib/rspec/expectations/failure_aggregator.rb#136
  def initialize(failure_aggregator); end

  # @return [String] The user-assigned label for the aggregation block.
  #
  # source://rspec-expectations//lib/rspec/expectations/failure_aggregator.rb#111
  def aggregation_block_label; end

  # @return [Hash] The metadata hash passed to `aggregate_failures`.
  #
  # source://rspec-expectations//lib/rspec/expectations/failure_aggregator.rb#116
  def aggregation_metadata; end

  # @return [Array<Exception>] The list of expectation failures and other exceptions, combined.
  #
  # source://rspec-expectations//lib/rspec/expectations/failure_aggregator.rb#108
  def all_exceptions; end

  # return [String] A description of the failure/error counts.
  #
  # source://rspec-expectations//lib/rspec/expectations/failure_aggregator.rb#127
  def exception_count_description; end

  # @return [Array<RSpec::Expectations::ExpectationNotMetError>] The list of expectation failures.
  #
  # source://rspec-expectations//lib/rspec/expectations/failure_aggregator.rb#98
  def failures; end

  # @return [String] The fully formatted exception message.
  #
  # source://rspec-expectations//lib/rspec/expectations/failure_aggregator.rb#93
  def message; end

  # @return [Array<Exception>] The list of other exceptions.
  #
  # source://rspec-expectations//lib/rspec/expectations/failure_aggregator.rb#103
  def other_errors; end

  # @return [String] A summary of the failure, including the block label and a count of failures.
  #
  # source://rspec-expectations//lib/rspec/expectations/failure_aggregator.rb#121
  def summary; end

  private

  # source://rspec-expectations//lib/rspec/expectations/failure_aggregator.rb#168
  def backtrace_line(line); end

  # source://rspec-expectations//lib/rspec/expectations/failure_aggregator.rb#141
  def block_description; end

  # source://rspec-expectations//lib/rspec/expectations/failure_aggregator.rb#150
  def enumerated(exceptions, index_offset); end

  # source://rspec-expectations//lib/rspec/expectations/failure_aggregator.rb#180
  def enumerated_errors; end

  # source://rspec-expectations//lib/rspec/expectations/failure_aggregator.rb#176
  def enumerated_failures; end

  # source://rspec-expectations//lib/rspec/expectations/failure_aggregator.rb#158
  def exclusion_patterns; end

  # source://rspec-expectations//lib/rspec/expectations/failure_aggregator.rb#164
  def format_backtrace(backtrace); end

  # source://rspec-expectations//lib/rspec/expectations/failure_aggregator.rb#195
  def indentation; end

  # source://rspec-expectations//lib/rspec/expectations/failure_aggregator.rb#186
  def indented(failure_message, index); end

  # source://rspec-expectations//lib/rspec/expectations/failure_aggregator.rb#207
  def index_label(index); end

  # source://rspec-expectations//lib/rspec/expectations/failure_aggregator.rb#199
  def longest_index_label_width; end

  # source://rspec-expectations//lib/rspec/expectations/failure_aggregator.rb#146
  def pluralize(noun, count); end

  # source://rspec-expectations//lib/rspec/expectations/failure_aggregator.rb#203
  def width_of_label(index); end
end

# @private
class RSpec::Expectations::NegativeExpectationHandler
  class << self
    # @return [Boolean]
    #
    # source://rspec-expectations//lib/rspec/expectations/handler.rb#88
    def does_not_match?(matcher, actual, &block); end

    # source://rspec-expectations//lib/rspec/expectations/handler.rb#75
    def handle_matcher(actual, initial_matcher, custom_message = T.unsafe(nil), &block); end

    # source://rspec-expectations//lib/rspec/expectations/handler.rb#104
    def opposite_should_method; end

    # source://rspec-expectations//lib/rspec/expectations/handler.rb#100
    def should_method; end

    # source://rspec-expectations//lib/rspec/expectations/handler.rb#96
    def verb; end
  end
end

# @private
class RSpec::Expectations::PositiveExpectationHandler
  class << self
    # source://rspec-expectations//lib/rspec/expectations/handler.rb#47
    def handle_matcher(actual, initial_matcher, custom_message = T.unsafe(nil), &block); end

    # source://rspec-expectations//lib/rspec/expectations/handler.rb#68
    def opposite_should_method; end

    # source://rspec-expectations//lib/rspec/expectations/handler.rb#64
    def should_method; end

    # source://rspec-expectations//lib/rspec/expectations/handler.rb#60
    def verb; end
  end
end

# Provides methods for enabling and disabling the available
# syntaxes provided by rspec-expectations.
#
# @api private
module RSpec::Expectations::Syntax
  private

  # Determines where we add `should` and `should_not`.
  #
  # @api private
  #
  # source://rspec-expectations//lib/rspec/expectations/syntax.rb#11
  def default_should_host; end

  # Disables the `expect` syntax.
  #
  # @api private
  #
  # source://rspec-expectations//lib/rspec/expectations/syntax.rb#80
  def disable_expect(syntax_host = T.unsafe(nil)); end

  # Disables the `should` syntax.
  #
  # @api private
  #
  # source://rspec-expectations//lib/rspec/expectations/syntax.rb#57
  def disable_should(syntax_host = T.unsafe(nil)); end

  # Enables the `expect` syntax.
  #
  # @api private
  #
  # source://rspec-expectations//lib/rspec/expectations/syntax.rb#68
  def enable_expect(syntax_host = T.unsafe(nil)); end

  # Enables the `should` syntax.
  #
  # @api private
  #
  # source://rspec-expectations//lib/rspec/expectations/syntax.rb#38
  def enable_should(syntax_host = T.unsafe(nil)); end

  # Indicates whether or not the `expect` syntax is enabled.
  #
  # @api private
  #
  # source://rspec-expectations//lib/rspec/expectations/syntax.rb#96
  def expect_enabled?(syntax_host = T.unsafe(nil)); end

  # Indicates whether or not the `should` syntax is enabled.
  #
  # @api private
  #
  # source://rspec-expectations//lib/rspec/expectations/syntax.rb#90
  def should_enabled?(syntax_host = T.unsafe(nil)); end

  # Instructs rspec-expectations to warn on first usage of `should` or `should_not`.
  # Enabled by default. This is largely here to facilitate testing.
  #
  # @api private
  #
  # source://rspec-expectations//lib/rspec/expectations/syntax.rb#18
  def warn_about_should!; end

  # Generates a deprecation warning for the given method if no warning
  # has already been issued.
  #
  # @api private
  #
  # source://rspec-expectations//lib/rspec/expectations/syntax.rb#25
  def warn_about_should_unless_configured(method_name); end

  class << self
    # Determines where we add `should` and `should_not`.
    #
    # @api private
    #
    # source://rspec-expectations//lib/rspec/expectations/syntax.rb#11
    def default_should_host; end

    # Disables the `expect` syntax.
    #
    # @api private
    #
    # source://rspec-expectations//lib/rspec/expectations/syntax.rb#80
    def disable_expect(syntax_host = T.unsafe(nil)); end

    # Disables the `should` syntax.
    #
    # @api private
    #
    # source://rspec-expectations//lib/rspec/expectations/syntax.rb#57
    def disable_should(syntax_host = T.unsafe(nil)); end

    # Enables the `expect` syntax.
    #
    # @api private
    #
    # source://rspec-expectations//lib/rspec/expectations/syntax.rb#68
    def enable_expect(syntax_host = T.unsafe(nil)); end

    # Enables the `should` syntax.
    #
    # @api private
    #
    # source://rspec-expectations//lib/rspec/expectations/syntax.rb#38
    def enable_should(syntax_host = T.unsafe(nil)); end

    # Indicates whether or not the `expect` syntax is enabled.
    #
    # @api private
    # @return [Boolean]
    #
    # source://rspec-expectations//lib/rspec/expectations/syntax.rb#96
    def expect_enabled?(syntax_host = T.unsafe(nil)); end

    # Indicates whether or not the `should` syntax is enabled.
    #
    # @api private
    # @return [Boolean]
    #
    # source://rspec-expectations//lib/rspec/expectations/syntax.rb#90
    def should_enabled?(syntax_host = T.unsafe(nil)); end

    # Instructs rspec-expectations to warn on first usage of `should` or `should_not`.
    # Enabled by default. This is largely here to facilitate testing.
    #
    # @api private
    #
    # source://rspec-expectations//lib/rspec/expectations/syntax.rb#18
    def warn_about_should!; end

    # Generates a deprecation warning for the given method if no warning
    # has already been issued.
    #
    # @api private
    #
    # source://rspec-expectations//lib/rspec/expectations/syntax.rb#25
    def warn_about_should_unless_configured(method_name); end
  end
end

# Validates the provided matcher to ensure it supports block
# expectations, in order to avoid user confusion when they
# use a block thinking the expectation will be on the return
# value of the block rather than the block itself.
#
# @private
class RSpec::Expectations::ValueExpectationTarget < ::RSpec::Expectations::ExpectationTarget
  # source://rspec-expectations//lib/rspec/expectations/expectation_target.rb#104
  def not_to(matcher = T.unsafe(nil), message = T.unsafe(nil), &block); end

  # source://rspec-expectations//lib/rspec/expectations/expectation_target.rb#99
  def to(matcher = T.unsafe(nil), message = T.unsafe(nil), &block); end

  private

  # source://rspec-expectations//lib/rspec/expectations/expectation_target.rb#111
  def enforce_value_expectation(matcher); end

  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/expectations/expectation_target.rb#126
  def supports_value_expectations?(matcher); end
end

# @private
module RSpec::Expectations::Version; end

# source://rspec-expectations//lib/rspec/expectations/version.rb#5
RSpec::Expectations::Version::STRING = T.let(T.unsafe(nil), String)

# source://rspec-core/3.12.0/lib/rspec/core.rb#187
RSpec::MODULES_TO_AUTOLOAD = T.let(T.unsafe(nil), Hash)

# RSpec::Matchers provides a number of useful matchers we use to define
# expectations. Any object that implements the [matcher protocol](Matchers/MatcherProtocol)
# can be used as a matcher.
#
# ## Predicates
#
# In addition to matchers that are defined explicitly, RSpec will create
# custom matchers on the fly for any arbitrary predicate, giving your specs a
# much more natural language feel.
#
# A Ruby predicate is a method that ends with a "?" and returns true or false.
# Common examples are `empty?`, `nil?`, and `instance_of?`.
#
# All you need to do is write `expect(..).to be_` followed by the predicate
# without the question mark, and RSpec will figure it out from there.
# For example:
#
#     expect([]).to be_empty     # => [].empty?() | passes
#     expect([]).not_to be_empty # => [].empty?() | fails
#
# In addition to prefixing the predicate matchers with "be_", you can also use "be_a_"
# and "be_an_", making your specs read much more naturally:
#
#     expect("a string").to be_an_instance_of(String) # =>"a string".instance_of?(String) # passes
#
#     expect(3).to be_a_kind_of(Integer)          # => 3.kind_of?(Numeric)     | passes
#     expect(3).to be_a_kind_of(Numeric)          # => 3.kind_of?(Numeric)     | passes
#     expect(3).to be_an_instance_of(Integer)     # => 3.instance_of?(Integer) | passes
#     expect(3).not_to be_an_instance_of(Numeric) # => 3.instance_of?(Numeric) | fails
#
# RSpec will also create custom matchers for predicates like `has_key?`. To
# use this feature, just state that the object should have_key(:key) and RSpec will
# call has_key?(:key) on the target. For example:
#
#     expect(:a => "A").to have_key(:a)
#     expect(:a => "A").to have_key(:b) # fails
#
# You can use this feature to invoke any predicate that begins with "has_", whether it is
# part of the Ruby libraries (like `Hash#has_key?`) or a method you wrote on your own class.
#
# Note that RSpec does not provide composable aliases for these dynamic predicate
# matchers. You can easily define your own aliases, though:
#
#     RSpec::Matchers.alias_matcher :a_user_who_is_an_admin, :be_an_admin
#     expect(user_list).to include(a_user_who_is_an_admin)
#
# ## Alias Matchers
#
# With {RSpec::Matchers.alias_matcher}, you can easily create an
# alternate name for a given matcher.
#
# The description will also change according to the new name:
#
#     RSpec::Matchers.alias_matcher :a_list_that_sums_to, :sum_to
#     sum_to(3).description # => "sum to 3"
#     a_list_that_sums_to(3).description # => "a list that sums to 3"
#
# or you can specify a custom description like this:
#
#     RSpec::Matchers.alias_matcher :a_list_sorted_by, :be_sorted_by do |description|
#       description.sub("be sorted by", "a list sorted by")
#     end
#
#     be_sorted_by(:age).description # => "be sorted by age"
#     a_list_sorted_by(:age).description # => "a list sorted by age"
#
# ## Custom Matchers
#
# When you find that none of the stock matchers provide a natural feeling
# expectation, you can very easily write your own using RSpec's matcher DSL
# or writing one from scratch.
#
# ### Matcher DSL
#
# Imagine that you are writing a game in which players can be in various
# zones on a virtual board. To specify that bob should be in zone 4, you
# could say:
#
#     expect(bob.current_zone).to eql(Zone.new("4"))
#
# But you might find it more expressive to say:
#
#     expect(bob).to be_in_zone("4")
#
# and/or
#
#     expect(bob).not_to be_in_zone("3")
#
# You can create such a matcher like so:
#
#     RSpec::Matchers.define :be_in_zone do |zone|
#       match do |player|
#         player.in_zone?(zone)
#       end
#     end
#
# This will generate a <tt>be_in_zone</tt> method that returns a matcher
# with logical default messages for failures. You can override the failure
# messages and the generated description as follows:
#
#     RSpec::Matchers.define :be_in_zone do |zone|
#       match do |player|
#         player.in_zone?(zone)
#       end
#
#       failure_message do |player|
#         # generate and return the appropriate string.
#       end
#
#       failure_message_when_negated do |player|
#         # generate and return the appropriate string.
#       end
#
#       description do
#         # generate and return the appropriate string.
#       end
#     end
#
# Each of the message-generation methods has access to the block arguments
# passed to the <tt>create</tt> method (in this case, <tt>zone</tt>). The
# failure message methods (<tt>failure_message</tt> and
# <tt>failure_message_when_negated</tt>) are passed the actual value (the
# receiver of <tt>expect(..)</tt> or <tt>expect(..).not_to</tt>).
#
# ### Custom Matcher from scratch
#
# You could also write a custom matcher from scratch, as follows:
#
#     class BeInZone
#       def initialize(expected)
#         @expected = expected
#       end
#
#       def matches?(target)
#         @target = target
#         @target.current_zone.eql?(Zone.new(@expected))
#       end
#
#       def failure_message
#         "expected #{@target.inspect} to be in Zone #{@expected}"
#       end
#
#       def failure_message_when_negated
#         "expected #{@target.inspect} not to be in Zone #{@expected}"
#       end
#     end
#
# ... and a method like this:
#
#     def be_in_zone(expected)
#       BeInZone.new(expected)
#     end
#
# And then expose the method to your specs. This is normally done
# by including the method and the class in a module, which is then
# included in your spec:
#
#     module CustomGameMatchers
#       class BeInZone
#         # ...
#       end
#
#       def be_in_zone(expected)
#         # ...
#       end
#     end
#
#     describe "Player behaviour" do
#       include CustomGameMatchers
#       # ...
#     end
#
# or you can include in globally in a spec_helper.rb file <tt>require</tt>d
# from your spec file(s):
#
#     RSpec::configure do |config|
#       config.include(CustomGameMatchers)
#     end
#
# ### Making custom matchers composable
#
# RSpec's built-in matchers are designed to be composed, in expressions like:
#
#     expect(["barn", 2.45]).to contain_exactly(
#       a_value_within(0.1).of(2.5),
#       a_string_starting_with("bar")
#     )
#
# Custom matchers can easily participate in composed matcher expressions like these.
# Include {RSpec::Matchers::Composable} in your custom matcher to make it support
# being composed (matchers defined using the DSL have this included automatically).
# Within your matcher's `matches?` method (or the `match` block, if using the DSL),
# use `values_match?(expected, actual)` rather than `expected == actual`.
# Under the covers, `values_match?` is able to match arbitrary
# nested data structures containing a mix of both matchers and non-matcher objects.
# It uses `===` and `==` to perform the matching, considering the values to
# match if either returns `true`. The `Composable` mixin also provides some helper
# methods for surfacing the matcher descriptions within your matcher's description
# or failure messages.
#
# RSpec's built-in matchers each have a number of aliases that rephrase the matcher
# from a verb phrase (such as `be_within`) to a noun phrase (such as `a_value_within`),
# which reads better when the matcher is passed as an argument in a composed matcher
# expressions, and also uses the noun-phrase wording in the matcher's `description`,
# for readable failure messages. You can alias your custom matchers in similar fashion
# using {RSpec::Matchers.alias_matcher}.
#
# ## Negated Matchers
#
# Sometimes if you want to test for the opposite using a more descriptive name
# instead of using `not_to`, you can use {RSpec::Matchers.define_negated_matcher}:
#
#     RSpec::Matchers.define_negated_matcher :exclude, :include
#     include(1, 2).description # => "include 1 and 2"
#     exclude(1, 2).description # => "exclude 1 and 2"
#
# While the most obvious negated form may be to add a `not_` prefix,
# the failure messages you get with that form can be confusing (e.g.
# "expected [actual] to not [verb], but did not"). We've found it works
# best to find a more positive name for the negated form, such as
# `avoid_changing` rather than `not_change`.
module RSpec::Matchers
  extend ::RSpec::Matchers::DSL

  # Applied to a proc, specifies that its execution will cause some value to
  # change.
  #
  # You can either pass <tt>receiver</tt> and <tt>message</tt>, or a block,
  # but not both.
  #
  # When passing a block, it must use the `{ ... }` format, not
  # do/end, as `{ ... }` binds to the `change` method, whereas do/end
  # would errantly bind to the `expect(..).to` or `expect(...).not_to` method.
  #
  # You can chain any of the following off of the end to specify details
  # about the change:
  #
  # * `from`
  # * `to`
  #
  # or any one of:
  #
  # * `by`
  # * `by_at_least`
  # * `by_at_most`
  #
  # == Notes
  #
  # Evaluates `receiver.message` or `block` before and after it
  # evaluates the block passed to `expect`. If the value is the same
  # object, its before/after `hash` value is used to see if it has changed.
  # Therefore, your object needs to properly implement `hash` to work correctly
  # with this matcher.
  #
  # `expect( ... ).not_to change` supports the form that specifies `from`
  # (which specifies what you expect the starting, unchanged value to be)
  # but does not support forms with subsequent calls to `by`, `by_at_least`,
  # `by_at_most` or `to`.
  #
  # @example
  #   expect {
  #   team.add_player(player)
  #   }.to change(roster, :count)
  #
  #   expect {
  #   team.add_player(player)
  #   }.to change(roster, :count).by(1)
  #
  #   expect {
  #   team.add_player(player)
  #   }.to change(roster, :count).by_at_least(1)
  #
  #   expect {
  #   team.add_player(player)
  #   }.to change(roster, :count).by_at_most(1)
  #
  #   string = "string"
  #   expect {
  #   string.reverse!
  #   }.to change { string }.from("string").to("gnirts")
  #
  #   string = "string"
  #   expect {
  #   string
  #   }.not_to change { string }.from("string")
  #
  #   expect {
  #   person.happy_birthday
  #   }.to change(person, :birthday).from(32).to(33)
  #
  #   expect {
  #   employee.develop_great_new_social_networking_app
  #   }.to change(employee, :title).from("Mail Clerk").to("CEO")
  #
  #   expect {
  #   doctor.leave_office
  #   }.to change(doctor, :sign).from(/is in/).to(/is out/)
  #
  #   user = User.new(:type => "admin")
  #   expect {
  #   user.symbolize_type
  #   }.to change(user, :type).from(String).to(Symbol)
  # @param receiver [Object]
  # @param message [Symbol] the message to send the receiver
  #
  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#38
  def a_block_changing(*args, &block); end

  # With no arg, passes if the block outputs `to_stdout` or `to_stderr`.
  # With a string, passes if the block outputs that specific string `to_stdout` or `to_stderr`.
  # With a regexp or matcher, passes if the block outputs a string `to_stdout` or `to_stderr` that matches.
  #
  # To capture output from any spawned subprocess as well, use `to_stdout_from_any_process` or
  # `to_stderr_from_any_process`. Output from any process that inherits the main process's corresponding
  # standard stream will be captured.
  #
  # @example
  #   expect { print 'foo' }.to output.to_stdout
  #   expect { print 'foo' }.to output('foo').to_stdout
  #   expect { print 'foo' }.to output(/foo/).to_stdout
  #
  #   expect { do_something }.to_not output.to_stdout
  #
  #   expect { warn('foo') }.to output.to_stderr
  #   expect { warn('foo') }.to output('foo').to_stderr
  #   expect { warn('foo') }.to output(/foo/).to_stderr
  #
  #   expect { do_something }.to_not output.to_stderr
  #
  #   expect { system('echo foo') }.to output("foo\n").to_stdout_from_any_process
  #   expect { system('echo foo', out: :err) }.to output("foo\n").to_stderr_from_any_process
  # @note `to_stdout` and `to_stderr` work by temporarily replacing `$stdout` or `$stderr`,
  #   so they're not able to intercept stream output that explicitly uses `STDOUT`/`STDERR`
  #   or that uses a reference to `$stdout`/`$stderr` that was stored before the
  #   matcher was used.
  # @note `to_stdout_from_any_process` and `to_stderr_from_any_process` use Tempfiles, and
  #   are thus significantly (~30x) slower than `to_stdout` and `to_stderr`.
  #
  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#38
  def a_block_outputting(*args, &block); end

  # With no args, matches if any error is raised.
  # With a named error, matches only if that specific error is raised.
  # With a named error and message specified as a String, matches only if both match.
  # With a named error and message specified as a Regexp, matches only if both match.
  # Pass an optional block to perform extra verifications on the exception matched
  #
  # @example
  #   expect { do_something_risky }.to raise_error
  #   expect { do_something_risky }.to raise_error(PoorRiskDecisionError)
  #   expect { do_something_risky }.to raise_error(PoorRiskDecisionError) { |error| expect(error.data).to eq 42 }
  #   expect { do_something_risky }.to raise_error { |error| expect(error.data).to eq 42 }
  #   expect { do_something_risky }.to raise_error(PoorRiskDecisionError, "that was too risky")
  #   expect { do_something_risky }.to raise_error(PoorRiskDecisionError, /oo ri/)
  #   expect { do_something_risky }.to raise_error("that was too risky")
  #
  #   expect { do_something_risky }.not_to raise_error
  #
  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#38
  def a_block_raising(*args, &block); end

  # Given no argument, matches if a proc throws any Symbol.
  #
  # Given a Symbol, matches if the given proc throws the specified Symbol.
  #
  # Given a Symbol and an arg, matches if the given proc throws the
  # specified Symbol with the specified arg.
  #
  # @example
  #   expect { do_something_risky }.to throw_symbol
  #   expect { do_something_risky }.to throw_symbol(:that_was_risky)
  #   expect { do_something_risky }.to throw_symbol(:that_was_risky, 'culprit')
  #
  #   expect { do_something_risky }.not_to throw_symbol
  #   expect { do_something_risky }.not_to throw_symbol(:that_was_risky)
  #   expect { do_something_risky }.not_to throw_symbol(:that_was_risky, 'culprit')
  #
  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#38
  def a_block_throwing(*args, &block); end

  # Passes if the method called in the expect block yields, regardless
  # of whether or not arguments are yielded.
  #
  # @example
  #   expect { |b| 5.tap(&b) }.to yield_control
  #   expect { |b| "a".to_sym(&b) }.not_to yield_control
  # @note Your expect block must accept a parameter and pass it on to
  #   the method-under-test as a block.
  #
  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#38
  def a_block_yielding_control(*args, &block); end

  # Designed for use with methods that repeatedly yield (such as
  # iterators). Passes if the method called in the expect block yields
  # multiple times with arguments matching those given.
  #
  # Argument matching is done using `===` (the case match operator)
  # and `==`. If the expected and actual arguments match with either
  # operator, the matcher will pass.
  #
  # @example
  #   expect { |b| [1, 2, 3].each(&b) }.to yield_successive_args(1, 2, 3)
  #   expect { |b| { :a => 1, :b => 2 }.each(&b) }.to yield_successive_args([:a, 1], [:b, 2])
  #   expect { |b| [1, 2, 3].each(&b) }.not_to yield_successive_args(1, 2)
  # @note Your expect block must accept a parameter and pass it on to
  #   the method-under-test as a block.
  #
  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#38
  def a_block_yielding_successive_args(*args, &block); end

  # Given no arguments, matches if the method called in the expect
  # block yields with arguments (regardless of what they are or how
  # many there are).
  #
  # Given arguments, matches if the method called in the expect block
  # yields with arguments that match the given arguments.
  #
  # Argument matching is done using `===` (the case match operator)
  # and `==`. If the expected and actual arguments match with either
  # operator, the matcher will pass.
  #
  # @example
  #   expect { |b| 5.tap(&b) }.to yield_with_args # because #tap yields an arg
  #   expect { |b| 5.tap(&b) }.to yield_with_args(5) # because 5 == 5
  #   expect { |b| 5.tap(&b) }.to yield_with_args(Integer) # because Integer === 5
  #   expect { |b| File.open("f.txt", &b) }.to yield_with_args(/txt/) # because /txt/ === "f.txt"
  #
  #   expect { |b| User.transaction(&b) }.not_to yield_with_args # because it yields no args
  #   expect { |b| 5.tap(&b) }.not_to yield_with_args(1, 2, 3)
  # @note Your expect block must accept a parameter and pass it on to
  #   the method-under-test as a block.
  # @note This matcher is not designed for use with methods that yield
  #   multiple times.
  #
  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#38
  def a_block_yielding_with_args(*args, &block); end

  # Passes if the method called in the expect block yields with
  # no arguments. Fails if it does not yield, or yields with arguments.
  #
  # @example
  #   expect { |b| User.transaction(&b) }.to yield_with_no_args
  #   expect { |b| 5.tap(&b) }.not_to yield_with_no_args # because it yields with `5`
  #   expect { |b| "a".to_sym(&b) }.not_to yield_with_no_args # because it does not yield
  # @note Your expect block must accept a parameter and pass it on to
  #   the method-under-test as a block.
  # @note This matcher is not designed for use with methods that yield
  #   multiple times.
  #
  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#38
  def a_block_yielding_with_no_args(*args, &block); end

  # Passes if actual contains all of the expected regardless of order.
  # This works for collections. Pass in multiple args and it will only
  # pass if all args are found in collection.
  #
  # @example
  #   expect([1, 2, 3]).to contain_exactly(1, 2, 3)
  #   expect([1, 2, 3]).to contain_exactly(1, 3, 2)
  # @note This is also available using the `=~` operator with `should`,
  #   but `=~` is not supported with `expect`.
  # @see #match_array
  #
  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#38
  def a_collection_containing_exactly(*args, &block); end

  # Matches if the actual value ends with the expected value(s). In the case
  # of a string, matches against the last `expected.length` characters of the
  # actual string. In the case of an array, matches against the last
  # `expected.length` elements of the actual array.
  #
  # @example
  #   expect("this string").to   end_with "string"
  #   expect([0, 1, 2, 3, 4]).to end_with 4
  #   expect([0, 2, 3, 4, 4]).to end_with 3, 4
  #
  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#38
  def a_collection_ending_with(*args, &block); end

  # Passes if actual includes expected. This works for
  # collections and Strings. You can also pass in multiple args
  # and it will only pass if all args are found in collection.
  #
  # @example
  #   expect([1,2,3]).to      include(3)
  #   expect([1,2,3]).to      include(2,3)
  #   expect([1,2,3]).to      include(2,3,4) # fails
  #   expect([1,2,3]).not_to  include(4)
  #   expect("spread").to     include("read")
  #   expect("spread").not_to include("red")
  #   expect(:a => 1, :b => 2).to include(:a)
  #   expect(:a => 1, :b => 2).to include(:a, :b)
  #   expect(:a => 1, :b => 2).to include(:a => 1)
  #   expect(:a => 1, :b => 2).to include(:b => 2, :a => 1)
  #   expect(:a => 1, :b => 2).to include(:c) # fails
  #   expect(:a => 1, :b => 2).not_to include(:a => 2)
  #
  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#38
  def a_collection_including(*args, &block); end

  # Matches if the actual value starts with the expected value(s). In the
  # case of a string, matches against the first `expected.length` characters
  # of the actual string. In the case of an array, matches against the first
  # `expected.length` elements of the actual array.
  #
  # @example
  #   expect("this string").to   start_with "this s"
  #   expect([0, 1, 2, 3, 4]).to start_with 0
  #   expect([0, 2, 3, 4, 4]).to start_with 0, 1
  #
  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#38
  def a_collection_starting_with(*args, &block); end

  # Passes if actual is falsey (false or nil)
  #
  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#38
  def a_falsey_value(*args, &block); end

  # Passes if actual is falsey (false or nil)
  #
  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#38
  def a_falsy_value(*args, &block); end

  # Passes if actual includes expected. This works for
  # collections and Strings. You can also pass in multiple args
  # and it will only pass if all args are found in collection.
  #
  # @example
  #   expect([1,2,3]).to      include(3)
  #   expect([1,2,3]).to      include(2,3)
  #   expect([1,2,3]).to      include(2,3,4) # fails
  #   expect([1,2,3]).not_to  include(4)
  #   expect("spread").to     include("read")
  #   expect("spread").not_to include("red")
  #   expect(:a => 1, :b => 2).to include(:a)
  #   expect(:a => 1, :b => 2).to include(:a, :b)
  #   expect(:a => 1, :b => 2).to include(:a => 1)
  #   expect(:a => 1, :b => 2).to include(:b => 2, :a => 1)
  #   expect(:a => 1, :b => 2).to include(:c) # fails
  #   expect(:a => 1, :b => 2).not_to include(:a => 2)
  #
  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#38
  def a_hash_including(*args, &block); end

  # Passes if actual.kind_of?(expected)
  #
  # @example
  #   expect(5).to     be_a_kind_of(Integer)
  #   expect(5).to     be_a_kind_of(Numeric)
  #   expect(5).not_to be_a_kind_of(Float)
  #
  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#38
  def a_kind_of(*args, &block); end

  # Passes if actual is nil
  #
  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#38
  def a_nil_value(*args, &block); end

  # Passes if actual covers expected. This works for
  # Ranges. You can also pass in multiple args
  # and it will only pass if all args are found in Range.
  #
  # ### Warning:: Ruby >= 1.9 only
  #
  # @example
  #   expect(1..10).to     cover(5)
  #   expect(1..10).to     cover(4, 6)
  #   expect(1..10).to     cover(4, 6, 11) # fails
  #   expect(1..10).not_to cover(11)
  #   expect(1..10).not_to cover(5)        # fails
  #
  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#38
  def a_range_covering(*args, &block); end

  # Matches if the actual value ends with the expected value(s). In the case
  # of a string, matches against the last `expected.length` characters of the
  # actual string. In the case of an array, matches against the last
  # `expected.length` elements of the actual array.
  #
  # @example
  #   expect("this string").to   end_with "string"
  #   expect([0, 1, 2, 3, 4]).to end_with 4
  #   expect([0, 2, 3, 4, 4]).to end_with 3, 4
  #
  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#38
  def a_string_ending_with(*args, &block); end

  # Passes if actual includes expected. This works for
  # collections and Strings. You can also pass in multiple args
  # and it will only pass if all args are found in collection.
  #
  # @example
  #   expect([1,2,3]).to      include(3)
  #   expect([1,2,3]).to      include(2,3)
  #   expect([1,2,3]).to      include(2,3,4) # fails
  #   expect([1,2,3]).not_to  include(4)
  #   expect("spread").to     include("read")
  #   expect("spread").not_to include("red")
  #   expect(:a => 1, :b => 2).to include(:a)
  #   expect(:a => 1, :b => 2).to include(:a, :b)
  #   expect(:a => 1, :b => 2).to include(:a => 1)
  #   expect(:a => 1, :b => 2).to include(:b => 2, :a => 1)
  #   expect(:a => 1, :b => 2).to include(:c) # fails
  #   expect(:a => 1, :b => 2).not_to include(:a => 2)
  #
  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#38
  def a_string_including(*args, &block); end

  # Given a `Regexp` or `String`, passes if `actual.match(pattern)`
  # Given an arbitrary nested data structure (e.g. arrays and hashes),
  # matches if `expected === actual` || `actual == expected` for each
  # pair of elements.
  #
  # @example
  #   expect(email).to match(/^([^\s]+)((?:[-a-z0-9]+\.)+[a-z]{2,})$/i)
  #   expect(email).to match("@example.com")
  # @example
  #   hash = {
  #   :a => {
  #   :b => ["foo", 5],
  #   :c => { :d => 2.05 }
  #   }
  #   }
  #
  #   expect(hash).to match(
  #   :a => {
  #   :b => a_collection_containing_exactly(
  #   a_string_starting_with("f"),
  #   an_instance_of(Integer)
  #   ),
  #   :c => { :d => (a_value < 3) }
  #   }
  #   )
  # @note The `match_regex` alias is deprecated and is not recommended for use.
  #   It was added in 2.12.1 to facilitate its use from within custom
  #   matchers (due to how the custom matcher DSL was evaluated in 2.x,
  #   `match` could not be used there), but is no longer needed in 3.x.
  #
  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#38
  def a_string_matching(*args, &block); end

  # Matches if the actual value starts with the expected value(s). In the
  # case of a string, matches against the first `expected.length` characters
  # of the actual string. In the case of an array, matches against the first
  # `expected.length` elements of the actual array.
  #
  # @example
  #   expect("this string").to   start_with "this s"
  #   expect([0, 1, 2, 3, 4]).to start_with 0
  #   expect([0, 2, 3, 4, 4]).to start_with 0, 1
  #
  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#38
  def a_string_starting_with(*args, &block); end

  # Passes if actual is truthy (anything but false or nil)
  #
  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#38
  def a_truthy_value(*args, &block); end

  # Given true, false, or nil, will pass if actual value is true, false or
  # nil (respectively). Given no args means the caller should satisfy an if
  # condition (to be or not to be).
  #
  # Predicates are any Ruby method that ends in a "?" and returns true or
  # false.  Given be_ followed by arbitrary_predicate (without the "?"),
  # RSpec will match convert that into a query against the target object.
  #
  # The arbitrary_predicate feature will handle any predicate prefixed with
  # "be_an_" (e.g. be_an_instance_of), "be_a_" (e.g. be_a_kind_of) or "be_"
  # (e.g. be_empty), letting you choose the prefix that best suits the
  # predicate.
  #
  # @example
  #   expect(actual).to     be_truthy
  #   expect(actual).to     be_falsey
  #   expect(actual).to     be_nil
  #   expect(actual).to     be_[arbitrary_predicate](*args)
  #   expect(actual).not_to be_nil
  #   expect(actual).not_to be_[arbitrary_predicate](*args)
  #
  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#38
  def a_value(*args, &block); end

  # Passes if actual.between?(min, max). Works with any Comparable object,
  # including String, Symbol, Time, or Numeric (Fixnum, Bignum, Integer,
  # Float, Complex, and Rational).
  #
  # By default, `be_between` is inclusive (i.e. passes when given either the max or min value),
  # but you can make it `exclusive` by chaining that off the matcher.
  #
  # @example
  #   expect(5).to      be_between(1, 10)
  #   expect(11).not_to be_between(1, 10)
  #   expect(10).not_to be_between(1, 10).exclusive
  #
  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#38
  def a_value_between(*args, &block); end

  # Passes if actual == expected +/- delta
  #
  # @example
  #   expect(result).to     be_within(0.5).of(3.0)
  #   expect(result).not_to be_within(0.5).of(3.0)
  #
  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#38
  def a_value_within(*args, &block); end

  # Allows multiple expectations in the provided block to fail, and then
  # aggregates them into a single exception, rather than aborting on the
  # first expectation failure like normal. This allows you to see all
  # failures from an entire set of expectations without splitting each
  # off into its own example (which may slow things down if the example
  # setup is expensive).
  #
  # @example
  #   aggregate_failures("verifying response") do
  #   expect(response.status).to eq(200)
  #   expect(response.headers).to include("Content-Type" => "text/plain")
  #   expect(response.body).to include("Success")
  #   end
  # @note The implementation of this feature uses a thread-local variable,
  #   which means that if you have an expectation failure in another thread,
  #   it'll abort like normal.
  # @param label [String] label for this aggregation block, which will be
  #   included in the aggregated exception message.
  # @param metadata [Hash] additional metadata about this failure aggregation
  #   block. If multiple expectations fail, it will be exposed from the
  #   {Expectations::MultipleExpectationsNotMetError} exception. Mostly
  #   intended for internal RSpec use but you can use it as well.
  # @raise [Expectations::MultipleExpectationsNotMetError] raised when
  #   multiple expectations fail.
  # @raise [Expectations::ExpectationNotMetError] raised when a single
  #   expectation fails.
  # @raise [Exception] other sorts of exceptions will be raised as normal.
  # @yield Block containing as many expectation as you want. The block is
  #   simply yielded to, so you can trust that anything that works outside
  #   the block should work within it.
  #
  # source://rspec-expectations//lib/rspec/matchers.rb#305
  def aggregate_failures(label = T.unsafe(nil), metadata = T.unsafe(nil), &block); end

  # Passes if the provided matcher passes when checked against all
  # elements of the collection.
  #
  # @example
  #   expect([1, 3, 5]).to all be_odd
  #   expect([1, 3, 6]).to all be_odd # fails
  # @example
  #   expect([1, 3, 5]).to all( be_odd.and be_an(Integer) )
  # @note The negative form `not_to all` is not supported. Instead
  #   use `not_to include` or pass a negative form of a matcher
  #   as the argument (e.g. `all exclude(:foo)`).
  # @note You can also use this with compound matchers as well.
  #
  # source://rspec-expectations//lib/rspec/matchers.rb#662
  def all(expected); end

  # An alternate form of `contain_exactly` that accepts
  # the expected contents as a single array arg rather
  # that splatted out as individual items.
  #
  # @example
  #   expect(results).to contain_exactly(1, 2)
  #   # is identical to:
  #   expect(results).to match_array([1, 2])
  # @see #contain_exactly
  #
  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#38
  def an_array_matching(*args, &block); end

  # Passes if actual.instance_of?(expected)
  #
  # @example
  #   expect(5).to     be_an_instance_of(Integer)
  #   expect(5).not_to be_an_instance_of(Numeric)
  #   expect(5).not_to be_an_instance_of(Float)
  #
  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#38
  def an_instance_of(*args, &block); end

  # Passes if <tt>actual == expected</tt>.
  #
  # See http://www.ruby-doc.org/core/classes/Object.html#M001057 for more
  # information about equality in Ruby.
  #
  # @example
  #   expect(5).to     eq(5)
  #   expect(5).not_to eq(3)
  #
  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#38
  def an_object_eq_to(*args, &block); end

  # Passes if `actual.eql?(expected)`
  #
  # See http://www.ruby-doc.org/core/classes/Object.html#M001057 for more
  # information about equality in Ruby.
  #
  # @example
  #   expect(5).to     eql(5)
  #   expect(5).not_to eql(3)
  #
  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#38
  def an_object_eql_to(*args, &block); end

  # Passes if <tt>actual.equal?(expected)</tt> (object identity).
  #
  # See http://www.ruby-doc.org/core/classes/Object.html#M001057 for more
  # information about equality in Ruby.
  #
  # @example
  #   expect(5).to       equal(5)   # Integers are equal
  #   expect("5").not_to equal("5") # Strings that look the same are not the same object
  #
  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#38
  def an_object_equal_to(*args, &block); end

  # Passes if `actual.exist?` or `actual.exists?`
  #
  # @example
  #   expect(File).to exist("path/to/file")
  #
  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#38
  def an_object_existing(*args, &block); end

  # Passes if actual's attribute values match the expected attributes hash.
  # This works no matter how you define your attribute readers.
  #
  # @example
  #   Person = Struct.new(:name, :age)
  #   person = Person.new("Bob", 32)
  #
  #   expect(person).to have_attributes(:name => "Bob", :age => 32)
  #   expect(person).to have_attributes(:name => a_string_starting_with("B"), :age => (a_value > 30) )
  # @example
  #   expect(person).to have_attributes(:color => "red")
  # @note It will fail if actual doesn't respond to any of the expected attributes.
  #
  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#38
  def an_object_having_attributes(*args, &block); end

  # Given a `Regexp` or `String`, passes if `actual.match(pattern)`
  # Given an arbitrary nested data structure (e.g. arrays and hashes),
  # matches if `expected === actual` || `actual == expected` for each
  # pair of elements.
  #
  # @example
  #   expect(email).to match(/^([^\s]+)((?:[-a-z0-9]+\.)+[a-z]{2,})$/i)
  #   expect(email).to match("@example.com")
  # @example
  #   hash = {
  #   :a => {
  #   :b => ["foo", 5],
  #   :c => { :d => 2.05 }
  #   }
  #   }
  #
  #   expect(hash).to match(
  #   :a => {
  #   :b => a_collection_containing_exactly(
  #   a_string_starting_with("f"),
  #   an_instance_of(Integer)
  #   ),
  #   :c => { :d => (a_value < 3) }
  #   }
  #   )
  # @note The `match_regex` alias is deprecated and is not recommended for use.
  #   It was added in 2.12.1 to facilitate its use from within custom
  #   matchers (due to how the custom matcher DSL was evaluated in 2.x,
  #   `match` could not be used there), but is no longer needed in 3.x.
  #
  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#38
  def an_object_matching(*args, &block); end

  # Matches if the target object responds to all of the names
  # provided. Names can be Strings or Symbols.
  #
  # @example
  #   expect("string").to respond_to(:length)
  #
  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#38
  def an_object_responding_to(*args, &block); end

  # Passes if the submitted block returns true. Yields target to the
  # block.
  #
  # Generally speaking, this should be thought of as a last resort when
  # you can't find any other way to specify the behaviour you wish to
  # specify.
  #
  # If you do find yourself in such a situation, you could always write
  # a custom matcher, which would likely make your specs more expressive.
  #
  # @example
  #   expect(5).to satisfy { |n| n > 3 }
  #   expect(5).to satisfy("be greater than 3") { |n| n > 3 }
  # @param description [String] optional description to be used for this matcher.
  #
  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#38
  def an_object_satisfying(*args, &block); end

  # Given true, false, or nil, will pass if actual value is true, false or
  # nil (respectively). Given no args means the caller should satisfy an if
  # condition (to be or not to be).
  #
  # Predicates are any Ruby method that ends in a "?" and returns true or
  # false.  Given be_ followed by arbitrary_predicate (without the "?"),
  # RSpec will match convert that into a query against the target object.
  #
  # The arbitrary_predicate feature will handle any predicate prefixed with
  # "be_an_" (e.g. be_an_instance_of), "be_a_" (e.g. be_a_kind_of) or "be_"
  # (e.g. be_empty), letting you choose the prefix that best suits the
  # predicate.
  #
  # @example
  #   expect(actual).to     be_truthy
  #   expect(actual).to     be_falsey
  #   expect(actual).to     be_nil
  #   expect(actual).to     be_[arbitrary_predicate](*args)
  #   expect(actual).not_to be_nil
  #   expect(actual).not_to be_[arbitrary_predicate](*args)
  #
  # source://rspec-expectations//lib/rspec/matchers.rb#349
  def be(*args); end

  # passes if target.kind_of?(klass)
  #
  # source://rspec-expectations//lib/rspec/matchers.rb#355
  def be_a(klass); end

  # Passes if actual.kind_of?(expected)
  #
  # @example
  #   expect(5).to     be_a_kind_of(Integer)
  #   expect(5).to     be_a_kind_of(Numeric)
  #   expect(5).not_to be_a_kind_of(Float)
  #
  # source://rspec-expectations//lib/rspec/matchers.rb#378
  def be_a_kind_of(expected); end

  # passes if target.kind_of?(klass)
  #
  # source://rspec-expectations//lib/rspec/matchers.rb#355
  def be_an(klass); end

  # Passes if actual.instance_of?(expected)
  #
  # @example
  #   expect(5).to     be_an_instance_of(Integer)
  #   expect(5).not_to be_an_instance_of(Numeric)
  #   expect(5).not_to be_an_instance_of(Float)
  #
  # source://rspec-expectations//lib/rspec/matchers.rb#366
  def be_an_instance_of(expected); end

  # Passes if actual.between?(min, max). Works with any Comparable object,
  # including String, Symbol, Time, or Numeric (Fixnum, Bignum, Integer,
  # Float, Complex, and Rational).
  #
  # By default, `be_between` is inclusive (i.e. passes when given either the max or min value),
  # but you can make it `exclusive` by chaining that off the matcher.
  #
  # @example
  #   expect(5).to      be_between(1, 10)
  #   expect(11).not_to be_between(1, 10)
  #   expect(10).not_to be_between(1, 10).exclusive
  #
  # source://rspec-expectations//lib/rspec/matchers.rb#395
  def be_between(min, max); end

  # Passes if actual is falsey (false or nil)
  #
  # source://rspec-expectations//lib/rspec/matchers.rb#316
  def be_falsey; end

  # Passes if actual is falsey (false or nil)
  #
  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#38
  def be_falsy(*args, &block); end

  # Passes if actual.instance_of?(expected)
  #
  # @example
  #   expect(5).to     be_an_instance_of(Integer)
  #   expect(5).not_to be_an_instance_of(Numeric)
  #   expect(5).not_to be_an_instance_of(Float)
  #
  # source://rspec-expectations//lib/rspec/matchers.rb#366
  def be_instance_of(expected); end

  # Passes if actual.kind_of?(expected)
  #
  # @example
  #   expect(5).to     be_a_kind_of(Integer)
  #   expect(5).to     be_a_kind_of(Numeric)
  #   expect(5).not_to be_a_kind_of(Float)
  #
  # source://rspec-expectations//lib/rspec/matchers.rb#378
  def be_kind_of(expected); end

  # Passes if actual is nil
  #
  # source://rspec-expectations//lib/rspec/matchers.rb#324
  def be_nil; end

  # Passes if actual is truthy (anything but false or nil)
  #
  # source://rspec-expectations//lib/rspec/matchers.rb#310
  def be_truthy; end

  # Passes if actual == expected +/- delta
  #
  # @example
  #   expect(result).to     be_within(0.5).of(3.0)
  #   expect(result).not_to be_within(0.5).of(3.0)
  #
  # source://rspec-expectations//lib/rspec/matchers.rb#405
  def be_within(delta); end

  # Applied to a proc, specifies that its execution will cause some value to
  # change.
  #
  # You can either pass <tt>receiver</tt> and <tt>message</tt>, or a block,
  # but not both.
  #
  # When passing a block, it must use the `{ ... }` format, not
  # do/end, as `{ ... }` binds to the `change` method, whereas do/end
  # would errantly bind to the `expect(..).to` or `expect(...).not_to` method.
  #
  # You can chain any of the following off of the end to specify details
  # about the change:
  #
  # * `from`
  # * `to`
  #
  # or any one of:
  #
  # * `by`
  # * `by_at_least`
  # * `by_at_most`
  #
  # == Notes
  #
  # Evaluates `receiver.message` or `block` before and after it
  # evaluates the block passed to `expect`. If the value is the same
  # object, its before/after `hash` value is used to see if it has changed.
  # Therefore, your object needs to properly implement `hash` to work correctly
  # with this matcher.
  #
  # `expect( ... ).not_to change` supports the form that specifies `from`
  # (which specifies what you expect the starting, unchanged value to be)
  # but does not support forms with subsequent calls to `by`, `by_at_least`,
  # `by_at_most` or `to`.
  #
  # @example
  #   expect {
  #   team.add_player(player)
  #   }.to change(roster, :count)
  #
  #   expect {
  #   team.add_player(player)
  #   }.to change(roster, :count).by(1)
  #
  #   expect {
  #   team.add_player(player)
  #   }.to change(roster, :count).by_at_least(1)
  #
  #   expect {
  #   team.add_player(player)
  #   }.to change(roster, :count).by_at_most(1)
  #
  #   string = "string"
  #   expect {
  #   string.reverse!
  #   }.to change { string }.from("string").to("gnirts")
  #
  #   string = "string"
  #   expect {
  #   string
  #   }.not_to change { string }.from("string")
  #
  #   expect {
  #   person.happy_birthday
  #   }.to change(person, :birthday).from(32).to(33)
  #
  #   expect {
  #   employee.develop_great_new_social_networking_app
  #   }.to change(employee, :title).from("Mail Clerk").to("CEO")
  #
  #   expect {
  #   doctor.leave_office
  #   }.to change(doctor, :sign).from(/is in/).to(/is out/)
  #
  #   user = User.new(:type => "admin")
  #   expect {
  #   user.symbolize_type
  #   }.to change(user, :type).from(String).to(Symbol)
  # @param receiver [Object]
  # @param message [Symbol] the message to send the receiver
  #
  # source://rspec-expectations//lib/rspec/matchers.rb#492
  def change(receiver = T.unsafe(nil), message = T.unsafe(nil), &block); end

  # Applied to a proc, specifies that its execution will cause some value to
  # change.
  #
  # You can either pass <tt>receiver</tt> and <tt>message</tt>, or a block,
  # but not both.
  #
  # When passing a block, it must use the `{ ... }` format, not
  # do/end, as `{ ... }` binds to the `change` method, whereas do/end
  # would errantly bind to the `expect(..).to` or `expect(...).not_to` method.
  #
  # You can chain any of the following off of the end to specify details
  # about the change:
  #
  # * `from`
  # * `to`
  #
  # or any one of:
  #
  # * `by`
  # * `by_at_least`
  # * `by_at_most`
  #
  # == Notes
  #
  # Evaluates `receiver.message` or `block` before and after it
  # evaluates the block passed to `expect`. If the value is the same
  # object, its before/after `hash` value is used to see if it has changed.
  # Therefore, your object needs to properly implement `hash` to work correctly
  # with this matcher.
  #
  # `expect( ... ).not_to change` supports the form that specifies `from`
  # (which specifies what you expect the starting, unchanged value to be)
  # but does not support forms with subsequent calls to `by`, `by_at_least`,
  # `by_at_most` or `to`.
  #
  # @example
  #   expect {
  #   team.add_player(player)
  #   }.to change(roster, :count)
  #
  #   expect {
  #   team.add_player(player)
  #   }.to change(roster, :count).by(1)
  #
  #   expect {
  #   team.add_player(player)
  #   }.to change(roster, :count).by_at_least(1)
  #
  #   expect {
  #   team.add_player(player)
  #   }.to change(roster, :count).by_at_most(1)
  #
  #   string = "string"
  #   expect {
  #   string.reverse!
  #   }.to change { string }.from("string").to("gnirts")
  #
  #   string = "string"
  #   expect {
  #   string
  #   }.not_to change { string }.from("string")
  #
  #   expect {
  #   person.happy_birthday
  #   }.to change(person, :birthday).from(32).to(33)
  #
  #   expect {
  #   employee.develop_great_new_social_networking_app
  #   }.to change(employee, :title).from("Mail Clerk").to("CEO")
  #
  #   expect {
  #   doctor.leave_office
  #   }.to change(doctor, :sign).from(/is in/).to(/is out/)
  #
  #   user = User.new(:type => "admin")
  #   expect {
  #   user.symbolize_type
  #   }.to change(user, :type).from(String).to(Symbol)
  # @param receiver [Object]
  # @param message [Symbol] the message to send the receiver
  #
  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#38
  def changing(*args, &block); end

  # Passes if actual contains all of the expected regardless of order.
  # This works for collections. Pass in multiple args and it will only
  # pass if all args are found in collection.
  #
  # @example
  #   expect([1, 2, 3]).to contain_exactly(1, 2, 3)
  #   expect([1, 2, 3]).to contain_exactly(1, 3, 2)
  # @note This is also available using the `=~` operator with `should`,
  #   but `=~` is not supported with `expect`.
  # @see #match_array
  #
  # source://rspec-expectations//lib/rspec/matchers.rb#510
  def contain_exactly(*items); end

  # Passes if actual contains all of the expected regardless of order.
  # This works for collections. Pass in multiple args and it will only
  # pass if all args are found in collection.
  #
  # @example
  #   expect([1, 2, 3]).to contain_exactly(1, 2, 3)
  #   expect([1, 2, 3]).to contain_exactly(1, 3, 2)
  # @note This is also available using the `=~` operator with `should`,
  #   but `=~` is not supported with `expect`.
  # @see #match_array
  #
  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#38
  def containing_exactly(*args, &block); end

  # Passes if actual covers expected. This works for
  # Ranges. You can also pass in multiple args
  # and it will only pass if all args are found in Range.
  #
  # ### Warning:: Ruby >= 1.9 only
  #
  # @example
  #   expect(1..10).to     cover(5)
  #   expect(1..10).to     cover(4, 6)
  #   expect(1..10).to     cover(4, 6, 11) # fails
  #   expect(1..10).not_to cover(11)
  #   expect(1..10).not_to cover(5)        # fails
  #
  # source://rspec-expectations//lib/rspec/matchers.rb#528
  def cover(*values); end

  # Passes if actual covers expected. This works for
  # Ranges. You can also pass in multiple args
  # and it will only pass if all args are found in Range.
  #
  # ### Warning:: Ruby >= 1.9 only
  #
  # @example
  #   expect(1..10).to     cover(5)
  #   expect(1..10).to     cover(4, 6)
  #   expect(1..10).to     cover(4, 6, 11) # fails
  #   expect(1..10).not_to cover(11)
  #   expect(1..10).not_to cover(5)        # fails
  #
  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#38
  def covering(*args, &block); end

  # Matches if the actual value ends with the expected value(s). In the case
  # of a string, matches against the last `expected.length` characters of the
  # actual string. In the case of an array, matches against the last
  # `expected.length` elements of the actual array.
  #
  # @example
  #   expect("this string").to   end_with "string"
  #   expect([0, 1, 2, 3, 4]).to end_with 4
  #   expect([0, 2, 3, 4, 4]).to end_with 3, 4
  #
  # source://rspec-expectations//lib/rspec/matchers.rb#543
  def end_with(*expected); end

  # Matches if the actual value ends with the expected value(s). In the case
  # of a string, matches against the last `expected.length` characters of the
  # actual string. In the case of an array, matches against the last
  # `expected.length` elements of the actual array.
  #
  # @example
  #   expect("this string").to   end_with "string"
  #   expect([0, 1, 2, 3, 4]).to end_with 4
  #   expect([0, 2, 3, 4, 4]).to end_with 3, 4
  #
  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#38
  def ending_with(*args, &block); end

  # Passes if <tt>actual == expected</tt>.
  #
  # See http://www.ruby-doc.org/core/classes/Object.html#M001057 for more
  # information about equality in Ruby.
  #
  # @example
  #   expect(5).to     eq(5)
  #   expect(5).not_to eq(3)
  #
  # source://rspec-expectations//lib/rspec/matchers.rb#558
  def eq(expected); end

  # Passes if <tt>actual == expected</tt>.
  #
  # See http://www.ruby-doc.org/core/classes/Object.html#M001057 for more
  # information about equality in Ruby.
  #
  # @example
  #   expect(5).to     eq(5)
  #   expect(5).not_to eq(3)
  #
  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#38
  def eq_to(*args, &block); end

  # Passes if `actual.eql?(expected)`
  #
  # See http://www.ruby-doc.org/core/classes/Object.html#M001057 for more
  # information about equality in Ruby.
  #
  # @example
  #   expect(5).to     eql(5)
  #   expect(5).not_to eql(3)
  #
  # source://rspec-expectations//lib/rspec/matchers.rb#572
  def eql(expected); end

  # Passes if `actual.eql?(expected)`
  #
  # See http://www.ruby-doc.org/core/classes/Object.html#M001057 for more
  # information about equality in Ruby.
  #
  # @example
  #   expect(5).to     eql(5)
  #   expect(5).not_to eql(3)
  #
  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#38
  def eql_to(*args, &block); end

  # Passes if <tt>actual.equal?(expected)</tt> (object identity).
  #
  # See http://www.ruby-doc.org/core/classes/Object.html#M001057 for more
  # information about equality in Ruby.
  #
  # @example
  #   expect(5).to       equal(5)   # Integers are equal
  #   expect("5").not_to equal("5") # Strings that look the same are not the same object
  #
  # source://rspec-expectations//lib/rspec/matchers.rb#586
  def equal(expected); end

  # Passes if <tt>actual.equal?(expected)</tt> (object identity).
  #
  # See http://www.ruby-doc.org/core/classes/Object.html#M001057 for more
  # information about equality in Ruby.
  #
  # @example
  #   expect(5).to       equal(5)   # Integers are equal
  #   expect("5").not_to equal("5") # Strings that look the same are not the same object
  #
  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#38
  def equal_to(*args, &block); end

  # Passes if `actual.exist?` or `actual.exists?`
  #
  # @example
  #   expect(File).to exist("path/to/file")
  #
  # source://rspec-expectations//lib/rspec/matchers.rb#596
  def exist(*args); end

  # Passes if `actual.exist?` or `actual.exists?`
  #
  # @example
  #   expect(File).to exist("path/to/file")
  #
  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#38
  def existing(*args, &block); end

  # Supports `expect(actual).to matcher` syntax by wrapping `actual` in an
  # `ExpectationTarget`.
  #
  # @example
  #   expect(actual).to eq(expected)
  #   expect(actual).not_to eq(expected)
  # @return [Expectations::ExpectationTarget]
  # @see Expectations::ExpectationTarget#to
  # @see Expectations::ExpectationTarget#not_to
  #
  # source://rspec-expectations//lib/rspec/expectations/syntax.rb#72
  def expect(value = T.unsafe(nil), &block); end

  # Passes if actual's attribute values match the expected attributes hash.
  # This works no matter how you define your attribute readers.
  #
  # @example
  #   Person = Struct.new(:name, :age)
  #   person = Person.new("Bob", 32)
  #
  #   expect(person).to have_attributes(:name => "Bob", :age => 32)
  #   expect(person).to have_attributes(:name => a_string_starting_with("B"), :age => (a_value > 30) )
  # @example
  #   expect(person).to have_attributes(:color => "red")
  # @note It will fail if actual doesn't respond to any of the expected attributes.
  #
  # source://rspec-expectations//lib/rspec/matchers.rb#616
  def have_attributes(expected); end

  # Passes if actual's attribute values match the expected attributes hash.
  # This works no matter how you define your attribute readers.
  #
  # @example
  #   Person = Struct.new(:name, :age)
  #   person = Person.new("Bob", 32)
  #
  #   expect(person).to have_attributes(:name => "Bob", :age => 32)
  #   expect(person).to have_attributes(:name => a_string_starting_with("B"), :age => (a_value > 30) )
  # @example
  #   expect(person).to have_attributes(:color => "red")
  # @note It will fail if actual doesn't respond to any of the expected attributes.
  #
  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#38
  def having_attributes(*args, &block); end

  # Passes if actual includes expected. This works for
  # collections and Strings. You can also pass in multiple args
  # and it will only pass if all args are found in collection.
  #
  # @example
  #   expect([1,2,3]).to      include(3)
  #   expect([1,2,3]).to      include(2,3)
  #   expect([1,2,3]).to      include(2,3,4) # fails
  #   expect([1,2,3]).not_to  include(4)
  #   expect("spread").to     include("read")
  #   expect("spread").not_to include("red")
  #   expect(:a => 1, :b => 2).to include(:a)
  #   expect(:a => 1, :b => 2).to include(:a, :b)
  #   expect(:a => 1, :b => 2).to include(:a => 1)
  #   expect(:a => 1, :b => 2).to include(:b => 2, :a => 1)
  #   expect(:a => 1, :b => 2).to include(:c) # fails
  #   expect(:a => 1, :b => 2).not_to include(:a => 2)
  #
  # source://rspec-expectations//lib/rspec/matchers.rb#639
  def include(*expected); end

  # Passes if actual includes expected. This works for
  # collections and Strings. You can also pass in multiple args
  # and it will only pass if all args are found in collection.
  #
  # @example
  #   expect([1,2,3]).to      include(3)
  #   expect([1,2,3]).to      include(2,3)
  #   expect([1,2,3]).to      include(2,3,4) # fails
  #   expect([1,2,3]).not_to  include(4)
  #   expect("spread").to     include("read")
  #   expect("spread").not_to include("red")
  #   expect(:a => 1, :b => 2).to include(:a)
  #   expect(:a => 1, :b => 2).to include(:a, :b)
  #   expect(:a => 1, :b => 2).to include(:a => 1)
  #   expect(:a => 1, :b => 2).to include(:b => 2, :a => 1)
  #   expect(:a => 1, :b => 2).to include(:c) # fails
  #   expect(:a => 1, :b => 2).not_to include(:a => 2)
  #
  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#38
  def including(*args, &block); end

  # Given a `Regexp` or `String`, passes if `actual.match(pattern)`
  # Given an arbitrary nested data structure (e.g. arrays and hashes),
  # matches if `expected === actual` || `actual == expected` for each
  # pair of elements.
  #
  # @example
  #   expect(email).to match(/^([^\s]+)((?:[-a-z0-9]+\.)+[a-z]{2,})$/i)
  #   expect(email).to match("@example.com")
  # @example
  #   hash = {
  #   :a => {
  #   :b => ["foo", 5],
  #   :c => { :d => 2.05 }
  #   }
  #   }
  #
  #   expect(hash).to match(
  #   :a => {
  #   :b => a_collection_containing_exactly(
  #   a_string_starting_with("f"),
  #   an_instance_of(Integer)
  #   ),
  #   :c => { :d => (a_value < 3) }
  #   }
  #   )
  # @note The `match_regex` alias is deprecated and is not recommended for use.
  #   It was added in 2.12.1 to facilitate its use from within custom
  #   matchers (due to how the custom matcher DSL was evaluated in 2.x,
  #   `match` could not be used there), but is no longer needed in 3.x.
  #
  # source://rspec-expectations//lib/rspec/matchers.rb#697
  def match(expected); end

  # An alternate form of `contain_exactly` that accepts
  # the expected contents as a single array arg rather
  # that splatted out as individual items.
  #
  # @example
  #   expect(results).to contain_exactly(1, 2)
  #   # is identical to:
  #   expect(results).to match_array([1, 2])
  # @see #contain_exactly
  #
  # source://rspec-expectations//lib/rspec/matchers.rb#715
  def match_array(items); end

  # Given a `Regexp` or `String`, passes if `actual.match(pattern)`
  # Given an arbitrary nested data structure (e.g. arrays and hashes),
  # matches if `expected === actual` || `actual == expected` for each
  # pair of elements.
  #
  # @example
  #   expect(email).to match(/^([^\s]+)((?:[-a-z0-9]+\.)+[a-z]{2,})$/i)
  #   expect(email).to match("@example.com")
  # @example
  #   hash = {
  #   :a => {
  #   :b => ["foo", 5],
  #   :c => { :d => 2.05 }
  #   }
  #   }
  #
  #   expect(hash).to match(
  #   :a => {
  #   :b => a_collection_containing_exactly(
  #   a_string_starting_with("f"),
  #   an_instance_of(Integer)
  #   ),
  #   :c => { :d => (a_value < 3) }
  #   }
  #   )
  # @note The `match_regex` alias is deprecated and is not recommended for use.
  #   It was added in 2.12.1 to facilitate its use from within custom
  #   matchers (due to how the custom matcher DSL was evaluated in 2.x,
  #   `match` could not be used there), but is no longer needed in 3.x.
  #
  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#38
  def match_regex(*args, &block); end

  # Given a `Regexp` or `String`, passes if `actual.match(pattern)`
  # Given an arbitrary nested data structure (e.g. arrays and hashes),
  # matches if `expected === actual` || `actual == expected` for each
  # pair of elements.
  #
  # @example
  #   expect(email).to match(/^([^\s]+)((?:[-a-z0-9]+\.)+[a-z]{2,})$/i)
  #   expect(email).to match("@example.com")
  # @example
  #   hash = {
  #   :a => {
  #   :b => ["foo", 5],
  #   :c => { :d => 2.05 }
  #   }
  #   }
  #
  #   expect(hash).to match(
  #   :a => {
  #   :b => a_collection_containing_exactly(
  #   a_string_starting_with("f"),
  #   an_instance_of(Integer)
  #   ),
  #   :c => { :d => (a_value < 3) }
  #   }
  #   )
  # @note The `match_regex` alias is deprecated and is not recommended for use.
  #   It was added in 2.12.1 to facilitate its use from within custom
  #   matchers (due to how the custom matcher DSL was evaluated in 2.x,
  #   `match` could not be used there), but is no longer needed in 3.x.
  #
  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#38
  def matching(*args, &block); end

  # With no arg, passes if the block outputs `to_stdout` or `to_stderr`.
  # With a string, passes if the block outputs that specific string `to_stdout` or `to_stderr`.
  # With a regexp or matcher, passes if the block outputs a string `to_stdout` or `to_stderr` that matches.
  #
  # To capture output from any spawned subprocess as well, use `to_stdout_from_any_process` or
  # `to_stderr_from_any_process`. Output from any process that inherits the main process's corresponding
  # standard stream will be captured.
  #
  # @example
  #   expect { print 'foo' }.to output.to_stdout
  #   expect { print 'foo' }.to output('foo').to_stdout
  #   expect { print 'foo' }.to output(/foo/).to_stdout
  #
  #   expect { do_something }.to_not output.to_stdout
  #
  #   expect { warn('foo') }.to output.to_stderr
  #   expect { warn('foo') }.to output('foo').to_stderr
  #   expect { warn('foo') }.to output(/foo/).to_stderr
  #
  #   expect { do_something }.to_not output.to_stderr
  #
  #   expect { system('echo foo') }.to output("foo\n").to_stdout_from_any_process
  #   expect { system('echo foo', out: :err) }.to output("foo\n").to_stderr_from_any_process
  # @note `to_stdout` and `to_stderr` work by temporarily replacing `$stdout` or `$stderr`,
  #   so they're not able to intercept stream output that explicitly uses `STDOUT`/`STDERR`
  #   or that uses a reference to `$stdout`/`$stderr` that was stored before the
  #   matcher was used.
  # @note `to_stdout_from_any_process` and `to_stderr_from_any_process` use Tempfiles, and
  #   are thus significantly (~30x) slower than `to_stdout` and `to_stderr`.
  #
  # source://rspec-expectations//lib/rspec/matchers.rb#752
  def output(expected = T.unsafe(nil)); end

  # With no args, matches if any error is raised.
  # With a named error, matches only if that specific error is raised.
  # With a named error and message specified as a String, matches only if both match.
  # With a named error and message specified as a Regexp, matches only if both match.
  # Pass an optional block to perform extra verifications on the exception matched
  #
  # @example
  #   expect { do_something_risky }.to raise_error
  #   expect { do_something_risky }.to raise_error(PoorRiskDecisionError)
  #   expect { do_something_risky }.to raise_error(PoorRiskDecisionError) { |error| expect(error.data).to eq 42 }
  #   expect { do_something_risky }.to raise_error { |error| expect(error.data).to eq 42 }
  #   expect { do_something_risky }.to raise_error(PoorRiskDecisionError, "that was too risky")
  #   expect { do_something_risky }.to raise_error(PoorRiskDecisionError, /oo ri/)
  #   expect { do_something_risky }.to raise_error("that was too risky")
  #
  #   expect { do_something_risky }.not_to raise_error
  #
  # source://rspec-expectations//lib/rspec/matchers.rb#773
  def raise_error(error = T.unsafe(nil), message = T.unsafe(nil), &block); end

  # With no args, matches if any error is raised.
  # With a named error, matches only if that specific error is raised.
  # With a named error and message specified as a String, matches only if both match.
  # With a named error and message specified as a Regexp, matches only if both match.
  # Pass an optional block to perform extra verifications on the exception matched
  #
  # @example
  #   expect { do_something_risky }.to raise_error
  #   expect { do_something_risky }.to raise_error(PoorRiskDecisionError)
  #   expect { do_something_risky }.to raise_error(PoorRiskDecisionError) { |error| expect(error.data).to eq 42 }
  #   expect { do_something_risky }.to raise_error { |error| expect(error.data).to eq 42 }
  #   expect { do_something_risky }.to raise_error(PoorRiskDecisionError, "that was too risky")
  #   expect { do_something_risky }.to raise_error(PoorRiskDecisionError, /oo ri/)
  #   expect { do_something_risky }.to raise_error("that was too risky")
  #
  #   expect { do_something_risky }.not_to raise_error
  #
  # source://rspec-expectations//lib/rspec/matchers.rb#773
  def raise_exception(error = T.unsafe(nil), message = T.unsafe(nil), &block); end

  # With no args, matches if any error is raised.
  # With a named error, matches only if that specific error is raised.
  # With a named error and message specified as a String, matches only if both match.
  # With a named error and message specified as a Regexp, matches only if both match.
  # Pass an optional block to perform extra verifications on the exception matched
  #
  # @example
  #   expect { do_something_risky }.to raise_error
  #   expect { do_something_risky }.to raise_error(PoorRiskDecisionError)
  #   expect { do_something_risky }.to raise_error(PoorRiskDecisionError) { |error| expect(error.data).to eq 42 }
  #   expect { do_something_risky }.to raise_error { |error| expect(error.data).to eq 42 }
  #   expect { do_something_risky }.to raise_error(PoorRiskDecisionError, "that was too risky")
  #   expect { do_something_risky }.to raise_error(PoorRiskDecisionError, /oo ri/)
  #   expect { do_something_risky }.to raise_error("that was too risky")
  #
  #   expect { do_something_risky }.not_to raise_error
  #
  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#38
  def raising(*args, &block); end

  # Matches if the target object responds to all of the names
  # provided. Names can be Strings or Symbols.
  #
  # @example
  #   expect("string").to respond_to(:length)
  #
  # source://rspec-expectations//lib/rspec/matchers.rb#792
  def respond_to(*names); end

  # Matches if the target object responds to all of the names
  # provided. Names can be Strings or Symbols.
  #
  # @example
  #   expect("string").to respond_to(:length)
  #
  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#38
  def responding_to(*args, &block); end

  # Passes if the submitted block returns true. Yields target to the
  # block.
  #
  # Generally speaking, this should be thought of as a last resort when
  # you can't find any other way to specify the behaviour you wish to
  # specify.
  #
  # If you do find yourself in such a situation, you could always write
  # a custom matcher, which would likely make your specs more expressive.
  #
  # @example
  #   expect(5).to satisfy { |n| n > 3 }
  #   expect(5).to satisfy("be greater than 3") { |n| n > 3 }
  # @param description [String] optional description to be used for this matcher.
  #
  # source://rspec-expectations//lib/rspec/matchers.rb#813
  def satisfy(description = T.unsafe(nil), &block); end

  # Passes if the submitted block returns true. Yields target to the
  # block.
  #
  # Generally speaking, this should be thought of as a last resort when
  # you can't find any other way to specify the behaviour you wish to
  # specify.
  #
  # If you do find yourself in such a situation, you could always write
  # a custom matcher, which would likely make your specs more expressive.
  #
  # @example
  #   expect(5).to satisfy { |n| n > 3 }
  #   expect(5).to satisfy("be greater than 3") { |n| n > 3 }
  # @param description [String] optional description to be used for this matcher.
  #
  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#38
  def satisfying(*args, &block); end

  # Matches if the actual value starts with the expected value(s). In the
  # case of a string, matches against the first `expected.length` characters
  # of the actual string. In the case of an array, matches against the first
  # `expected.length` elements of the actual array.
  #
  # @example
  #   expect("this string").to   start_with "this s"
  #   expect([0, 1, 2, 3, 4]).to start_with 0
  #   expect([0, 2, 3, 4, 4]).to start_with 0, 1
  #
  # source://rspec-expectations//lib/rspec/matchers.rb#828
  def start_with(*expected); end

  # Matches if the actual value starts with the expected value(s). In the
  # case of a string, matches against the first `expected.length` characters
  # of the actual string. In the case of an array, matches against the first
  # `expected.length` elements of the actual array.
  #
  # @example
  #   expect("this string").to   start_with "this s"
  #   expect([0, 1, 2, 3, 4]).to start_with 0
  #   expect([0, 2, 3, 4, 4]).to start_with 0, 1
  #
  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#38
  def starting_with(*args, &block); end

  # Given no argument, matches if a proc throws any Symbol.
  #
  # Given a Symbol, matches if the given proc throws the specified Symbol.
  #
  # Given a Symbol and an arg, matches if the given proc throws the
  # specified Symbol with the specified arg.
  #
  # @example
  #   expect { do_something_risky }.to throw_symbol
  #   expect { do_something_risky }.to throw_symbol(:that_was_risky)
  #   expect { do_something_risky }.to throw_symbol(:that_was_risky, 'culprit')
  #
  #   expect { do_something_risky }.not_to throw_symbol
  #   expect { do_something_risky }.not_to throw_symbol(:that_was_risky)
  #   expect { do_something_risky }.not_to throw_symbol(:that_was_risky, 'culprit')
  #
  # source://rspec-expectations//lib/rspec/matchers.rb#850
  def throw_symbol(expected_symbol = T.unsafe(nil), expected_arg = T.unsafe(nil)); end

  # Given no argument, matches if a proc throws any Symbol.
  #
  # Given a Symbol, matches if the given proc throws the specified Symbol.
  #
  # Given a Symbol and an arg, matches if the given proc throws the
  # specified Symbol with the specified arg.
  #
  # @example
  #   expect { do_something_risky }.to throw_symbol
  #   expect { do_something_risky }.to throw_symbol(:that_was_risky)
  #   expect { do_something_risky }.to throw_symbol(:that_was_risky, 'culprit')
  #
  #   expect { do_something_risky }.not_to throw_symbol
  #   expect { do_something_risky }.not_to throw_symbol(:that_was_risky)
  #   expect { do_something_risky }.not_to throw_symbol(:that_was_risky, 'culprit')
  #
  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#38
  def throwing(*args, &block); end

  # Passes if actual == expected +/- delta
  #
  # @example
  #   expect(result).to     be_within(0.5).of(3.0)
  #   expect(result).not_to be_within(0.5).of(3.0)
  #
  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#38
  def within(*args, &block); end

  # Passes if the method called in the expect block yields, regardless
  # of whether or not arguments are yielded.
  #
  # @example
  #   expect { |b| 5.tap(&b) }.to yield_control
  #   expect { |b| "a".to_sym(&b) }.not_to yield_control
  # @note Your expect block must accept a parameter and pass it on to
  #   the method-under-test as a block.
  #
  # source://rspec-expectations//lib/rspec/matchers.rb#871
  def yield_control; end

  # Designed for use with methods that repeatedly yield (such as
  # iterators). Passes if the method called in the expect block yields
  # multiple times with arguments matching those given.
  #
  # Argument matching is done using `===` (the case match operator)
  # and `==`. If the expected and actual arguments match with either
  # operator, the matcher will pass.
  #
  # @example
  #   expect { |b| [1, 2, 3].each(&b) }.to yield_successive_args(1, 2, 3)
  #   expect { |b| { :a => 1, :b => 2 }.each(&b) }.to yield_successive_args([:a, 1], [:b, 2])
  #   expect { |b| [1, 2, 3].each(&b) }.not_to yield_successive_args(1, 2)
  # @note Your expect block must accept a parameter and pass it on to
  #   the method-under-test as a block.
  #
  # source://rspec-expectations//lib/rspec/matchers.rb#940
  def yield_successive_args(*args); end

  # Given no arguments, matches if the method called in the expect
  # block yields with arguments (regardless of what they are or how
  # many there are).
  #
  # Given arguments, matches if the method called in the expect block
  # yields with arguments that match the given arguments.
  #
  # Argument matching is done using `===` (the case match operator)
  # and `==`. If the expected and actual arguments match with either
  # operator, the matcher will pass.
  #
  # @example
  #   expect { |b| 5.tap(&b) }.to yield_with_args # because #tap yields an arg
  #   expect { |b| 5.tap(&b) }.to yield_with_args(5) # because 5 == 5
  #   expect { |b| 5.tap(&b) }.to yield_with_args(Integer) # because Integer === 5
  #   expect { |b| File.open("f.txt", &b) }.to yield_with_args(/txt/) # because /txt/ === "f.txt"
  #
  #   expect { |b| User.transaction(&b) }.not_to yield_with_args # because it yields no args
  #   expect { |b| 5.tap(&b) }.not_to yield_with_args(1, 2, 3)
  # @note Your expect block must accept a parameter and pass it on to
  #   the method-under-test as a block.
  # @note This matcher is not designed for use with methods that yield
  #   multiple times.
  #
  # source://rspec-expectations//lib/rspec/matchers.rb#919
  def yield_with_args(*args); end

  # Passes if the method called in the expect block yields with
  # no arguments. Fails if it does not yield, or yields with arguments.
  #
  # @example
  #   expect { |b| User.transaction(&b) }.to yield_with_no_args
  #   expect { |b| 5.tap(&b) }.not_to yield_with_no_args # because it yields with `5`
  #   expect { |b| "a".to_sym(&b) }.not_to yield_with_no_args # because it does not yield
  # @note Your expect block must accept a parameter and pass it on to
  #   the method-under-test as a block.
  # @note This matcher is not designed for use with methods that yield
  #   multiple times.
  #
  # source://rspec-expectations//lib/rspec/matchers.rb#889
  def yield_with_no_args; end

  # Passes if the method called in the expect block yields, regardless
  # of whether or not arguments are yielded.
  #
  # @example
  #   expect { |b| 5.tap(&b) }.to yield_control
  #   expect { |b| "a".to_sym(&b) }.not_to yield_control
  # @note Your expect block must accept a parameter and pass it on to
  #   the method-under-test as a block.
  #
  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#38
  def yielding_control(*args, &block); end

  # Designed for use with methods that repeatedly yield (such as
  # iterators). Passes if the method called in the expect block yields
  # multiple times with arguments matching those given.
  #
  # Argument matching is done using `===` (the case match operator)
  # and `==`. If the expected and actual arguments match with either
  # operator, the matcher will pass.
  #
  # @example
  #   expect { |b| [1, 2, 3].each(&b) }.to yield_successive_args(1, 2, 3)
  #   expect { |b| { :a => 1, :b => 2 }.each(&b) }.to yield_successive_args([:a, 1], [:b, 2])
  #   expect { |b| [1, 2, 3].each(&b) }.not_to yield_successive_args(1, 2)
  # @note Your expect block must accept a parameter and pass it on to
  #   the method-under-test as a block.
  #
  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#38
  def yielding_successive_args(*args, &block); end

  # Given no arguments, matches if the method called in the expect
  # block yields with arguments (regardless of what they are or how
  # many there are).
  #
  # Given arguments, matches if the method called in the expect block
  # yields with arguments that match the given arguments.
  #
  # Argument matching is done using `===` (the case match operator)
  # and `==`. If the expected and actual arguments match with either
  # operator, the matcher will pass.
  #
  # @example
  #   expect { |b| 5.tap(&b) }.to yield_with_args # because #tap yields an arg
  #   expect { |b| 5.tap(&b) }.to yield_with_args(5) # because 5 == 5
  #   expect { |b| 5.tap(&b) }.to yield_with_args(Integer) # because Integer === 5
  #   expect { |b| File.open("f.txt", &b) }.to yield_with_args(/txt/) # because /txt/ === "f.txt"
  #
  #   expect { |b| User.transaction(&b) }.not_to yield_with_args # because it yields no args
  #   expect { |b| 5.tap(&b) }.not_to yield_with_args(1, 2, 3)
  # @note Your expect block must accept a parameter and pass it on to
  #   the method-under-test as a block.
  # @note This matcher is not designed for use with methods that yield
  #   multiple times.
  #
  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#38
  def yielding_with_args(*args, &block); end

  # Passes if the method called in the expect block yields with
  # no arguments. Fails if it does not yield, or yields with arguments.
  #
  # @example
  #   expect { |b| User.transaction(&b) }.to yield_with_no_args
  #   expect { |b| 5.tap(&b) }.not_to yield_with_no_args # because it yields with `5`
  #   expect { |b| "a".to_sym(&b) }.not_to yield_with_no_args # because it does not yield
  # @note Your expect block must accept a parameter and pass it on to
  #   the method-under-test as a block.
  # @note This matcher is not designed for use with methods that yield
  #   multiple times.
  #
  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#38
  def yielding_with_no_args(*args, &block); end

  private

  # source://rspec-expectations//lib/rspec/matchers.rb#961
  def method_missing(method, *args, **_arg2, &block); end

  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers.rb#974
  def respond_to_missing?(method, *_arg1); end

  class << self
    # Extended from {RSpec::Matchers::DSL#alias_matcher}.
    #
    # source://rspec-expectations//lib/rspec/matchers.rb#250
    def alias_matcher(*args, &block); end

    # Used by rspec-core to clear the state used to generate
    # descriptions after an example.
    #
    # @api private
    #
    # source://rspec-expectations//lib/rspec/matchers/generated_descriptions.rb#11
    def clear_generated_description; end

    # Delegates to {RSpec::Expectations.configuration}.
    # This is here because rspec-core's `expect_with` option
    # looks for a `configuration` method on the mixin
    # (`RSpec::Matchers`) to yield to a block.
    #
    # @return [RSpec::Expectations::Configuration] the configuration object
    #
    # source://rspec-expectations//lib/rspec/matchers.rb#951
    def configuration; end

    # Generates an an example description based on the last expectation.
    # Used by rspec-core's one-liner syntax.
    #
    # @api private
    #
    # source://rspec-expectations//lib/rspec/matchers/generated_descriptions.rb#19
    def generated_description; end

    # @api private
    # @return [Boolean]
    #
    # source://rspec-expectations//lib/rspec/matchers.rb#1008
    def is_a_describable_matcher?(obj); end

    # @api private
    # @return [Boolean]
    #
    # source://rspec-expectations//lib/rspec/matchers.rb#988
    def is_a_matcher?(obj); end

    # @private
    #
    # source://rspec-expectations//lib/rspec/matchers/generated_descriptions.rb#25
    def last_description; end

    # @private
    #
    # source://rspec-expectations//lib/rspec/matchers/generated_descriptions.rb#5
    def last_expectation_handler; end

    # @private
    #
    # source://rspec-expectations//lib/rspec/matchers/generated_descriptions.rb#5
    def last_expectation_handler=(_arg0); end

    # @private
    #
    # source://rspec-expectations//lib/rspec/matchers/generated_descriptions.rb#5
    def last_matcher; end

    # @private
    #
    # source://rspec-expectations//lib/rspec/matchers/generated_descriptions.rb#5
    def last_matcher=(_arg0); end
  end
end

# Decorator that wraps a matcher and overrides `description`
# using the provided block in order to support an alias
# of a matcher. This is intended for use when composing
# matchers, so that you can use an expression like
# `include( a_value_within(0.1).of(3) )` rather than
# `include( be_within(0.1).of(3) )`, and have the corresponding
# description read naturally.
#
# @api private
class RSpec::Matchers::AliasedMatcher < ::RSpec::Matchers::MatcherDelegator
  # @api private
  # @return [AliasedMatcher] a new instance of AliasedMatcher
  #
  # source://rspec-expectations//lib/rspec/matchers/aliased_matcher.rb#13
  def initialize(base_matcher, description_block); end

  # Provides the description of the aliased matcher. Aliased matchers
  # are designed to behave identically to the original matcher except
  # for the description and failure messages. The description is different
  # to reflect the aliased name.
  #
  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/aliased_matcher.rb#36
  def description; end

  # Provides the failure_message of the aliased matcher. Aliased matchers
  # are designed to behave identically to the original matcher except
  # for the description and failure messages. The failure_message is different
  # to reflect the aliased name.
  #
  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/aliased_matcher.rb#46
  def failure_message; end

  # Provides the failure_message_when_negated of the aliased matcher. Aliased matchers
  # are designed to behave identically to the original matcher except
  # for the description and failure messages. The failure_message_when_negated is different
  # to reflect the aliased name.
  #
  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/aliased_matcher.rb#56
  def failure_message_when_negated; end

  # Forward messages on to the wrapped matcher.
  # Since many matchers provide a fluent interface
  # (e.g. `a_value_within(0.1).of(3)`), we need to wrap
  # the returned value if it responds to `description`,
  # so that our override can be applied when it is eventually
  # used.
  #
  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/aliased_matcher.rb#24
  def method_missing(*_arg0); end
end

# Decorator used for matchers that have special implementations of
# operators like `==` and `===`.
#
# @private
class RSpec::Matchers::AliasedMatcherWithOperatorSupport < ::RSpec::Matchers::AliasedMatcher; end

# @private
class RSpec::Matchers::AliasedNegatedMatcher < ::RSpec::Matchers::AliasedMatcher
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/aliased_matcher.rb#80
  def does_not_match?(*args, &block); end

  # source://rspec-expectations//lib/rspec/matchers/aliased_matcher.rb#84
  def failure_message; end

  # source://rspec-expectations//lib/rspec/matchers/aliased_matcher.rb#88
  def failure_message_when_negated; end

  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/aliased_matcher.rb#72
  def matches?(*args, &block); end

  private

  # For a matcher that uses the default failure messages, we prefer to
  # use the override provided by the `description_block`, because it
  # includes the phrasing that the user has expressed a preference for
  # by going through the effort of defining a negated matcher.
  #
  # However, if the override didn't actually change anything, then we
  # should return the opposite failure message instead -- the overriden
  # message is going to be confusing if we return it as-is, as it represents
  # the non-negated failure message for a negated match (or vice versa).
  #
  # source://rspec-expectations//lib/rspec/matchers/aliased_matcher.rb#105
  def optimal_failure_message(same, inverted); end
end

# source://rspec-expectations//lib/rspec/matchers/aliased_matcher.rb#94
RSpec::Matchers::AliasedNegatedMatcher::DefaultFailureMessages = RSpec::Matchers::BuiltIn::BaseMatcher::DefaultFailureMessages

# source://rspec-expectations//lib/rspec/matchers.rb#957
RSpec::Matchers::BE_PREDICATE_REGEX = T.let(T.unsafe(nil), Regexp)

# Container module for all built-in matchers. The matcher classes are here
# (rather than directly under `RSpec::Matchers`) in order to prevent name
# collisions, since `RSpec::Matchers` gets included into the user's namespace.
#
# Autoloading is used to delay when the matcher classes get loaded, allowing
# rspec-matchers to boot faster, and avoiding loading matchers the user is
# not using.
module RSpec::Matchers::BuiltIn; end

# Provides the implementation for `all`.
# Not intended to be instantiated directly.
#
# @api private
class RSpec::Matchers::BuiltIn::All < ::RSpec::Matchers::BuiltIn::BaseMatcher
  # @api private
  # @return [All] a new instance of All
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/all.rb#11
  def initialize(matcher); end

  # @api private
  # @return [String]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/all.rb#37
  def description; end

  # @api private
  # @private
  # @raise [NotImplementedError]
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/all.rb#17
  def does_not_match?(_actual); end

  # @api private
  # @private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/all.rb#9
  def failed_objects; end

  # @api private
  # @return [String]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/all.rb#23
  def failure_message; end

  # @api private
  # @private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/all.rb#9
  def matcher; end

  private

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/all.rb#63
  def add_new_line_if_needed(message); end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/all.rb#58
  def failure_message_for_item(index, failure_message); end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/all.rb#67
  def indent_multiline_message(message); end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/all.rb#50
  def index_failed_objects; end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/all.rb#74
  def initialize_copy(other); end

  # @api private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/all.rb#80
  def iterable?; end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/all.rb#43
  def match(_expected, _actual); end
end

# Used _internally_ as a base class for matchers that ship with
# rspec-expectations and rspec-rails.
#
# ### Warning:
#
# This class is for internal use, and subject to change without notice.
# We strongly recommend that you do not base your custom matchers on this
# class. If/when this changes, we will announce it and remove this warning.
#
# @api private
class RSpec::Matchers::BuiltIn::BaseMatcher
  include ::RSpec::Matchers::Composable
  include ::RSpec::Matchers::BuiltIn::BaseMatcher::HashFormatting
  include ::RSpec::Matchers::BuiltIn::BaseMatcher::DefaultFailureMessages

  # @api private
  # @return [BaseMatcher] a new instance of BaseMatcher
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/base_matcher.rb#28
  def initialize(expected = T.unsafe(nil)); end

  # @api private
  # @private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/base_matcher.rb#23
  def actual; end

  # @api private
  # @private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/base_matcher.rb#97
  def actual_formatted; end

  # Generates a description using {EnglishPhrasing}.
  #
  # @api private
  # @return [String]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/base_matcher.rb#60
  def description; end

  # Matchers are not diffable by default. Override this to make your
  # subclass diffable.
  #
  # @api private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/base_matcher.rb#69
  def diffable?; end

  # @api private
  # @private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/base_matcher.rb#23
  def expected; end

  # @api private
  # @private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/base_matcher.rb#92
  def expected_formatted; end

  # @api private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/base_matcher.rb#87
  def expects_call_stack_jump?; end

  # Used to wrap a block of code that will indicate failure by
  # raising one of the named exceptions.
  #
  # This is used by rspec-rails for some of its matchers that
  # wrap rails' assertions.
  #
  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/base_matcher.rb#47
  def match_unless_raises(*exceptions); end

  # @api private
  # @private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/base_matcher.rb#107
  def matcher_name; end

  # @api private
  # @private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/base_matcher.rb#26
  def matcher_name=(_arg0); end

  # Indicates if the match is successful. Delegates to `match`, which
  # should be defined on a subclass. Takes care of consistently
  # initializing the `actual` attribute.
  #
  # @api private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/base_matcher.rb#36
  def matches?(actual); end

  # :nocov:
  #
  # @api private
  def present_ivars; end

  # @api private
  # @private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/base_matcher.rb#23
  def rescued_exception; end

  # Most matchers are value matchers (i.e. meant to work with `expect(value)`)
  # rather than block matchers (i.e. meant to work with `expect { }`), so
  # this defaults to false. Block matchers must override this to return true.
  #
  # @api private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/base_matcher.rb#77
  def supports_block_expectations?; end

  # @api private
  # @private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/base_matcher.rb#82
  def supports_value_expectations?; end

  private

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/base_matcher.rb#129
  def assert_ivars(*expected_ivars); end

  class << self
    # @api private
    # @private
    #
    # source://rspec-expectations//lib/rspec/matchers/built_in/base_matcher.rb#102
    def matcher_name; end

    private

    # Borrowed from ActiveSupport.
    #
    # @api private
    # @private
    #
    # source://rspec-expectations//lib/rspec/matchers/built_in/base_matcher.rb#117
    def underscore(camel_cased_word); end
  end
end

# Provides default implementations of failure messages, based on the `description`.
#
# @api private
module RSpec::Matchers::BuiltIn::BaseMatcher::DefaultFailureMessages
  # Provides a good generic failure message. Based on `description`.
  # When subclassing, if you are not satisfied with this failure message
  # you often only need to override `description`.
  #
  # @api private
  # @return [String]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/base_matcher.rb#172
  def failure_message; end

  # Provides a good generic negative failure message. Based on `description`.
  # When subclassing, if you are not satisfied with this failure message
  # you often only need to override `description`.
  #
  # @api private
  # @return [String]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/base_matcher.rb#181
  def failure_message_when_negated; end

  class << self
    # @api private
    # @private
    # @return [Boolean]
    #
    # source://rspec-expectations//lib/rspec/matchers/built_in/base_matcher.rb#186
    def has_default_failure_messages?(matcher); end
  end
end

# @api private
# @private
module RSpec::Matchers::BuiltIn::BaseMatcher::HashFormatting
  private

  # `{ :a => 5, :b => 2 }.inspect` produces:
  #
  #     {:a=>5, :b=>2}
  #
  # ...but it looks much better as:
  #
  #     {:a => 5, :b => 2}
  #
  # This is idempotent and safe to run on a string multiple times.
  #
  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/base_matcher.rb#156
  def improve_hash_formatting(inspect_string); end

  class << self
    # `{ :a => 5, :b => 2 }.inspect` produces:
    #
    #     {:a=>5, :b=>2}
    #
    # ...but it looks much better as:
    #
    #     {:a => 5, :b => 2}
    #
    # This is idempotent and safe to run on a string multiple times.
    #
    # @api private
    #
    # source://rspec-expectations//lib/rspec/matchers/built_in/base_matcher.rb#156
    def improve_hash_formatting(inspect_string); end
  end
end

# Used to detect when no arg is passed to `initialize`.
# `nil` cannot be used because it's a valid value to pass.
#
# @api private
#
# source://rspec-expectations//lib/rspec/matchers/built_in/base_matcher.rb#20
RSpec::Matchers::BuiltIn::BaseMatcher::UNDEFINED = T.let(T.unsafe(nil), Object)

# Provides the implementation for `be`.
# Not intended to be instantiated directly.
#
# @api private
class RSpec::Matchers::BuiltIn::Be < ::RSpec::Matchers::BuiltIn::BaseMatcher
  include ::RSpec::Matchers::BuiltIn::BeHelpers

  # @api private
  # @return [Be] a new instance of Be
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/be.rb#104
  def initialize(*args); end

  # source://rspec-expectations//lib/rspec/matchers/built_in/be.rb#121
  def <(operand); end

  # source://rspec-expectations//lib/rspec/matchers/built_in/be.rb#121
  def <=(operand); end

  # source://rspec-expectations//lib/rspec/matchers/built_in/be.rb#121
  def ==(operand); end

  # source://rspec-expectations//lib/rspec/matchers/built_in/be.rb#121
  def ===(operand); end

  # source://rspec-expectations//lib/rspec/matchers/built_in/be.rb#121
  def =~(operand); end

  # source://rspec-expectations//lib/rspec/matchers/built_in/be.rb#121
  def >(operand); end

  # source://rspec-expectations//lib/rspec/matchers/built_in/be.rb#121
  def >=(operand); end

  # @api private
  # @return [String]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/be.rb#110
  def failure_message; end

  # @api private
  # @return [String]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/be.rb#116
  def failure_message_when_negated; end

  private

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/be.rb#128
  def match(_, actual); end
end

# Provides the implementation for `be_a_kind_of`.
# Not intended to be instantiated directly.
#
# @api private
class RSpec::Matchers::BuiltIn::BeAKindOf < ::RSpec::Matchers::BuiltIn::BaseMatcher
  private

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/be_kind_of.rb#10
  def match(expected, actual); end
end

# Provides the implementation for `be_an_instance_of`.
# Not intended to be instantiated directly.
#
# @api private
class RSpec::Matchers::BuiltIn::BeAnInstanceOf < ::RSpec::Matchers::BuiltIn::BaseMatcher
  # @api private
  # @return [String]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/be_instance_of.rb#10
  def description; end

  private

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/be_instance_of.rb#16
  def match(expected, actual); end
end

# Provides the implementation for `be_between`.
# Not intended to be instantiated directly.
#
# @api private
class RSpec::Matchers::BuiltIn::BeBetween < ::RSpec::Matchers::BuiltIn::BaseMatcher
  # @api private
  # @return [BeBetween] a new instance of BeBetween
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/be_between.rb#8
  def initialize(min, max); end

  # @api private
  # @return [String]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/be_between.rb#57
  def description; end

  # Makes the between comparison exclusive.
  #
  # @api public
  # @example
  #   expect(3).to be_between(2, 4).exclusive
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/be_between.rb#33
  def exclusive; end

  # @api private
  # @return [String]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/be_between.rb#51
  def failure_message; end

  # Makes the between comparison inclusive.
  #
  # @api public
  # @example
  #   expect(3).to be_between(2, 3).inclusive
  # @note The matcher is inclusive by default; this simply provides
  #   a way to be more explicit about it.
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/be_between.rb#21
  def inclusive; end

  # @api private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/be_between.rb#42
  def matches?(actual); end

  private

  # @api private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/be_between.rb#63
  def comparable?; end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/be_between.rb#71
  def compare; end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/be_between.rb#67
  def not_comparable_clause; end
end

# Provides the implementation of `be <operator> value`.
# Not intended to be instantiated directly.
#
# @api private
class RSpec::Matchers::BuiltIn::BeComparedTo < ::RSpec::Matchers::BuiltIn::BaseMatcher
  include ::RSpec::Matchers::BuiltIn::BeHelpers

  # @api private
  # @return [BeComparedTo] a new instance of BeComparedTo
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/be.rb#139
  def initialize(operand, operator); end

  # @api private
  # @return [String]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/be.rb#178
  def description; end

  # @api private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/be.rb#151
  def does_not_match?(actual); end

  # @api private
  # @return [String]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/be.rb#159
  def failure_message; end

  # @api private
  # @return [String]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/be.rb#166
  def failure_message_when_negated; end

  # @api private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/be.rb#145
  def matches?(actual); end

  private

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/be.rb#184
  def perform_match(actual); end
end

# Provides the implementation for `be_falsey`.
# Not intended to be instantiated directly.
#
# @api private
class RSpec::Matchers::BuiltIn::BeFalsey < ::RSpec::Matchers::BuiltIn::BaseMatcher
  # @api private
  # @return [String]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/be.rb#33
  def failure_message; end

  # @api private
  # @return [String]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/be.rb#39
  def failure_message_when_negated; end

  private

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/be.rb#45
  def match(_, actual); end
end

# @private
module RSpec::Matchers::BuiltIn::BeHelpers
  private

  # source://rspec-expectations//lib/rspec/matchers/built_in/be.rb#77
  def args_to_s; end

  # source://rspec-expectations//lib/rspec/matchers/built_in/be.rb#93
  def args_to_sentence; end

  # source://rspec-expectations//lib/rspec/matchers/built_in/be.rb#89
  def expected_to_sentence; end

  # source://rspec-expectations//lib/rspec/matchers/built_in/be.rb#85
  def inspected_args; end

  # source://rspec-expectations//lib/rspec/matchers/built_in/be.rb#81
  def parenthesize(string); end
end

# Provides the implementation for `be_nil`.
# Not intended to be instantiated directly.
#
# @api private
class RSpec::Matchers::BuiltIn::BeNil < ::RSpec::Matchers::BuiltIn::BaseMatcher
  # @api private
  # @return [String]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/be.rb#56
  def failure_message; end

  # @api private
  # @return [String]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/be.rb#62
  def failure_message_when_negated; end

  private

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/be.rb#68
  def match(_, actual); end
end

# Provides the implementation of `be_<predicate>`.
# Not intended to be instantiated directly.
#
# @api private
class RSpec::Matchers::BuiltIn::BePredicate < ::RSpec::Matchers::BuiltIn::DynamicPredicate
  private

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/has.rb#149
  def failure_to_respond_explanation; end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/has.rb#141
  def predicate; end

  # @api private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/has.rb#157
  def predicate_accessible?; end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/has.rb#145
  def predicate_method_name; end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/has.rb#161
  def present_tense_predicate; end
end

# @api private
#
# source://rspec-expectations//lib/rspec/matchers/built_in/has.rb#139
RSpec::Matchers::BuiltIn::BePredicate::REGEX = T.let(T.unsafe(nil), Regexp)

# Provides the implementation for `be_truthy`.
# Not intended to be instantiated directly.
#
# @api private
class RSpec::Matchers::BuiltIn::BeTruthy < ::RSpec::Matchers::BuiltIn::BaseMatcher
  # @api private
  # @return [String]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/be.rb#10
  def failure_message; end

  # @api private
  # @return [String]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/be.rb#16
  def failure_message_when_negated; end

  private

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/be.rb#22
  def match(_, actual); end
end

# Provides the implementation for `be_within`.
# Not intended to be instantiated directly.
#
# @api private
class RSpec::Matchers::BuiltIn::BeWithin < ::RSpec::Matchers::BuiltIn::BaseMatcher
  # @api private
  # @return [BeWithin] a new instance of BeWithin
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/be_within.rb#8
  def initialize(delta); end

  # @api private
  # @return [String]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/be_within.rb#52
  def description; end

  # @api private
  # @return [String]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/be_within.rb#40
  def failure_message; end

  # @api private
  # @return [String]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/be_within.rb#46
  def failure_message_when_negated; end

  # @api private
  # @private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/be_within.rb#32
  def matches?(actual); end

  # Sets the expected value.
  #
  # @api public
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/be_within.rb#14
  def of(expected); end

  # Sets the expected value, and makes the matcher do
  # a percent comparison.
  #
  # @api public
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/be_within.rb#24
  def percent_of(expected); end

  private

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/be_within.rb#62
  def needs_expected; end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/be_within.rb#66
  def not_numeric_clause; end

  # @api private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/be_within.rb#58
  def numeric?; end
end

# @private
module RSpec::Matchers::BuiltIn::CaptureStderr
  class << self
    # source://rspec-expectations//lib/rspec/matchers/built_in/output.rb#164
    def capture(block); end

    # source://rspec-expectations//lib/rspec/matchers/built_in/output.rb#160
    def name; end
  end
end

# @private
module RSpec::Matchers::BuiltIn::CaptureStdout
  class << self
    # source://rspec-expectations//lib/rspec/matchers/built_in/output.rb#144
    def capture(block); end

    # source://rspec-expectations//lib/rspec/matchers/built_in/output.rb#140
    def name; end
  end
end

# @private
class RSpec::Matchers::BuiltIn::CaptureStreamToTempfile < ::Struct
  # source://rspec-expectations//lib/rspec/matchers/built_in/output.rb#180
  def capture(block); end
end

# Provides the implementation for `change`.
# Not intended to be instantiated directly.
#
# @api private
class RSpec::Matchers::BuiltIn::Change < ::RSpec::Matchers::BuiltIn::BaseMatcher
  # @api private
  # @return [Change] a new instance of Change
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/change.rb#87
  def initialize(receiver = T.unsafe(nil), message = T.unsafe(nil), &block); end

  # Specifies the delta of the expected change.
  #
  # @api public
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/change.rb#10
  def by(expected_delta); end

  # Specifies a minimum delta of the expected change.
  #
  # @api public
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/change.rb#18
  def by_at_least(minimum); end

  # Specifies a maximum delta of the expected change.
  #
  # @api public
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/change.rb#26
  def by_at_most(maximum); end

  # @api private
  # @return [String]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/change.rb#71
  def description; end

  # @api private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/change.rb#50
  def does_not_match?(event_proc); end

  # @api private
  # @return [String]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/change.rb#57
  def failure_message; end

  # @api private
  # @return [String]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/change.rb#64
  def failure_message_when_negated; end

  # Specifies the original value.
  #
  # @api public
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/change.rb#40
  def from(value); end

  # @api private
  # @private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/change.rb#45
  def matches?(event_proc); end

  # @api private
  # @private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/change.rb#76
  def supports_block_expectations?; end

  # @api private
  # @private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/change.rb#81
  def supports_value_expectations?; end

  # Specifies the new value you expect.
  #
  # @api public
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/change.rb#34
  def to(value); end

  private

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/change.rb#93
  def change_details; end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/change.rb#119
  def negative_failure_reason; end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/change.rb#97
  def perform_change(event_proc); end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/change.rb#114
  def positive_failure_reason; end

  # @api private
  # @raise [SyntaxError]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/change.rb#109
  def raise_block_syntax_error; end
end

# Encapsulates the details of the before/after values.
#
# Note that this class exposes the `actual_after` value, to allow the
# matchers above to derive failure messages, etc from the value on demand
# as needed, but it intentionally does _not_ expose the `actual_before`
# value. Some usages of the `change` matcher mutate a specific object
# returned by the value proc, which means that failure message snippets,
# etc, which are derived from the `before` value may not be accurate if
# they are lazily computed as needed. We must pre-compute them before
# applying the change in the `expect` block. To ensure that all `change`
# matchers do that properly, we do not expose the `actual_before` value.
# Instead, matchers must pass a block to `perform_change`, which yields
# the `actual_before` value before applying the change.
#
# @private
class RSpec::Matchers::BuiltIn::ChangeDetails
  # @return [ChangeDetails] a new instance of ChangeDetails
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/change.rb#357
  def initialize(matcher_name, receiver = T.unsafe(nil), message = T.unsafe(nil), &block); end

  # Returns the value of attribute actual_after.
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/change.rb#353
  def actual_after; end

  # source://rspec-expectations//lib/rspec/matchers/built_in/change.rb#418
  def actual_delta; end

  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/change.rb#402
  def changed?; end

  # @yield [@actual_before]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/change.rb#389
  def perform_change(event_proc); end

  # source://rspec-expectations//lib/rspec/matchers/built_in/change.rb#378
  def value_representation; end

  private

  # source://rspec-expectations//lib/rspec/matchers/built_in/change.rb#424
  def evaluate_value_proc; end

  # source://rspec-expectations//lib/rspec/matchers/built_in/change.rb#438
  def extract_value_block_snippet; end

  # source://rspec-expectations//lib/rspec/matchers/built_in/change.rb#428
  def message_notation(receiver, message); end
end

module RSpec::Matchers::BuiltIn::ChangeDetails::UNDEFINED; end

# Used to specify a change from a specific value
# (and, optionally, to a specific value).
#
# @api private
class RSpec::Matchers::BuiltIn::ChangeFromValue < ::RSpec::Matchers::BuiltIn::SpecificValuesChange
  # @api private
  # @return [ChangeFromValue] a new instance of ChangeFromValue
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/change.rb#271
  def initialize(change_details, expected_before); end

  # @api private
  # @private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/change.rb#285
  def does_not_match?(event_proc); end

  # @api private
  # @private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/change.rb#295
  def failure_message_when_negated; end

  # Specifies the new value you expect.
  #
  # @api public
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/change.rb#278
  def to(value); end

  private

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/change.rb#303
  def change_description; end
end

# Used to specify a relative change.
#
# @api private
class RSpec::Matchers::BuiltIn::ChangeRelatively < ::RSpec::Matchers::BuiltIn::BaseMatcher
  # @api private
  # @return [ChangeRelatively] a new instance of ChangeRelatively
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/change.rb#129
  def initialize(change_details, expected_delta, relativity, &comparer); end

  # @api private
  # @private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/change.rb#156
  def description; end

  # @api private
  # @private
  # @raise [NotImplementedError]
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/change.rb#150
  def does_not_match?(_event_proc); end

  # @api private
  # @private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/change.rb#137
  def failure_message; end

  # @api private
  # @private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/change.rb#144
  def matches?(event_proc); end

  # @api private
  # @private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/change.rb#162
  def supports_block_expectations?; end

  # @api private
  # @private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/change.rb#167
  def supports_value_expectations?; end

  private

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/change.rb#173
  def failure_reason; end
end

# Used to specify a change to a specific value
# (and, optionally, from a specific value).
#
# @api private
class RSpec::Matchers::BuiltIn::ChangeToValue < ::RSpec::Matchers::BuiltIn::SpecificValuesChange
  # @api private
  # @return [ChangeToValue] a new instance of ChangeToValue
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/change.rb#312
  def initialize(change_details, expected_after); end

  # @api private
  # @private
  # @raise [NotImplementedError]
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/change.rb#326
  def does_not_match?(_event_proc); end

  # Specifies the original value.
  #
  # @api public
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/change.rb#319
  def from(value); end

  private

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/change.rb#333
  def change_description; end
end

# Base class for `and` and `or` compound matchers.
#
# @api private
class RSpec::Matchers::BuiltIn::Compound < ::RSpec::Matchers::BuiltIn::BaseMatcher
  # @api private
  # @return [Compound] a new instance of Compound
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/compound.rb#10
  def initialize(matcher_1, matcher_2); end

  # @api private
  # @return [String]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/compound.rb#25
  def description; end

  # @api private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/compound.rb#49
  def diffable?; end

  # @api private
  # @private
  # @raise [NotImplementedError]
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/compound.rb#16
  def does_not_match?(_actual); end

  # @api private
  # @private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/compound.rb#8
  def evaluator; end

  # @api private
  # @return [RSpec::Matchers::ExpectedsForMultipleDiffs]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/compound.rb#55
  def expected; end

  # @api private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/compound.rb#42
  def expects_call_stack_jump?; end

  # @api private
  # @private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/compound.rb#8
  def matcher_1; end

  # @api private
  # @private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/compound.rb#8
  def matcher_2; end

  # @api private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/compound.rb#30
  def supports_block_expectations?; end

  # @api private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/compound.rb#36
  def supports_value_expectations?; end

  protected

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/compound.rb#62
  def diffable_matcher_list; end

  private

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/compound.rb#93
  def compound_failure_message; end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/compound.rb#125
  def diffable_matcher_list_for(matcher); end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/compound.rb#87
  def indent_multiline_message(message); end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/compound.rb#71
  def initialize_copy(other); end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/compound.rb#77
  def match(_expected, actual); end

  # @api private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/compound.rb#99
  def matcher_1_matches?; end

  # @api private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/compound.rb#103
  def matcher_2_matches?; end

  # @api private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/compound.rb#119
  def matcher_is_diffable?(matcher); end

  # @api private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/compound.rb#107
  def matcher_supports_block_expectations?(matcher); end

  # @api private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/compound.rb#113
  def matcher_supports_value_expectations?(matcher); end
end

# Matcher used to represent a compound `and` expectation.
#
# @api public
class RSpec::Matchers::BuiltIn::Compound::And < ::RSpec::Matchers::BuiltIn::Compound
  # @api private
  # @return [String]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/compound.rb#245
  def failure_message; end

  private

  # @api public
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/compound.rb#262
  def conjunction; end

  # @api public
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/compound.rb#257
  def match(*_arg0); end
end

# Normally, we evaluate the matching sequentially. For an expression like
# `expect(x).to foo.and bar`, this becomes:
#
#   expect(x).to foo
#   expect(x).to bar
#
# For block expectations, we need to nest them instead, so that
# `expect { x }.to foo.and bar` becomes:
#
#   expect {
#     expect { x }.to foo
#   }.to bar
#
# This is necessary so that the `expect` block is only executed once.
#
# @api private
class RSpec::Matchers::BuiltIn::Compound::NestedEvaluator
  # @api private
  # @return [NestedEvaluator] a new instance of NestedEvaluator
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/compound.rb#157
  def initialize(actual, matcher_1, matcher_2); end

  # @api private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/compound.rb#170
  def matcher_matches?(matcher); end

  private

  # Some block matchers (such as `yield_xyz`) pass args to the `expect` block.
  # When such a matcher is used as the outer matcher, we need to forward the
  # the args on to the `expect` block.
  #
  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/compound.rb#184
  def inner_matcher_block(outer_args); end

  # For a matcher like `raise_error` or `throw_symbol`, where the block will jump
  # up the call stack, we need to order things so that it is the inner matcher.
  # For example, we need it to be this:
  #
  #   expect {
  #     expect {
  #       x += 1
  #       raise "boom"
  #     }.to raise_error("boom")
  #   }.to change { x }.by(1)
  #
  # ...rather than:
  #
  #   expect {
  #     expect {
  #       x += 1
  #       raise "boom"
  #     }.to change { x }.by(1)
  #   }.to raise_error("boom")
  #
  # In the latter case, the after-block logic in the `change` matcher would never
  # get executed because the `raise "boom"` line would jump to the `rescue` in the
  # `raise_error` logic, so only the former case will work properly.
  #
  # This method figures out which matcher should be the inner matcher and which
  # should be the outer matcher.
  #
  # @api private
  # @raise [ArgumentError]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/compound.rb#224
  def order_block_matchers; end

  class << self
    # @api private
    # @return [Boolean]
    #
    # source://rspec-expectations//lib/rspec/matchers/built_in/compound.rb#233
    def matcher_expects_call_stack_jump?(matcher); end
  end
end

# Matcher used to represent a compound `or` expectation.
#
# @api public
class RSpec::Matchers::BuiltIn::Compound::Or < ::RSpec::Matchers::BuiltIn::Compound
  # @api private
  # @return [String]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/compound.rb#272
  def failure_message; end

  private

  # @api public
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/compound.rb#283
  def conjunction; end

  # @api public
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/compound.rb#278
  def match(*_arg0); end
end

# For value expectations, we can evaluate the matchers sequentially.
#
# @api private
class RSpec::Matchers::BuiltIn::Compound::SequentialEvaluator
  # @api private
  # @return [SequentialEvaluator] a new instance of SequentialEvaluator
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/compound.rb#133
  def initialize(actual, *_arg1); end

  # @api private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/compound.rb#137
  def matcher_matches?(matcher); end
end

# Provides the implementation for `contain_exactly` and `match_array`.
# Not intended to be instantiated directly.
#
# @api private
class RSpec::Matchers::BuiltIn::ContainExactly < ::RSpec::Matchers::BuiltIn::BaseMatcher
  # @api private
  # @return [String]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/contain_exactly.rb#29
  def description; end

  # @api private
  # @return [String]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/contain_exactly.rb#11
  def failure_message; end

  # @api private
  # @return [String]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/contain_exactly.rb#22
  def failure_message_when_negated; end

  # @api private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/contain_exactly.rb#34
  def matches?(actual); end

  private

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/contain_exactly.rb#56
  def actual_collection_line; end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/contain_exactly.rb#135
  def best_solution; end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/contain_exactly.rb#94
  def convert_actual_to_an_array; end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/contain_exactly.rb#68
  def describe_collection(collection, surface_descriptions = T.unsafe(nil)); end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/contain_exactly.rb#52
  def expected_collection_line; end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/contain_exactly.rb#64
  def extra_elements_line; end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/contain_exactly.rb#129
  def extra_items; end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/contain_exactly.rb#44
  def generate_failure_message; end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/contain_exactly.rb#81
  def match(_expected, _actual); end

  # This cannot always work (e.g. when dealing with unsortable items,
  # or matchers as expected items), but it's practically free compared to
  # the slowness of the full matching algorithm, and in common cases this
  # works, so it's worth a try.
  #
  # @api private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/contain_exactly.rb#90
  def match_when_sorted?; end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/contain_exactly.rb#76
  def message_line(prefix, collection, surface_descriptions = T.unsafe(nil)); end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/contain_exactly.rb#60
  def missing_elements_line; end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/contain_exactly.rb#123
  def missing_items; end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/contain_exactly.rb#139
  def pairings_maximizer; end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/contain_exactly.rb#104
  def safe_sort(array); end

  # @api private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/contain_exactly.rb#118
  def to_a_disallowed?(object); end
end

# Once we started supporting composing matchers, the algorithm for this matcher got
# much more complicated. Consider this expression:
#
#   expect(["fool", "food"]).to contain_exactly(/foo/, /fool/)
#
# This should pass (because we can pair /fool/ with "fool" and /foo/ with "food"), but
# the original algorithm used by this matcher would pair the first elements it could
# (/foo/ with "fool"), which would leave /fool/ and "food" unmatched.  When we have
# an expected element which is a matcher that matches a superset of actual items
# compared to another expected element matcher, we need to consider every possible pairing.
#
# This class is designed to maximize the number of actual/expected pairings -- or,
# conversely, to minimize the number of unpaired items. It's essentially a brute
# force solution, but with a few heuristics applied to reduce the size of the
# problem space:
#
#   * Any items which match none of the items in the other list are immediately
#     placed into the `unmatched_expected_indexes` or `unmatched_actual_indexes` array.
#     The extra items and missing items in the matcher failure message are derived
#     from these arrays.
#   * Any items which reciprocally match only each other are paired up and not
#     considered further.
#
# What's left is only the items which match multiple items from the other list
# (or vice versa). From here, it performs a brute-force depth-first search,
# looking for a solution which pairs all elements in both lists, or, barring that,
# that produces the fewest unmatched items.
#
# @api private
# @private
class RSpec::Matchers::BuiltIn::ContainExactly::PairingsMaximizer
  # @api private
  # @return [PairingsMaximizer] a new instance of PairingsMaximizer
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/contain_exactly.rb#223
  def initialize(expected_to_actual_matched_indexes, actual_to_expected_matched_indexes); end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/contain_exactly.rb#221
  def actual_to_expected_matched_indexes; end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/contain_exactly.rb#221
  def expected_to_actual_matched_indexes; end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/contain_exactly.rb#237
  def find_best_solution; end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/contain_exactly.rb#221
  def solution; end

  private

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/contain_exactly.rb#299
  def apply_pairing_to(indeterminates, original_matches, other_list_index); end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/contain_exactly.rb#283
  def best_solution_for_pairing(expected_index, actual_index); end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/contain_exactly.rb#263
  def categorize_indexes(indexes_to_categorize, other_indexes); end

  # @api private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/contain_exactly.rb#278
  def reciprocal_single_match?(matches, index, other_list); end
end

# Starting solution that is worse than any other real solution.
#
# @api private
# @private
class RSpec::Matchers::BuiltIn::ContainExactly::PairingsMaximizer::NullSolution
  class << self
    # source://rspec-expectations//lib/rspec/matchers/built_in/contain_exactly.rb#258
    def worse_than?(_other); end
  end
end

# @api private
# @private
class RSpec::Matchers::BuiltIn::ContainExactly::PairingsMaximizer::Solution < ::Struct
  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/contain_exactly.rb#210
  def +(derived_candidate_solution); end

  # @api private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/contain_exactly.rb#194
  def candidate?; end

  # @api private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/contain_exactly.rb#199
  def ideal?; end

  # Returns the value of attribute indeterminate_actual_indexes
  #
  # @return [Object] the current value of indeterminate_actual_indexes
  def indeterminate_actual_indexes; end

  # Sets the attribute indeterminate_actual_indexes
  #
  # @param value [Object] the value to set the attribute indeterminate_actual_indexes to.
  # @return [Object] the newly set value
  def indeterminate_actual_indexes=(_); end

  # Returns the value of attribute indeterminate_expected_indexes
  #
  # @return [Object] the current value of indeterminate_expected_indexes
  def indeterminate_expected_indexes; end

  # Sets the attribute indeterminate_expected_indexes
  #
  # @param value [Object] the value to set the attribute indeterminate_expected_indexes to.
  # @return [Object] the newly set value
  def indeterminate_expected_indexes=(_); end

  # Returns the value of attribute unmatched_actual_indexes
  #
  # @return [Object] the current value of unmatched_actual_indexes
  def unmatched_actual_indexes; end

  # Sets the attribute unmatched_actual_indexes
  #
  # @param value [Object] the value to set the attribute unmatched_actual_indexes to.
  # @return [Object] the newly set value
  def unmatched_actual_indexes=(_); end

  # Returns the value of attribute unmatched_expected_indexes
  #
  # @return [Object] the current value of unmatched_expected_indexes
  def unmatched_expected_indexes; end

  # Sets the attribute unmatched_expected_indexes
  #
  # @param value [Object] the value to set the attribute unmatched_expected_indexes to.
  # @return [Object] the newly set value
  def unmatched_expected_indexes=(_); end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/contain_exactly.rb#206
  def unmatched_item_count; end

  # @api private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/contain_exactly.rb#190
  def worse_than?(other); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# Abstract class to implement `once`, `at_least` and other
# count constraints.
#
# @api private
module RSpec::Matchers::BuiltIn::CountExpectation
  # Specifies the minimum number of times the method is expected to match
  #
  # @api public
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/count_expectation.rb#42
  def at_least(number); end

  # Specifies the maximum number of times the method is expected to match
  #
  # @api public
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/count_expectation.rb#35
  def at_most(number); end

  # Specifies that the method is expected to match the given number of times.
  #
  # @api public
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/count_expectation.rb#28
  def exactly(number); end

  # Specifies that the method is expected to match once.
  #
  # @api public
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/count_expectation.rb#10
  def once; end

  # Specifies that the method is expected to match thrice.
  #
  # @api public
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/count_expectation.rb#22
  def thrice; end

  # No-op. Provides syntactic sugar.
  #
  # @api public
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/count_expectation.rb#49
  def times; end

  # Specifies that the method is expected to match twice.
  #
  # @api public
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/count_expectation.rb#16
  def twice; end

  protected

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/count_expectation.rb#55
  def count_expectation_type; end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/count_expectation.rb#55
  def expected_count; end

  private

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/count_expectation.rb#120
  def count_constraint_to_number(n); end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/count_expectation.rb#139
  def count_expectation_description; end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/count_expectation.rb#143
  def count_failure_reason(action); end

  # @api private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/count_expectation.rb#60
  def cover?(count, number); end

  # @api private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/count_expectation.rb#69
  def expected_count_matches?(actual_count); end

  # @api private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/count_expectation.rb#77
  def has_expected_count?; end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/count_expectation.rb#157
  def human_readable_count(count); end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/count_expectation.rb#148
  def human_readable_expectation_type; end

  # @api private
  # @raise [ArgumentError]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/count_expectation.rb#100
  def raise_impossible_count_expectation(count); end

  # @api private
  # @raise [ArgumentError]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/count_expectation.rb#109
  def raise_unsupported_count_expectation; end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/count_expectation.rb#81
  def set_expected_count(relativity, n); end

  # @api private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/count_expectation.rb#132
  def unsupported_count_expectation?(relativity); end
end

# Provides the implementation for `cover`.
# Not intended to be instantiated directly.
#
# @api private
class RSpec::Matchers::BuiltIn::Cover < ::RSpec::Matchers::BuiltIn::BaseMatcher
  # @api private
  # @return [Cover] a new instance of Cover
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/cover.rb#8
  def initialize(*expected); end

  # @api private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/cover.rb#17
  def does_not_match?(range); end

  # @api private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/cover.rb#12
  def matches?(range); end
end

# Provides the implementation for dynamic predicate matchers.
# Not intended to be inherited directly.
#
# @api private
class RSpec::Matchers::BuiltIn::DynamicPredicate < ::RSpec::Matchers::BuiltIn::BaseMatcher
  include ::RSpec::Matchers::BuiltIn::BeHelpers

  # @api private
  # @return [DynamicPredicate] a new instance of DynamicPredicate
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/has.rb#10
  def initialize(method_name, *args, **_arg2, &block); end

  # @api private
  # @return [String]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/has.rb#43
  def description; end

  # @api private
  # @private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/has.rb#23
  def does_not_match?(actual, &block); end

  # @api private
  # @return [String]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/has.rb#31
  def failure_message; end

  # @api private
  # @return [String]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/has.rb#37
  def failure_message_when_negated; end

  # @api private
  # @private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/has.rb#16
  def matches?(actual, &block); end

  private

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/has.rb#99
  def expectation_of(value); end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/has.rb#94
  def failure_message_expecting(value); end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/has.rb#115
  def failure_to_respond_explanation; end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/has.rb#90
  def method_description; end

  # @api private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/has.rb#49
  def predicate_accessible?; end

  # @api private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/has.rb#74
  def predicate_matches?(value = T.unsafe(nil)); end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/has.rb#70
  def predicate_method_name; end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/has.rb#66
  def predicate_result; end

  # :nocov:
  #
  # @api private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/has.rb#61
  def private_predicate?; end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/has.rb#82
  def root; end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/has.rb#109
  def validity_message; end
end

# Provides the implementation for `end_with`.
# Not intended to be instantiated directly.
#
# @api private
class RSpec::Matchers::BuiltIn::EndWith < ::RSpec::Matchers::BuiltIn::StartOrEndWith
  private

  # @api private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/start_or_end_with.rb#88
  def element_matches?; end

  # @api private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/start_or_end_with.rb#84
  def subset_matches?; end
end

# Provides the implementation for `eq`.
# Not intended to be instantiated directly.
#
# @api private
class RSpec::Matchers::BuiltIn::Eq < ::RSpec::Matchers::BuiltIn::BaseMatcher
  # @api private
  # @return [String]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/eq.rb#22
  def description; end

  # @api private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/eq.rb#28
  def diffable?; end

  # @api private
  # @return [String]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/eq.rb#10
  def failure_message; end

  # @api private
  # @return [String]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/eq.rb#16
  def failure_message_when_negated; end

  private

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/eq.rb#34
  def match(expected, actual); end
end

# Provides the implementation for `eql`.
# Not intended to be instantiated directly.
#
# @api private
class RSpec::Matchers::BuiltIn::Eql < ::RSpec::Matchers::BuiltIn::BaseMatcher
  # @api private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/eql.rb#22
  def diffable?; end

  # @api private
  # @return [String]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/eql.rb#10
  def failure_message; end

  # @api private
  # @return [String]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/eql.rb#16
  def failure_message_when_negated; end

  private

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/eql.rb#28
  def match(expected, actual); end
end

# Provides the implementation for `equal`.
# Not intended to be instantiated directly.
#
# @api private
class RSpec::Matchers::BuiltIn::Equal < ::RSpec::Matchers::BuiltIn::BaseMatcher
  # @api private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/equal.rb#33
  def diffable?; end

  # @api private
  # @return [String]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/equal.rb#10
  def failure_message; end

  # @api private
  # @return [String]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/equal.rb#20
  def failure_message_when_negated; end

  private

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/equal.rb#49
  def actual_inspected; end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/equal.rb#61
  def detailed_failure_message; end

  # @api private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/equal.rb#45
  def expected_is_a_literal_singleton?; end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/equal.rb#75
  def inspect_object(o); end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/equal.rb#39
  def match(expected, actual); end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/equal.rb#57
  def simple_failure_message; end
end

# @api private
#
# source://rspec-expectations//lib/rspec/matchers/built_in/equal.rb#43
RSpec::Matchers::BuiltIn::Equal::LITERAL_SINGLETONS = T.let(T.unsafe(nil), Array)

# Provides the implementation for `exist`.
# Not intended to be instantiated directly.
#
# @api private
class RSpec::Matchers::BuiltIn::Exist < ::RSpec::Matchers::BuiltIn::BaseMatcher
  # @api private
  # @return [Exist] a new instance of Exist
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/exist.rb#8
  def initialize(*expected); end

  # @api private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/exist.rb#22
  def does_not_match?(actual); end

  # @api private
  # @return [String]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/exist.rb#30
  def failure_message; end

  # @api private
  # @return [String]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/exist.rb#36
  def failure_message_when_negated; end

  # @api private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/exist.rb#14
  def matches?(actual); end
end

# Simple class for memoizing actual/expected for this matcher
# and examining the match
#
# @api private
class RSpec::Matchers::BuiltIn::Exist::ExistenceTest < ::Struct
  # @api private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/exist.rb#52
  def actual_exists?; end

  # @api private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/exist.rb#46
  def valid_test?; end

  # @api private
  # @return [String]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/exist.rb#58
  def validity_message; end

  private

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/exist.rb#83
  def deprecated(predicate, actual); end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/exist.rb#75
  def existence_values; end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/exist.rb#79
  def predicates; end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/exist.rb#71
  def uniq_truthy_values; end
end

# Provides the implementation for `has_<predicate>`.
# Not intended to be instantiated directly.
#
# @api private
class RSpec::Matchers::BuiltIn::Has < ::RSpec::Matchers::BuiltIn::DynamicPredicate
  private

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/has.rb#129
  def predicate; end
end

# @api private
#
# source://rspec-expectations//lib/rspec/matchers/built_in/has.rb#127
RSpec::Matchers::BuiltIn::Has::REGEX = T.let(T.unsafe(nil), Regexp)

# Provides the implementation for `have_attributes`.
# Not intended to be instantiated directly.
#
# @api private
class RSpec::Matchers::BuiltIn::HaveAttributes < ::RSpec::Matchers::BuiltIn::BaseMatcher
  # @api private
  # @return [HaveAttributes] a new instance of HaveAttributes
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/have_attributes.rb#11
  def initialize(expected); end

  # @api private
  # @private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/have_attributes.rb#19
  def actual; end

  # @api private
  # @return [String]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/have_attributes.rb#43
  def description; end

  # @api private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/have_attributes.rb#50
  def diffable?; end

  # @api private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/have_attributes.rb#34
  def does_not_match?(actual); end

  # @api private
  # @return [String]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/have_attributes.rb#56
  def failure_message; end

  # @api private
  # @return [String]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/have_attributes.rb#64
  def failure_message_when_negated; end

  # @api private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/have_attributes.rb#25
  def matches?(actual); end

  # @api private
  # @private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/have_attributes.rb#9
  def respond_to_failed; end

  private

  # @api private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/have_attributes.rb#85
  def actual_has_attribute?(attribute_key, attribute_value); end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/have_attributes.rb#70
  def cache_all_values; end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/have_attributes.rb#107
  def formatted_values; end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/have_attributes.rb#78
  def perform_match(predicate); end

  # @api private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/have_attributes.rb#89
  def respond_to_attributes?; end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/have_attributes.rb#99
  def respond_to_failure_message_or; end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/have_attributes.rb#95
  def respond_to_matcher; end
end

# Provides the implementation for `include`.
# Not intended to be instantiated directly.
#
# @api private
class RSpec::Matchers::BuiltIn::Include < ::RSpec::Matchers::BuiltIn::BaseMatcher
  include ::RSpec::Matchers::BuiltIn::CountExpectation

  # @api private
  # @return [Include] a new instance of Include
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/include.rb#15
  def initialize(*expecteds); end

  # @api private
  # @return [String]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/include.rb#43
  def description; end

  # @api private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/include.rb#61
  def diffable?; end

  # @api private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/include.rb#32
  def does_not_match?(actual); end

  # @api private
  # @return [Array, Hash]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/include.rb#67
  def expected; end

  # @api private
  # @private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/include.rb#12
  def expecteds; end

  # @api private
  # @return [String]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/include.rb#49
  def failure_message; end

  # @api private
  # @return [String]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/include.rb#55
  def failure_message_when_negated; end

  # @api private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/include.rb#21
  def matches?(actual); end

  private

  # @api private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/include.rb#160
  def actual_collection_includes?(expected_item); end

  # @api private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/include.rb#153
  def actual_hash_has_key?(expected_key); end

  # @api private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/include.rb#141
  def actual_hash_includes?(expected_key, expected_value); end

  # @api private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/include.rb#77
  def check_actual?(actual); end

  # @api private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/include.rb#83
  def check_expected_count?; end

  # @api private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/include.rb#149
  def comparing_hash_keys?(expected_item); end

  # @api private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/include.rb#137
  def comparing_hash_to_a_subset?(expected_item); end

  # @api private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/include.rb#200
  def convert_to_hash?(obj); end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/include.rb#174
  def count_enumerable(expected_item); end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/include.rb#179
  def count_inclusions; end

  # @api private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/include.rb#191
  def diff_would_wrongly_highlight_matched_item?; end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/include.rb#120
  def excluded_from_actual; end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/include.rb#95
  def format_failure_message(preposition); end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/include.rb#115
  def perform_match(&block); end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/include.rb#106
  def readable_list_of(items); end
end

# Provides the implementation for `match`.
# Not intended to be instantiated directly.
#
# @api private
class RSpec::Matchers::BuiltIn::Match < ::RSpec::Matchers::BuiltIn::BaseMatcher
  # @api private
  # @return [Match] a new instance of Match
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/match.rb#8
  def initialize(expected); end

  # @api private
  # @return [String]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/match.rb#15
  def description; end

  # @api private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/match.rb#25
  def diffable?; end

  # Used to specify the captures we match against
  #
  # @api private
  # @return [self]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/match.rb#31
  def with_captures(*captures); end

  private

  # @api private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/match.rb#45
  def can_safely_call_match?(expected, actual); end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/match.rb#38
  def match(expected, actual); end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/match.rb#52
  def match_captures(expected, actual); end
end

# Handles operator matcher for `should_not`.
#
# @private
class RSpec::Matchers::BuiltIn::NegativeOperatorMatcher < ::RSpec::Matchers::BuiltIn::OperatorMatcher
  # source://rspec-expectations//lib/rspec/matchers/built_in/operators.rb#117
  def __delegate_operator(actual, operator, expected); end
end

# @private
module RSpec::Matchers::BuiltIn::NullCapture
  class << self
    # source://rspec-expectations//lib/rspec/matchers/built_in/output.rb#133
    def capture(_block); end

    # source://rspec-expectations//lib/rspec/matchers/built_in/output.rb#129
    def name; end
  end
end

# Provides the implementation for operator matchers.
# Not intended to be instantiated directly.
# Only available for use with `should`.
#
# @api private
class RSpec::Matchers::BuiltIn::OperatorMatcher
  # @api private
  # @return [OperatorMatcher] a new instance of OperatorMatcher
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/operators.rb#41
  def initialize(actual); end

  # source://rspec-expectations//lib/rspec/matchers/built_in/operators.rb#57
  def !=(_expected); end

  # source://rspec-expectations//lib/rspec/matchers/built_in/operators.rb#57
  def !~(_expected); end

  # source://rspec-expectations//lib/rspec/matchers/built_in/operators.rb#47
  def <(expected); end

  # source://rspec-expectations//lib/rspec/matchers/built_in/operators.rb#47
  def <=(expected); end

  # source://rspec-expectations//lib/rspec/matchers/built_in/operators.rb#47
  def ==(expected); end

  # source://rspec-expectations//lib/rspec/matchers/built_in/operators.rb#47
  def ===(expected); end

  # source://rspec-expectations//lib/rspec/matchers/built_in/operators.rb#47
  def =~(expected); end

  # source://rspec-expectations//lib/rspec/matchers/built_in/operators.rb#47
  def >(expected); end

  # source://rspec-expectations//lib/rspec/matchers/built_in/operators.rb#47
  def >=(expected); end

  # @api private
  # @return [String]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/operators.rb#76
  def description; end

  # @api private
  # @private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/operators.rb#70
  def fail_with_message(message); end

  private

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/operators.rb#88
  def eval_match(actual, operator, expected); end

  # @api private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/operators.rb#82
  def has_non_generic_implementation_of?(op); end

  class << self
    # @api private
    # @private
    #
    # source://rspec-expectations//lib/rspec/matchers/built_in/operators.rb#29
    def get(klass, operator); end

    # @api private
    # @private
    #
    # source://rspec-expectations//lib/rspec/matchers/built_in/operators.rb#18
    def register(klass, operator, matcher); end

    # @api private
    # @private
    #
    # source://rspec-expectations//lib/rspec/matchers/built_in/operators.rb#13
    def registry; end

    # @api private
    # @private
    #
    # source://rspec-expectations//lib/rspec/matchers/built_in/operators.rb#24
    def unregister(klass, operator); end

    # @api private
    # @private
    #
    # source://rspec-expectations//lib/rspec/matchers/built_in/operators.rb#46
    def use_custom_matcher_or_delegate(operator); end
  end
end

# Provides the implementation for `output`.
# Not intended to be instantiated directly.
#
# @api private
class RSpec::Matchers::BuiltIn::Output < ::RSpec::Matchers::BuiltIn::BaseMatcher
  # @api private
  # @return [Output] a new instance of Output
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/output.rb#10
  def initialize(expected); end

  # @api private
  # @return [String]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/output.rb#76
  def description; end

  # @api private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/output.rb#86
  def diffable?; end

  # @api private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/output.rb#24
  def does_not_match?(block); end

  # @api private
  # @return [String]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/output.rb#64
  def failure_message; end

  # @api private
  # @return [String]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/output.rb#70
  def failure_message_when_negated; end

  # @api private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/output.rb#17
  def matches?(block); end

  # Indicates this matcher matches against a block.
  #
  # @api private
  # @return [True]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/output.rb#93
  def supports_block_expectations?; end

  # Indicates this matcher matches against a block only.
  #
  # @api private
  # @return [False]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/output.rb#100
  def supports_value_expectations?; end

  # Tells the matcher to match against stderr.
  # Works only when the main Ruby process prints to stderr
  #
  # @api public
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/output.rb#39
  def to_stderr; end

  # Tells the matcher to match against stderr.
  # Works when subprocesses print to stderr as well.
  # This is significantly (~30x) slower than `to_stderr`
  #
  # @api public
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/output.rb#57
  def to_stderr_from_any_process; end

  # Tells the matcher to match against stdout.
  # Works only when the main Ruby process prints to stdout
  #
  # @api public
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/output.rb#31
  def to_stdout; end

  # Tells the matcher to match against stdout.
  # Works when subprocesses print to stdout as well.
  # This is significantly (~30x) slower than `to_stdout`
  #
  # @api public
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/output.rb#48
  def to_stdout_from_any_process; end

  private

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/output.rb#121
  def actual_output_description; end

  # @api private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/output.rb#106
  def captured?; end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/output.rb#116
  def negative_failure_reason; end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/output.rb#110
  def positive_failure_reason; end
end

# Handles operator matcher for `should`.
#
# @private
class RSpec::Matchers::BuiltIn::PositiveOperatorMatcher < ::RSpec::Matchers::BuiltIn::OperatorMatcher
  # source://rspec-expectations//lib/rspec/matchers/built_in/operators.rb#98
  def __delegate_operator(actual, operator, expected); end
end

# Provides the implementation for `raise_error`.
# Not intended to be instantiated directly.
#
# @api private
class RSpec::Matchers::BuiltIn::RaiseError
  include ::RSpec::Matchers::Composable

  # @api private
  # @return [RaiseError] a new instance of RaiseError
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/raise_error.rb#18
  def initialize(expected_error_or_message, expected_message, &block); end

  # @api private
  # @return [String]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/raise_error.rb#113
  def description; end

  # @api private
  # @private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/raise_error.rb#79
  def does_not_match?(given_proc); end

  # @api private
  # @private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/raise_error.rb#95
  def expects_call_stack_jump?; end

  # @api private
  # @return [String]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/raise_error.rb#101
  def failure_message; end

  # @api private
  # @return [String]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/raise_error.rb#107
  def failure_message_when_negated; end

  # @api private
  # @private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/raise_error.rb#48
  def matches?(given_proc, negative_expectation = T.unsafe(nil), &block); end

  # @api private
  # @private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/raise_error.rb#85
  def supports_block_expectations?; end

  # @api private
  # @private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/raise_error.rb#90
  def supports_value_expectations?; end

  # Specifies the expected error message.
  #
  # @api public
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/raise_error.rb#39
  def with_message(expected_message); end

  private

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/raise_error.rb#119
  def actual_error_message; end

  # @api private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/raise_error.rb#133
  def block_matches?; end

  # @api private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/raise_error.rb#129
  def error_and_message_match?; end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/raise_error.rb#141
  def eval_block; end

  # @api private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/raise_error.rb#125
  def expectation_matched?; end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/raise_error.rb#222
  def expected_error; end

  # @api private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/raise_error.rb#253
  def expecting_specific_exception?; end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/raise_error.rb#237
  def format_backtrace(backtrace); end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/raise_error.rb#242
  def given_error; end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/raise_error.rb#172
  def handle_warning(message); end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/raise_error.rb#257
  def raise_message_already_set; end

  # @api private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/raise_error.rb#137
  def ready_to_eval_block?; end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/raise_error.rb#151
  def verify_message; end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/raise_error.rb#184
  def warn_about_bare_error!; end

  # @api private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/raise_error.rb#176
  def warn_about_bare_error?; end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/raise_error.rb#210
  def warn_about_negative_false_positive!(expression); end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/raise_error.rb#197
  def warn_about_nil_error!; end

  # @api private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/raise_error.rb#180
  def warn_about_nil_error?; end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/raise_error.rb#156
  def warn_for_negative_false_positives!; end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/raise_error.rb#262
  def warning; end
end

# Used as a sentinel value to be able to tell when the user did not pass an
# argument. We can't use `nil` for that because we need to warn when `nil` is
# passed in a different way. It's an Object, not a Module, since Module's `===`
# does not evaluate to true when compared to itself.
#
# @api private
#
# source://rspec-expectations//lib/rspec/matchers/built_in/raise_error.rb#16
RSpec::Matchers::BuiltIn::RaiseError::UndefinedValue = T.let(T.unsafe(nil), Object)

# Used to wrap match data and make it reliable for 1.8.7
#
# @api private
class RSpec::Matchers::BuiltIn::ReliableMatchData
  # @api private
  # @return [ReliableMatchData] a new instance of ReliableMatchData
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/match.rb#73
  def initialize(match_data); end

  # returns an array of captures from the match data
  #
  # @api private
  # @return Array
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/match.rb#96
  def captures; end

  # Returns match data names for named captures
  #
  # @api private
  # @return Array
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/match.rb#88
  def names; end

  protected

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/match.rb#102
  def match_data; end
end

# Provides the implementation for `respond_to`.
# Not intended to be instantiated directly.
#
# @api private
class RSpec::Matchers::BuiltIn::RespondTo < ::RSpec::Matchers::BuiltIn::BaseMatcher
  # @api private
  # @return [RespondTo] a new instance of RespondTo
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/respond_to.rb#10
  def initialize(*names); end

  # Specifies that the method accepts any keyword, i.e. the method has
  #   a splatted keyword parameter of the form **kw_args.
  #
  # @api public
  # @example
  #   expect(obj).to respond_to(:message).with_any_keywords
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/respond_to.rb#48
  def and_any_keywords; end

  # Specifies keyword arguments, if any.
  #
  # @api public
  # @example
  #   expect(obj).to respond_to(:message).with_keywords(:color, :shape)
  # @example with an expected number of arguments
  #   expect(obj).to respond_to(:message).with(3).arguments.and_keywords(:color, :shape)
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/respond_to.rb#36
  def and_keywords(*keywords); end

  # Specifies that the number of arguments has no upper limit, i.e. the
  #   method has a splatted parameter of the form *args.
  #
  # @api public
  # @example
  #   expect(obj).to respond_to(:message).with_unlimited_arguments
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/respond_to.rb#60
  def and_unlimited_arguments; end

  # No-op. Intended to be used as syntactic sugar when using `with`.
  #
  # @api public
  # @example
  #   expect(obj).to respond_to(:message).with(3).arguments
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/respond_to.rb#71
  def argument; end

  # No-op. Intended to be used as syntactic sugar when using `with`.
  #
  # @api public
  # @example
  #   expect(obj).to respond_to(:message).with(3).arguments
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/respond_to.rb#71
  def arguments; end

  # @api private
  # @return [String]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/respond_to.rb#100
  def description; end

  # @api private
  # @private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/respond_to.rb#82
  def does_not_match?(actual); end

  # @api private
  # @return [String]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/respond_to.rb#88
  def failure_message; end

  # @api private
  # @return [String]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/respond_to.rb#94
  def failure_message_when_negated; end

  # Used by other matchers to suppress a check
  #
  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/respond_to.rb#106
  def ignoring_method_signature_failure!; end

  # @api private
  # @private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/respond_to.rb#77
  def matches?(actual); end

  # Specifies the number of expected arguments.
  #
  # @api public
  # @example
  #   expect(obj).to respond_to(:message).with(3).arguments
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/respond_to.rb#24
  def with(n); end

  # Specifies that the method accepts any keyword, i.e. the method has
  #   a splatted keyword parameter of the form **kw_args.
  #
  # @api public
  # @example
  #   expect(obj).to respond_to(:message).with_any_keywords
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/respond_to.rb#48
  def with_any_keywords; end

  # Specifies keyword arguments, if any.
  #
  # @api public
  # @example
  #   expect(obj).to respond_to(:message).with_keywords(:color, :shape)
  # @example with an expected number of arguments
  #   expect(obj).to respond_to(:message).with(3).arguments.and_keywords(:color, :shape)
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/respond_to.rb#36
  def with_keywords(*keywords); end

  # Specifies that the number of arguments has no upper limit, i.e. the
  #   method has a splatted parameter of the form *args.
  #
  # @api public
  # @example
  #   expect(obj).to respond_to(:message).with_unlimited_arguments
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/respond_to.rb#60
  def with_unlimited_arguments; end

  private

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/respond_to.rb#112
  def find_failing_method_names(actual, filter_method); end

  # @api private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/respond_to.rb#119
  def matches_arity?(actual, name); end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/respond_to.rb#156
  def pp_names; end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/respond_to.rb#130
  def with_arity; end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/respond_to.rb#139
  def with_arity_string; end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/respond_to.rb#143
  def with_keywords_string; end
end

# @api private
# @private
class RSpec::Matchers::BuiltIn::RespondTo::ArityCheck
  # @api private
  # @return [ArityCheck] a new instance of ArityCheck
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/respond_to.rb#162
  def initialize(expected_arity, expected_keywords, arbitrary_keywords, unlimited_arguments); end

  # @api private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/respond_to.rb#178
  def matches?(actual, name); end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/respond_to.rb#187
  def method_signature_for(actual, name); end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/respond_to.rb#183
  def verifier_for(actual, name); end
end

# Provides the implementation for `satisfy`.
# Not intended to be instantiated directly.
#
# @api private
class RSpec::Matchers::BuiltIn::Satisfy < ::RSpec::Matchers::BuiltIn::BaseMatcher
  # @api private
  # @return [Satisfy] a new instance of Satisfy
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/satisfy.rb#8
  def initialize(description = T.unsafe(nil), &block); end

  # @api private
  # @private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/satisfy.rb#21
  def description; end

  # @api private
  # @return [String]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/satisfy.rb#27
  def failure_message; end

  # @api private
  # @return [String]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/satisfy.rb#33
  def failure_message_when_negated; end

  # @api private
  # @private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/satisfy.rb#14
  def matches?(actual, &block); end

  private

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/satisfy.rb#40
  def block_representation; end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/satisfy.rb#48
  def extract_block_snippet; end
end

# Base class for specifying a change from and/or to specific values.
#
# @api private
class RSpec::Matchers::BuiltIn::SpecificValuesChange < ::RSpec::Matchers::BuiltIn::BaseMatcher
  # @api private
  # @return [SpecificValuesChange] a new instance of SpecificValuesChange
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/change.rb#185
  def initialize(change_details, from, to); end

  # @api private
  # @private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/change.rb#197
  def description; end

  # @api private
  # @private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/change.rb#202
  def failure_message; end

  # @api private
  # @private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/change.rb#192
  def matches?(event_proc); end

  # @api private
  # @private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/change.rb#210
  def supports_block_expectations?; end

  # @api private
  # @private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/change.rb#215
  def supports_value_expectations?; end

  private

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/change.rb#244
  def after_value_failure; end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/change.rb#238
  def before_value_failure; end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/change.rb#255
  def did_change_failure; end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/change.rb#250
  def did_not_change_failure; end

  # @api private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/change.rb#234
  def matches_after?; end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/change.rb#261
  def not_given_a_block_failure; end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/change.rb#221
  def perform_change(event_proc); end
end

# @api private
# @private
#
# source://rspec-expectations//lib/rspec/matchers/built_in/change.rb#183
RSpec::Matchers::BuiltIn::SpecificValuesChange::MATCH_ANYTHING = BasicObject

# For RSpec 3.1, the base class was named `StartAndEndWith`. For SemVer reasons,
# we still provide this constant until 4.0.
#
# @deprecated Use StartOrEndWith instead.
# @private
#
# source://rspec-expectations//lib/rspec/matchers/built_in/start_or_end_with.rb#61
RSpec::Matchers::BuiltIn::StartAndEndWith = RSpec::Matchers::BuiltIn::StartOrEndWith

# Base class for the `end_with` and `start_with` matchers.
# Not intended to be instantiated directly.
#
# @api private
class RSpec::Matchers::BuiltIn::StartOrEndWith < ::RSpec::Matchers::BuiltIn::BaseMatcher
  # @api private
  # @return [StartOrEndWith] a new instance of StartOrEndWith
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/start_or_end_with.rb#8
  def initialize(*expected); end

  # @api private
  # @return [String]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/start_or_end_with.rb#27
  def description; end

  # @api private
  # @return [String]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/start_or_end_with.rb#15
  def failure_message; end

  private

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/start_or_end_with.rb#36
  def match(_expected, actual); end

  # @api private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/start_or_end_with.rb#48
  def subsets_comparable?; end
end

# Provides the implementation for `start_with`.
# Not intended to be instantiated directly.
#
# @api private
class RSpec::Matchers::BuiltIn::StartWith < ::RSpec::Matchers::BuiltIn::StartOrEndWith
  private

  # @api private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/start_or_end_with.rb#73
  def element_matches?; end

  # @api private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/start_or_end_with.rb#69
  def subset_matches?; end
end

# Provides the implementation for `throw_symbol`.
# Not intended to be instantiated directly.
#
# @api private
class RSpec::Matchers::BuiltIn::ThrowSymbol
  include ::RSpec::Matchers::Composable

  # @api private
  # @return [ThrowSymbol] a new instance of ThrowSymbol
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/throw_symbol.rb#10
  def initialize(expected_symbol = T.unsafe(nil), expected_arg = T.unsafe(nil)); end

  # @api private
  # @return [String]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/throw_symbol.rb#86
  def description; end

  # @api private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/throw_symbol.rb#68
  def does_not_match?(given_proc); end

  # @api private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/throw_symbol.rb#103
  def expects_call_stack_jump?; end

  # @api private
  # @return [String]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/throw_symbol.rb#74
  def failure_message; end

  # @api private
  # @return [String]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/throw_symbol.rb#80
  def failure_message_when_negated; end

  # @api private
  # @private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/throw_symbol.rb#18
  def matches?(given_proc); end

  # Indicates this matcher matches against a block.
  #
  # @api private
  # @return [True]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/throw_symbol.rb#93
  def supports_block_expectations?; end

  # @api private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/throw_symbol.rb#98
  def supports_value_expectations?; end

  private

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/throw_symbol.rb#109
  def actual_result; end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/throw_symbol.rb#118
  def caught; end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/throw_symbol.rb#114
  def expected(symbol_desc = T.unsafe(nil)); end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/throw_symbol.rb#122
  def throw_description(symbol, arg); end
end

# Provides the implementation for `yield_control`.
# Not intended to be instantiated directly.
#
# @api private
class RSpec::Matchers::BuiltIn::YieldControl < ::RSpec::Matchers::BuiltIn::BaseMatcher
  include ::RSpec::Matchers::BuiltIn::CountExpectation

  # @api private
  # @private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/yield.rb#111
  def does_not_match?(block); end

  # @api private
  # @return [String]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/yield.rb#117
  def failure_message; end

  # @api private
  # @return [String]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/yield.rb#123
  def failure_message_when_negated; end

  # @api private
  # @private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/yield.rb#104
  def matches?(block); end

  # @api private
  # @private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/yield.rb#128
  def supports_block_expectations?; end

  # @api private
  # @private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/yield.rb#133
  def supports_value_expectations?; end

  private

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/yield.rb#139
  def failure_reason; end
end

# Object that is yielded to `expect` when one of the
# yield matchers is used. Provides information about
# the yield behavior of the object-under-test.
#
# @private
class RSpec::Matchers::BuiltIn::YieldProbe
  # @return [YieldProbe] a new instance of YieldProbe
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/yield.rb#21
  def initialize(block, &callback); end

  # source://rspec-expectations//lib/rspec/matchers/built_in/yield.rb#68
  def assert_used!; end

  # :nocov:
  # On 1.8.7, `lambda { }.arity` and `lambda { |*a| }.arity` both return -1,
  # so we can't distinguish between accepting no args and an arg splat.
  # It's OK to skip, this, though; it just provides a nice error message
  # when the user forgets to accept an arg in their block. They'll still get
  # the `assert_used!` error message from above, which is sufficient.
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/yield.rb#78
  def assert_valid_expect_block!; end

  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/yield.rb#29
  def has_block?; end

  # Returns the value of attribute num_yields.
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/yield.rb#19
  def num_yields; end

  # Sets the attribute num_yields
  #
  # @param value the value to set the attribute num_yields to.
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/yield.rb#19
  def num_yields=(_arg0); end

  # source://rspec-expectations//lib/rspec/matchers/built_in/yield.rb#33
  def probe; end

  # source://rspec-expectations//lib/rspec/matchers/built_in/yield.rb#53
  def single_yield_args; end

  # source://rspec-expectations//lib/rspec/matchers/built_in/yield.rb#40
  def to_proc; end

  # Returns the value of attribute yielded_args.
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/yield.rb#19
  def yielded_args; end

  # Sets the attribute yielded_args
  #
  # @param value the value to set the attribute yielded_args to.
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/yield.rb#19
  def yielded_args=(_arg0); end

  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/yield.rb#57
  def yielded_once?(matcher_name); end

  class << self
    # source://rspec-expectations//lib/rspec/matchers/built_in/yield.rb#13
    def probe(block, &callback); end
  end
end

# Provides the implementation for `yield_successive_args`.
# Not intended to be instantiated directly.
#
# @api private
class RSpec::Matchers::BuiltIn::YieldSuccessiveArgs < ::RSpec::Matchers::BuiltIn::BaseMatcher
  # @api private
  # @return [YieldSuccessiveArgs] a new instance of YieldSuccessiveArgs
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/yield.rb#297
  def initialize(*args); end

  # @api private
  # @private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/yield.rb#337
  def description; end

  # @api private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/yield.rb#320
  def does_not_match?(block); end

  # @api private
  # @private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/yield.rb#325
  def failure_message; end

  # @api private
  # @private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/yield.rb#331
  def failure_message_when_negated; end

  # @api private
  # @private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/yield.rb#302
  def matches?(block); end

  # @api private
  # @private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/yield.rb#342
  def supports_block_expectations?; end

  # @api private
  # @private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/yield.rb#347
  def supports_value_expectations?; end

  private

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/yield.rb#353
  def expected_arg_description; end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/yield.rb#365
  def negative_failure_reason; end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/yield.rb#357
  def positive_failure_reason; end
end

# Provides the implementation for `yield_with_args`.
# Not intended to be instantiated directly.
#
# @api private
class RSpec::Matchers::BuiltIn::YieldWithArgs < ::RSpec::Matchers::BuiltIn::BaseMatcher
  # @api private
  # @return [YieldWithArgs] a new instance of YieldWithArgs
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/yield.rb#200
  def initialize(*args); end

  # @api private
  # @private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/yield.rb#233
  def description; end

  # @api private
  # @private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/yield.rb#218
  def does_not_match?(block); end

  # @api private
  # @private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/yield.rb#223
  def failure_message; end

  # @api private
  # @private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/yield.rb#228
  def failure_message_when_negated; end

  # @api private
  # @private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/yield.rb#205
  def matches?(block); end

  # @api private
  # @private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/yield.rb#240
  def supports_block_expectations?; end

  # @api private
  # @private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/yield.rb#245
  def supports_value_expectations?; end

  private

  # @api private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/yield.rb#288
  def all_args_match?; end

  # @api private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/yield.rb#273
  def args_currently_match?; end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/yield.rb#257
  def expected_arg_description; end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/yield.rb#261
  def negative_failure_reason; end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/yield.rb#251
  def positive_failure_reason; end
end

# Provides the implementation for `yield_with_no_args`.
# Not intended to be instantiated directly.
#
# @api private
class RSpec::Matchers::BuiltIn::YieldWithNoArgs < ::RSpec::Matchers::BuiltIn::BaseMatcher
  # @api private
  # @private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/yield.rb#158
  def does_not_match?(block); end

  # @api private
  # @private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/yield.rb#163
  def failure_message; end

  # @api private
  # @private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/yield.rb#168
  def failure_message_when_negated; end

  # @api private
  # @private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/yield.rb#151
  def matches?(block); end

  # @api private
  # @private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/yield.rb#173
  def supports_block_expectations?; end

  # @api private
  # @private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/yield.rb#178
  def supports_value_expectations?; end

  private

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/yield.rb#190
  def negative_failure_reason; end

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/built_in/yield.rb#184
  def positive_failure_reason; end
end

# Mixin designed to support the composable matcher features
# of RSpec 3+. Mix it into your custom matcher classes to
# allow them to be used in a composable fashion.
#
# @api public
module RSpec::Matchers::Composable
  # Creates a compound `and` expectation. The matcher will
  # only pass if both sub-matchers pass.
  # This can be chained together to form an arbitrarily long
  # chain of matchers.
  #
  # @api public
  # @example
  #   expect(alphabet).to start_with("a").and end_with("z")
  #   expect(alphabet).to start_with("a") & end_with("z")
  # @note The negative form (`expect(...).not_to matcher.and other`)
  #   is not supported at this time.
  #
  # source://rspec-expectations//lib/rspec/matchers/composable.rb#22
  def &(matcher); end

  # Delegates to `#matches?`. Allows matchers to be used in composable
  # fashion and also supports using matchers in case statements.
  #
  # @api public
  #
  # source://rspec-expectations//lib/rspec/matchers/composable.rb#45
  def ===(value); end

  # Creates a compound `and` expectation. The matcher will
  # only pass if both sub-matchers pass.
  # This can be chained together to form an arbitrarily long
  # chain of matchers.
  #
  # @api public
  # @example
  #   expect(alphabet).to start_with("a").and end_with("z")
  #   expect(alphabet).to start_with("a") & end_with("z")
  # @note The negative form (`expect(...).not_to matcher.and other`)
  #   is not supported at this time.
  #
  # source://rspec-expectations//lib/rspec/matchers/composable.rb#22
  def and(matcher); end

  # Creates a compound `or` expectation. The matcher will
  # pass if either sub-matcher passes.
  # This can be chained together to form an arbitrarily long
  # chain of matchers.
  #
  # @api public
  # @example
  #   expect(stoplight.color).to eq("red").or eq("green").or eq("yellow")
  #   expect(stoplight.color).to eq("red") | eq("green") | eq("yellow")
  # @note The negative form (`expect(...).not_to matcher.or other`)
  #   is not supported at this time.
  #
  # source://rspec-expectations//lib/rspec/matchers/composable.rb#38
  def or(matcher); end

  # Creates a compound `or` expectation. The matcher will
  # pass if either sub-matcher passes.
  # This can be chained together to form an arbitrarily long
  # chain of matchers.
  #
  # @api public
  # @example
  #   expect(stoplight.color).to eq("red").or eq("green").or eq("yellow")
  #   expect(stoplight.color).to eq("red") | eq("green") | eq("yellow")
  # @note The negative form (`expect(...).not_to matcher.or other`)
  #   is not supported at this time.
  #
  # source://rspec-expectations//lib/rspec/matchers/composable.rb#38
  def |(matcher); end

  private

  # Returns the description of the given object in a way that is
  # aware of composed matchers. If the object is a matcher with
  # a `description` method, returns the description; otherwise
  # returns `object.inspect`.
  #
  # You are encouraged to use this in your custom matcher's
  # `description`, `failure_message` or
  # `failure_message_when_negated` implementation if you are
  # supporting matcher arguments.
  #
  # @api public
  #
  # source://rspec-expectations//lib/rspec/matchers/composable.rb#82
  def description_of(object); end

  # We should enumerate arrays as long as they are not recursive.
  #
  # @api private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/composable.rb#142
  def should_enumerate?(item); end

  # Transforms the given data structue (typically a hash or array)
  # into a new data structure that, when `#inspect` is called on it,
  # will provide descriptions of any contained matchers rather than
  # the normal `#inspect` output.
  #
  # You are encouraged to use this in your custom matcher's
  # `description`, `failure_message` or
  # `failure_message_when_negated` implementation if you are
  # supporting any arguments which may be a data structure
  # containing matchers.
  #
  # @api public
  #
  # source://rspec-expectations//lib/rspec/matchers/composable.rb#98
  def surface_descriptions_in(item); end

  # @api private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/composable.rb#147
  def unreadable_io?(object); end

  # This provides a generic way to fuzzy-match an expected value against
  # an actual value. It understands nested data structures (e.g. hashes
  # and arrays) and is able to match against a matcher being used as
  # the expected value or within the expected value at any level of
  # nesting.
  #
  # Within a custom matcher you are encouraged to use this whenever your
  # matcher needs to match two values, unless it needs more precise semantics.
  # For example, the `eq` matcher _does not_ use this as it is meant to
  # use `==` (and only `==`) for matching.
  #
  # @api public
  # @param expected [Object] what is expected
  # @param actual [Object] the actual value
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/composable.rb#66
  def values_match?(expected, actual); end

  # Historically, a single matcher instance was only checked
  # against a single value. Given that the matcher was only
  # used once, it's been common to memoize some intermediate
  # calculation that is derived from the `actual` value in
  # order to reuse that intermediate result in the failure
  # message.
  #
  # This can cause a problem when using such a matcher as an
  # argument to another matcher in a composed matcher expression,
  # since the matcher instance may be checked against multiple
  # values and produce invalid results due to the memoization.
  #
  # To deal with this, we clone any matchers in `expected` via
  # this method when using `values_match?`, so that any memoization
  # does not "leak" between checks.
  #
  # @api public
  # @private
  #
  # source://rspec-expectations//lib/rspec/matchers/composable.rb#128
  def with_matchers_cloned(object); end

  class << self
    # We should enumerate arrays as long as they are not recursive.
    #
    # @api private
    # @return [Boolean]
    #
    # source://rspec-expectations//lib/rspec/matchers/composable.rb#142
    def should_enumerate?(item); end

    # Transforms the given data structue (typically a hash or array)
    # into a new data structure that, when `#inspect` is called on it,
    # will provide descriptions of any contained matchers rather than
    # the normal `#inspect` output.
    #
    # You are encouraged to use this in your custom matcher's
    # `description`, `failure_message` or
    # `failure_message_when_negated` implementation if you are
    # supporting any arguments which may be a data structure
    # containing matchers.
    #
    # @api public
    #
    # source://rspec-expectations//lib/rspec/matchers/composable.rb#98
    def surface_descriptions_in(item); end

    # @api private
    # @return [Boolean]
    #
    # source://rspec-expectations//lib/rspec/matchers/composable.rb#147
    def unreadable_io?(object); end
  end
end

# Wraps an item in order to surface its `description` via `inspect`.
#
# @api private
class RSpec::Matchers::Composable::DescribableItem < ::Struct
  # Inspectable version of the item description
  #
  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/composable.rb#160
  def inspect; end

  # Returns the value of attribute item
  #
  # @return [Object] the current value of item
  def item; end

  # Sets the attribute item
  #
  # @param value [Object] the value to set the attribute item to.
  # @return [Object] the newly set value
  def item=(_); end

  # A pretty printed version of the item description.
  #
  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/composable.rb#165
  def pretty_print(pp); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# Defines the custom matcher DSL.
module RSpec::Matchers::DSL
  # Defines a matcher alias. The returned matcher's `description` will be overriden
  # to reflect the phrasing of the new name, which will be used in failure messages
  # when passed as an argument to another matcher in a composed matcher expression.
  #
  # @example
  #   RSpec::Matchers.alias_matcher :a_list_sorted_by, :be_sorted_by do |description|
  #   description.sub("be sorted by", "a list sorted by")
  #   end
  #
  #   be_sorted_by(:age).description # => "be sorted by age"
  #   a_list_sorted_by(:age).description # => "a list sorted by age"
  # @example
  #   RSpec::Matchers.alias_matcher :a_list_that_sums_to, :sum_to
  #   sum_to(3).description # => "sum to 3"
  #   a_list_that_sums_to(3).description # => "a list that sums to 3"
  # @option options
  # @param old_name [Symbol] the original name for the matcher
  # @param new_name [Symbol] the new name for the matcher
  # @param options [Hash] options for the aliased matcher
  # @see RSpec::Matchers
  # @yield [String] optional block that, when given, is used to define the overriden
  #   logic. The yielded arg is the original description or failure message. If no
  #   block is provided, a default override is used based on the old and new names.
  #
  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#32
  def alias_matcher(new_name, old_name, options = T.unsafe(nil), &description_override); end

  # Defines a custom matcher.
  #
  # @param name [Symbol] the name for the matcher
  # @see RSpec::Matchers
  # @yield [Object] block that is used to define the matcher.
  #   The block is evaluated in the context of your custom matcher class.
  #   When args are passed to your matcher, they will be yielded here,
  #   usually representing the expected value(s).
  #
  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#72
  def define(name, &declarations); end

  # Defines a negated matcher. The returned matcher's `description` and `failure_message`
  # will be overriden to reflect the phrasing of the new name, and the match logic will
  # be based on the original matcher but negated.
  #
  # @example
  #   RSpec::Matchers.define_negated_matcher :exclude, :include
  #   include(1, 2).description # => "include 1 and 2"
  #   exclude(1, 2).description # => "exclude 1 and 2"
  # @param negated_name [Symbol] the name for the negated matcher
  # @param base_name [Symbol] the name of the original matcher that will be negated
  # @see RSpec::Matchers
  # @yield [String] optional block that, when given, is used to define the overriden
  #   logic. The yielded arg is the original description or failure message. If no
  #   block is provided, a default override is used based on the old and new names.
  #
  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#60
  def define_negated_matcher(negated_name, base_name, &description_override); end

  # Defines a custom matcher.
  #
  # @param name [Symbol] the name for the matcher
  # @see RSpec::Matchers
  # @yield [Object] block that is used to define the matcher.
  #   The block is evaluated in the context of your custom matcher class.
  #   When args are passed to your matcher, they will be yielded here,
  #   usually representing the expected value(s).
  #
  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#72
  def matcher(name, &declarations); end

  private

  # :nocov:
  #
  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#83
  def warn_about_block_args(name, declarations); end
end

# Defines default implementations of the matcher
# protocol methods for custom matchers. You can
# override any of these using the {RSpec::Matchers::DSL::Macros Macros} methods
# from within an `RSpec::Matchers.define` block.
module RSpec::Matchers::DSL::DefaultImplementations
  include ::RSpec::Matchers::BuiltIn::BaseMatcher::DefaultFailureMessages

  # The default description.
  #
  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#394
  def description; end

  # Used internally by objects returns by `should` and `should_not`.
  #
  # @api private
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#389
  def diffable?; end

  # Most matchers do not expect call stack jumps.
  #
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#411
  def expects_call_stack_jump?; end

  # Matchers do not support block expectations by default. You
  # must opt-in.
  #
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#402
  def supports_block_expectations?; end

  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#406
  def supports_value_expectations?; end

  private

  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#417
  def chained_method_clause_sentences; end
end

# Contains the methods that are available from within the
# `RSpec::Matchers.define` DSL for creating custom matchers.
module RSpec::Matchers::DSL::Macros
  # Convenience for defining methods on this matcher to create a fluent
  # interface. The trick about fluent interfaces is that each method must
  # return self in order to chain methods together. `chain` handles that
  # for you. If the method is invoked and the
  # `include_chain_clauses_in_custom_matcher_descriptions` config option
  # hash been enabled, the chained method name and args will be added to the
  # default description and failure message.
  #
  # In the common case where you just want the chained method to store some
  # value(s) for later use (e.g. in `match`), you can provide one or more
  # attribute names instead of a block; the chained method will store its
  # arguments in instance variables with those names, and the values will
  # be exposed via getters.
  #
  # @example
  #
  #   RSpec::Matchers.define :have_errors_on do |key|
  #   chain :with do |message|
  #   @message = message
  #   end
  #
  #   match do |actual|
  #   actual.errors[key] == @message
  #   end
  #   end
  #
  #   expect(minor).to have_errors_on(:age).with("Not old enough to participate")
  #
  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#297
  def chain(method_name, *attr_names, &definition); end

  # Customize the description to use for one-liners.  Only use this when
  # the description generated by default doesn't suit your needs.
  #
  # @example
  #
  #   RSpec::Matchers.define :qualify_for do |expected|
  #   match { your_match_logic }
  #
  #   description do
  #   "qualify for #{expected}"
  #   end
  #   end
  # @yield [Object] actual the actual object (i.e. the value wrapped by `expect`)
  #
  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#252
  def description(&definition); end

  # Tells the matcher to diff the actual and expected values in the failure
  # message.
  #
  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#258
  def diffable; end

  # Customizes the failure messsage to use when this matcher is
  # asked to positively match. Only use this when the message
  # generated by default doesn't suit your needs.
  #
  # @example
  #
  #   RSpec::Matchers.define :have_strength do |expected|
  #   match { your_match_logic }
  #
  #   failure_message do |actual|
  #   "Expected strength of #{expected}, but had #{actual.strength}"
  #   end
  #   end
  # @yield [Object] actual the actual object (i.e. the value wrapped by `expect`)
  #
  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#215
  def failure_message(&definition); end

  # Customize the failure messsage to use when this matcher is asked
  # to negatively match. Only use this when the message generated by
  # default doesn't suit your needs.
  #
  # @example
  #
  #   RSpec::Matchers.define :have_strength do |expected|
  #   match { your_match_logic }
  #
  #   failure_message_when_negated do |actual|
  #   "Expected not to have strength of #{expected}, but did"
  #   end
  #   end
  # @yield [Object] actual the actual object (i.e. the value wrapped by `expect`)
  #
  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#234
  def failure_message_when_negated(&definition); end

  # Stores the block that is used to determine whether this matcher passes
  # or fails. The block should return a boolean value. When the matcher is
  # passed to `expect(...).to` and the block returns `true`, then the expectation
  # passes. Similarly, when the matcher is passed to `expect(...).not_to` and the
  # block returns `false`, then the expectation passes.
  #
  # By default the match block will swallow expectation errors (e.g.
  # caused by using an expectation such as `expect(1).to eq 2`), if you
  # wish to allow these to bubble up, pass in the option
  # `:notify_expectation_failures => true`.
  #
  # @example
  #
  #   RSpec::Matchers.define :be_even do
  #   match do |actual|
  #   actual.even?
  #   end
  #   end
  #
  #   expect(4).to be_even     # passes
  #   expect(3).not_to be_even # passes
  #   expect(3).to be_even     # fails
  #   expect(4).not_to be_even # fails
  # @param options [Hash] for defining the behavior of the match block.
  # @yield [Object] actual the actual value (i.e. the value wrapped by `expect`)
  #
  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#130
  def match(options = T.unsafe(nil), &match_block); end

  # Use this instead of `match` when the block will raise an exception
  # rather than returning false to indicate a failure.
  #
  # @example
  #
  #   RSpec::Matchers.define :accept_as_valid do |candidate_address|
  #   match_unless_raises ValidationException do |validator|
  #   validator.validate(candidate_address)
  #   end
  #   end
  #
  #   expect(email_validator).to accept_as_valid("person@company.com")
  # @yield [Object] actual the actual object (i.e. the value wrapped by `expect`)
  #
  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#187
  def match_unless_raises(expected_exception = T.unsafe(nil), &match_block); end

  # Use this to define the block for a negative expectation (`expect(...).not_to`)
  # when the positive and negative forms require different handling. This
  # is rarely necessary, but can be helpful, for example, when specifying
  # asynchronous processes that require different timeouts.
  #
  # By default the match block will swallow expectation errors (e.g.
  # caused by using an expectation such as `expect(1).to eq 2`), if you
  # wish to allow these to bubble up, pass in the option
  # `:notify_expectation_failures => true`.
  #
  # @param options [Hash] for defining the behavior of the match block.
  # @yield [Object] actual the actual value (i.e. the value wrapped by `expect`)
  #
  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#159
  def match_when_negated(options = T.unsafe(nil), &match_block); end

  # Declares that the matcher can be used in a block expectation.
  # Users will not be able to use your matcher in a block
  # expectation without declaring this.
  # (e.g. `expect { do_something }.to matcher`).
  #
  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#266
  def supports_block_expectations; end

  private

  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#311
  def assign_attributes(attr_names); end

  # Does the following:
  #
  # - Defines the named method using a user-provided block
  #   in @user_method_defs, which is included as an ancestor
  #   in the singleton class in which we eval the `define` block.
  # - Defines an overriden definition for the same method
  #   usign the provided `our_def` block.
  # - Provides a default `our_def` block for the common case
  #   of needing to call the user's definition with `@actual`
  #   as an arg, but only if their block's arity can handle it.
  #
  # This compiles the user block into an actual method, allowing
  # them to use normal method constructs like `return`
  # (e.g. for an early guard statement), while allowing us to define
  # an override that can provide the wrapped handling
  # (e.g. assigning `@actual`, rescueing errors, etc) and
  # can `super` to the user's definition.
  #
  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#345
  def define_user_override(method_name, user_def, &our_def); end
end

# Defines deprecated macro methods from RSpec 2 for backwards compatibility.
#
# @deprecated Use the methods from {Macros} instead.
module RSpec::Matchers::DSL::Macros::Deprecated
  # @deprecated Use {Macros#failure_message} instead.
  #
  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#367
  def failure_message_for_should(&definition); end

  # @deprecated Use {Macros#failure_message_when_negated} instead.
  #
  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#373
  def failure_message_for_should_not(&definition); end

  # @deprecated Use {Macros#match} instead.
  #
  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#355
  def match_for_should(&definition); end

  # @deprecated Use {Macros#match_when_negated} instead.
  #
  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#361
  def match_for_should_not(&definition); end
end

# @private
#
# source://rspec-expectations//lib/rspec/matchers/dsl.rb#145
RSpec::Matchers::DSL::Macros::RAISE_NOTIFIER = T.let(T.unsafe(nil), Proc)

# The class used for custom matchers. The block passed to
# `RSpec::Matchers.define` will be evaluated in the context
# of the singleton class of an instance, and will have the
# {RSpec::Matchers::DSL::Macros Macros} methods available.
class RSpec::Matchers::DSL::Matcher
  include ::RSpec::Matchers::BuiltIn::BaseMatcher::DefaultFailureMessages
  include ::RSpec::Matchers::DSL::DefaultImplementations
  include ::RSpec::Matchers
  include ::RSpec::Matchers::Composable
  extend ::RSpec::Matchers::DSL::Macros
  extend ::RSpec::Matchers::DSL::Macros::Deprecated

  # @api private
  # @return [Matcher] a new instance of Matcher
  #
  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#461
  def initialize(name, declarations, matcher_execution_context, *expected, &block_arg); end

  # Exposes the value being matched against -- generally the object
  # object wrapped by `expect`.
  #
  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#448
  def actual; end

  # The block parameter used in the expectation
  #
  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#455
  def block_arg; end

  # Provides the expected value. This will return an array if
  # multiple arguments were passed to the matcher; otherwise it
  # will return a single value.
  #
  # @see #expected_as_array
  #
  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#481
  def expected; end

  # Returns the expected value as an an array. This exists primarily
  # to aid in upgrading from RSpec 2.x, since in RSpec 2, `expected`
  # always returned an array.
  #
  # @see #expected
  #
  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#493
  def expected_as_array; end

  # Adds the name (rather than a cryptic hex number)
  # so we can identify an instance of
  # the matcher in error messages (e.g. for `NoMethodError`)
  #
  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#498
  def inspect; end

  # The name of the matcher.
  #
  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#458
  def name; end

  # Exposes the exception raised during the matching by `match_unless_raises`.
  # Could be useful to extract details for a failure message.
  #
  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#452
  def rescued_exception; end

  private

  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#521
  def actual_arg_for(block); end

  # Takes care of forwarding unhandled messages to the
  # `@matcher_execution_context` (typically the current
  # running `RSpec::Core::Example`). This is needed by
  # rspec-rails so that it can define matchers that wrap
  # Rails' test helper methods, but it's also a useful
  # feature in its own right.
  #
  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#531
  def method_missing(method, *args, **_arg2, &block); end

  # Indicates that this matcher responds to messages
  # from the `@matcher_execution_context` as well.
  # Also, supports getting a method object for such methods.
  #
  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/dsl.rb#506
  def respond_to_missing?(method, include_private = T.unsafe(nil)); end
end

# source://rspec-expectations//lib/rspec/matchers.rb#959
RSpec::Matchers::DYNAMIC_MATCHER_REGEX = T.let(T.unsafe(nil), Regexp)

# Facilitates converting ruby objects to English phrases.
module RSpec::Matchers::EnglishPhrasing
  class << self
    # when given an empty list.
    #
    # Converts an object (often a collection of objects)
    # into an English list.
    #
    #     list(['banana', 'kiwi', 'mango'])
    #     #=> " \"banana\", \"kiwi\", and \"mango\""
    #
    # Given an empty collection, returns the empty string.
    #
    #     list([]) #=> ""
    #
    # @note The returned string has a leading space except
    #
    # source://rspec-expectations//lib/rspec/matchers/english_phrasing.rb#26
    def list(obj); end

    # Converts a symbol into an English expression.
    #
    #     split_words(:banana_creme_pie) #=> "banana creme pie"
    #
    # source://rspec-expectations//lib/rspec/matchers/english_phrasing.rb#9
    def split_words(sym); end
  end
end

# Handles list of expected values when there is a need to render
# multiple diffs. Also can handle one value.
#
# @api private
class RSpec::Matchers::ExpectedsForMultipleDiffs
  # @api private
  # @return [ExpectedsForMultipleDiffs] a new instance of ExpectedsForMultipleDiffs
  #
  # source://rspec-expectations//lib/rspec/matchers/expecteds_for_multiple_diffs.rb#16
  def initialize(expected_list); end

  # Returns message with diff(s) appended for provided differ
  # factory and actual value if there are any
  #
  # @api private
  # @param message [String] original failure message
  # @param differ [Proc]
  # @param actual [Any] value
  # @return [String]
  #
  # source://rspec-expectations//lib/rspec/matchers/expecteds_for_multiple_diffs.rb#47
  def message_with_diff(message, differ, actual); end

  private

  # @api private
  #
  # source://rspec-expectations//lib/rspec/matchers/expecteds_for_multiple_diffs.rb#68
  def diffs(differ, actual); end

  class << self
    # Wraps provided matcher list in instance of
    # ExpectedForMultipleDiffs.
    #
    # @api private
    # @param matchers [Array<Any>] list of matchers to wrap
    # @return [RSpec::Matchers::ExpectedsForMultipleDiffs]
    #
    # source://rspec-expectations//lib/rspec/matchers/expecteds_for_multiple_diffs.rb#36
    def for_many_matchers(matchers); end

    # Wraps provided expected value in instance of
    # ExpectedForMultipleDiffs. If provided value is already an
    # ExpectedForMultipleDiffs then it just returns it.
    #
    # @api private
    # @param expected [Any] value to be wrapped
    # @return [RSpec::Matchers::ExpectedsForMultipleDiffs]
    #
    # source://rspec-expectations//lib/rspec/matchers/expecteds_for_multiple_diffs.rb#26
    def from(expected); end

    private

    # @api private
    #
    # source://rspec-expectations//lib/rspec/matchers/expecteds_for_multiple_diffs.rb#58
    def diff_label_for(matcher); end

    # @api private
    #
    # source://rspec-expectations//lib/rspec/matchers/expecteds_for_multiple_diffs.rb#62
    def truncated(description); end
  end
end

# Default diff label when there is only one matcher in diff
# output
#
# @api private
# @private
#
# source://rspec-expectations//lib/rspec/matchers/expecteds_for_multiple_diffs.rb#10
RSpec::Matchers::ExpectedsForMultipleDiffs::DEFAULT_DIFF_LABEL = T.let(T.unsafe(nil), String)

# Maximum readable matcher description length
#
# @api private
# @private
#
# source://rspec-expectations//lib/rspec/matchers/expecteds_for_multiple_diffs.rb#14
RSpec::Matchers::ExpectedsForMultipleDiffs::DESCRIPTION_MAX_LENGTH = T.let(T.unsafe(nil), Integer)

# source://rspec-expectations//lib/rspec/matchers.rb#958
RSpec::Matchers::HAS_REGEX = T.let(T.unsafe(nil), Regexp)

# Provides the necessary plumbing to wrap a matcher with a decorator.
#
# @private
class RSpec::Matchers::MatcherDelegator
  include ::RSpec::Matchers::Composable

  # @return [MatcherDelegator] a new instance of MatcherDelegator
  #
  # source://rspec-expectations//lib/rspec/matchers/matcher_delegator.rb#9
  def initialize(base_matcher); end

  # Returns the value of attribute base_matcher.
  #
  # source://rspec-expectations//lib/rspec/matchers/matcher_delegator.rb#7
  def base_matcher; end

  # source://rspec-expectations//lib/rspec/matchers/matcher_delegator.rb#13
  def method_missing(*args, &block); end

  private

  # source://rspec-expectations//lib/rspec/matchers/matcher_delegator.rb#29
  def initialize_copy(other); end

  # @return [Boolean]
  #
  # source://rspec-expectations//lib/rspec/matchers/matcher_delegator.rb#18
  def respond_to_missing?(name, include_all = T.unsafe(nil)); end
end

# source://rspec-core/3.12.0/lib/rspec/core/shared_context.rb#54
RSpec::SharedContext = RSpec::Core::SharedContext

module RSpec::Support
  class << self
    # source://rspec-support/3.12.0/lib/rspec/support.rb#84
    def class_of(object); end

    # source://rspec-support/3.12.0/lib/rspec/support.rb#14
    def define_optimized_require_for_rspec(lib, &require_relative); end

    # source://rspec-support/3.12.0/lib/rspec/support/matcher_definition.rb#22
    def deregister_matcher_definition(&block); end

    # source://rspec-support/3.12.0/lib/rspec/support.rb#105
    def failure_notifier; end

    # source://rspec-support/3.12.0/lib/rspec/support.rb#97
    def failure_notifier=(callable); end

    # source://rspec-support/3.12.0/lib/rspec/support/matcher_definition.rb#27
    def is_a_matcher?(object); end

    # source://rspec-support/3.12.0/lib/rspec/support/matcher_definition.rb#4
    def matcher_definitions; end

    # source://rspec-support/3.12.0/lib/rspec/support.rb#52
    def method_handle_for(object, method_name); end

    # source://rspec-support/3.12.0/lib/rspec/support.rb#110
    def notify_failure(failure, options = T.unsafe(nil)); end

    # source://rspec-support/3.12.0/lib/rspec/support/matcher_definition.rb#14
    def register_matcher_definition(&block); end

    # source://rspec-support/3.12.0/lib/rspec/support.rb#23
    def require_rspec_core(f); end

    # source://rspec-support/3.12.0/lib/rspec/support.rb#23
    def require_rspec_expectations(f); end

    # source://rspec-support/3.12.0/lib/rspec/support.rb#23
    def require_rspec_matchers(f); end

    # source://rspec-support/3.12.0/lib/rspec/support.rb#23
    def require_rspec_support(f); end

    # source://rspec-support/3.12.0/lib/rspec/support/matcher_definition.rb#34
    def rspec_description_for_object(object); end

    # source://rspec-support/3.12.0/lib/rspec/support.rb#92
    def thread_local_data; end

    # source://rspec-support/3.12.0/lib/rspec/support.rb#132
    def warning_notifier; end

    # source://rspec-support/3.12.0/lib/rspec/support.rb#125
    def warning_notifier=(_arg0); end

    # source://rspec-support/3.12.0/lib/rspec/support.rb#115
    def with_failure_notifier(callable); end
  end
end

module RSpec::Support::AllExceptionsExceptOnesWeMustNotRescue
  class << self
    # source://rspec-support/3.12.0/lib/rspec/support.rb#142
    def ===(exception); end
  end
end

# source://rspec-support/3.12.0/lib/rspec/support.rb#140
RSpec::Support::AllExceptionsExceptOnesWeMustNotRescue::AVOID_RESCUING = T.let(T.unsafe(nil), Array)

class RSpec::Support::BlockSignature < ::RSpec::Support::MethodSignature
  # source://rspec-support/3.12.0/lib/rspec/support/method_signature_verifier.rb#268
  def classify_parameters; end
end

class RSpec::Support::ComparableVersion
  include ::Comparable

  # source://rspec-support/3.12.0/lib/rspec/support/comparable_version.rb#9
  def initialize(string); end

  # source://rspec-support/3.12.0/lib/rspec/support/comparable_version.rb#13
  def <=>(other); end

  # source://rspec-support/3.12.0/lib/rspec/support/comparable_version.rb#35
  def segments; end

  # source://rspec-support/3.12.0/lib/rspec/support/comparable_version.rb#7
  def string; end
end

# source://rspec-support/3.12.0/lib/rspec/support.rb#102
RSpec::Support::DEFAULT_FAILURE_NOTIFIER = T.let(T.unsafe(nil), Proc)

# source://rspec-support/3.12.0/lib/rspec/support.rb#129
RSpec::Support::DEFAULT_WARNING_NOTIFIER = T.let(T.unsafe(nil), Proc)

class RSpec::Support::Differ
  # source://rspec-support/3.12.0/lib/rspec/support/differ.rb#67
  def initialize(opts = T.unsafe(nil)); end

  # source://rspec-support/3.12.0/lib/rspec/support/differ.rb#63
  def color?; end

  # source://rspec-support/3.12.0/lib/rspec/support/differ.rb#11
  def diff(actual, expected); end

  # source://rspec-support/3.12.0/lib/rspec/support/differ.rb#57
  def diff_as_object(actual, expected); end

  # source://rspec-support/3.12.0/lib/rspec/support/differ.rb#28
  def diff_as_string(actual, expected); end

  private

  # source://rspec-support/3.12.0/lib/rspec/support/differ.rb#128
  def add_old_hunk_to_hunk(hunk, oldhunk); end

  # source://rspec-support/3.12.0/lib/rspec/support/differ.rb#124
  def add_to_output(output, string); end

  # source://rspec-support/3.12.0/lib/rspec/support/differ.rb#78
  def all_strings?(*args); end

  # source://rspec-support/3.12.0/lib/rspec/support/differ.rb#82
  def any_multiline_strings?(*args); end

  # source://rspec-support/3.12.0/lib/rspec/support/differ.rb#153
  def blue(text); end

  # source://rspec-support/3.12.0/lib/rspec/support/differ.rb#115
  def build_hunks(actual, expected); end

  # source://rspec-support/3.12.0/lib/rspec/support/differ.rb#90
  def coerce_to_string(string_or_array); end

  # source://rspec-support/3.12.0/lib/rspec/support/differ.rb#141
  def color(text, color_code); end

  # source://rspec-support/3.12.0/lib/rspec/support/differ.rb#161
  def color_diff(diff); end

  # source://rspec-support/3.12.0/lib/rspec/support/differ.rb#95
  def diffably_stringify(array); end

  # source://rspec-support/3.12.0/lib/rspec/support/differ.rb#119
  def finalize_output(output, final_line); end

  # source://rspec-support/3.12.0/lib/rspec/support/differ.rb#137
  def format_type; end

  # source://rspec-support/3.12.0/lib/rspec/support/differ.rb#149
  def green(text); end

  # source://rspec-support/3.12.0/lib/rspec/support/differ.rb#202
  def handle_encoding_errors(actual, expected); end

  # source://rspec-support/3.12.0/lib/rspec/support/differ.rb#192
  def hash_to_string(hash); end

  # source://rspec-support/3.12.0/lib/rspec/support/differ.rb#106
  def multiline?(string); end

  # source://rspec-support/3.12.0/lib/rspec/support/differ.rb#86
  def no_numbers?(*args); end

  # source://rspec-support/3.12.0/lib/rspec/support/differ.rb#74
  def no_procs?(*args); end

  # source://rspec-support/3.12.0/lib/rspec/support/differ.rb#157
  def normal(text); end

  # source://rspec-support/3.12.0/lib/rspec/support/differ.rb#178
  def object_to_string(object); end

  # source://rspec-support/3.12.0/lib/rspec/support/differ.rb#145
  def red(text); end

  # source://rspec-support/3.12.0/lib/rspec/support/differ.rb#132
  def safely_flatten(array); end
end

class RSpec::Support::DirectoryMaker
  class << self
    # source://rspec-support/3.12.0/lib/rspec/support/directory_maker.rb#13
    def mkdir_p(path); end

    private

    # source://rspec-support/3.12.0/lib/rspec/support/directory_maker.rb#55
    def directory_exists?(dirname); end

    # source://rspec-support/3.12.0/lib/rspec/support/directory_maker.rb#50
    def generate_path(stack, part); end

    # source://rspec-support/3.12.0/lib/rspec/support/directory_maker.rb#47
    def generate_stack(path); end
  end
end

class RSpec::Support::EncodedString
  # source://rspec-support/3.12.0/lib/rspec/support/encoded_string.rb#14
  def initialize(string, encoding = T.unsafe(nil)); end

  # source://rspec-support/3.12.0/lib/rspec/support/encoded_string.rb#26
  def <<(string); end

  # source://rspec-support/3.12.0/lib/rspec/support/encoded_string.rb#23
  def ==(*args, &block); end

  # source://rspec-support/3.12.0/lib/rspec/support/encoded_string.rb#23
  def empty?(*args, &block); end

  # source://rspec-support/3.12.0/lib/rspec/support/encoded_string.rb#23
  def encoding(*args, &block); end

  # source://rspec-support/3.12.0/lib/rspec/support/encoded_string.rb#23
  def eql?(*args, &block); end

  # source://rspec-support/3.12.0/lib/rspec/support/encoded_string.rb#23
  def lines(*args, &block); end

  # source://rspec-support/3.12.0/lib/rspec/support/encoded_string.rb#19
  def source_encoding; end

  # source://rspec-support/3.12.0/lib/rspec/support/encoded_string.rb#39
  def split(regex_or_string); end

  # source://rspec-support/3.12.0/lib/rspec/support/encoded_string.rb#44
  def to_s; end

  # source://rspec-support/3.12.0/lib/rspec/support/encoded_string.rb#44
  def to_str; end

  private

  # source://rspec-support/3.12.0/lib/rspec/support/encoded_string.rb#137
  def detect_source_encoding(string); end

  # source://rspec-support/3.12.0/lib/rspec/support/encoded_string.rb#91
  def matching_encoding(string); end

  # source://rspec-support/3.12.0/lib/rspec/support/encoded_string.rb#122
  def remove_invalid_bytes(string); end

  class << self
    # source://rspec-support/3.12.0/lib/rspec/support/encoded_string.rb#141
    def pick_encoding(source_a, source_b); end
  end
end

# source://rspec-support/3.12.0/lib/rspec/support/encoded_string.rb#12
RSpec::Support::EncodedString::REPLACE = T.let(T.unsafe(nil), String)

# source://rspec-support/3.12.0/lib/rspec/support/encoded_string.rb#7
RSpec::Support::EncodedString::US_ASCII = T.let(T.unsafe(nil), String)

# source://rspec-support/3.12.0/lib/rspec/support/encoded_string.rb#6
RSpec::Support::EncodedString::UTF_8 = T.let(T.unsafe(nil), String)

module RSpec::Support::FuzzyMatcher
  class << self
    # source://rspec-support/3.12.0/lib/rspec/support/fuzzy_matcher.rb#8
    def values_match?(expected, actual); end

    private

    # source://rspec-support/3.12.0/lib/rspec/support/fuzzy_matcher.rb#27
    def arrays_match?(expected_list, actual_list); end

    # source://rspec-support/3.12.0/lib/rspec/support/fuzzy_matcher.rb#36
    def hashes_match?(expected_hash, actual_hash); end
  end
end

# source://rspec-support/3.12.0/lib/rspec/support.rb#38
RSpec::Support::KERNEL_METHOD_METHOD = T.let(T.unsafe(nil), UnboundMethod)

class RSpec::Support::LooseSignatureVerifier < ::RSpec::Support::MethodSignatureVerifier
  private

  # source://rspec-support/3.12.0/lib/rspec/support/method_signature_verifier.rb#394
  def split_args(*args); end
end

class RSpec::Support::LooseSignatureVerifier::SignatureWithKeywordArgumentsMatcher
  # source://rspec-support/3.12.0/lib/rspec/support/method_signature_verifier.rb#412
  def initialize(signature); end

  # source://rspec-support/3.12.0/lib/rspec/support/method_signature_verifier.rb#432
  def has_kw_args_in?(args); end

  # source://rspec-support/3.12.0/lib/rspec/support/method_signature_verifier.rb#420
  def invalid_kw_args_from(_kw_args); end

  # source://rspec-support/3.12.0/lib/rspec/support/method_signature_verifier.rb#416
  def missing_kw_args_from(_kw_args); end

  # source://rspec-support/3.12.0/lib/rspec/support/method_signature_verifier.rb#424
  def non_kw_args_arity_description; end

  # source://rspec-support/3.12.0/lib/rspec/support/method_signature_verifier.rb#428
  def valid_non_kw_args?(*args); end
end

class RSpec::Support::MethodSignature
  # source://rspec-support/3.12.0/lib/rspec/support/method_signature_verifier.rb#14
  def initialize(method); end

  # source://rspec-support/3.12.0/lib/rspec/support/method_signature_verifier.rb#96
  def arbitrary_kw_args?; end

  # source://rspec-support/3.12.0/lib/rspec/support/method_signature_verifier.rb#36
  def classify_arity(arity = T.unsafe(nil)); end

  # source://rspec-support/3.12.0/lib/rspec/support/method_signature_verifier.rb#104
  def classify_parameters; end

  # source://rspec-support/3.12.0/lib/rspec/support/method_signature_verifier.rb#90
  def could_contain_kw_args?(args); end

  # source://rspec-support/3.12.0/lib/rspec/support/method_signature_verifier.rb#49
  def description; end

  # source://rspec-support/3.12.0/lib/rspec/support/method_signature_verifier.rb#82
  def has_kw_args_in?(args); end

  # source://rspec-support/3.12.0/lib/rspec/support/method_signature_verifier.rb#75
  def invalid_kw_args_from(given_kw_args); end

  # source://rspec-support/3.12.0/lib/rspec/support/method_signature_verifier.rb#12
  def max_non_kw_args; end

  # source://rspec-support/3.12.0/lib/rspec/support/method_signature_verifier.rb#12
  def min_non_kw_args; end

  # source://rspec-support/3.12.0/lib/rspec/support/method_signature_verifier.rb#71
  def missing_kw_args_from(given_kw_args); end

  # source://rspec-support/3.12.0/lib/rspec/support/method_signature_verifier.rb#21
  def non_kw_args_arity_description; end

  # source://rspec-support/3.12.0/lib/rspec/support/method_signature_verifier.rb#12
  def optional_kw_args; end

  # source://rspec-support/3.12.0/lib/rspec/support/method_signature_verifier.rb#12
  def required_kw_args; end

  # source://rspec-support/3.12.0/lib/rspec/support/method_signature_verifier.rb#100
  def unlimited_args?; end

  # source://rspec-support/3.12.0/lib/rspec/support/method_signature_verifier.rb#29
  def valid_non_kw_args?(positional_arg_count, optional_max_arg_count = T.unsafe(nil)); end
end

# source://rspec-support/3.12.0/lib/rspec/support/method_signature_verifier.rb#160
RSpec::Support::MethodSignature::INFINITY = T.let(T.unsafe(nil), Float)

class RSpec::Support::MethodSignatureExpectation
  # source://rspec-support/3.12.0/lib/rspec/support/method_signature_verifier.rb#218
  def initialize; end

  # source://rspec-support/3.12.0/lib/rspec/support/method_signature_verifier.rb#245
  def empty?; end

  # source://rspec-support/3.12.0/lib/rspec/support/method_signature_verifier.rb#229
  def expect_arbitrary_keywords; end

  # source://rspec-support/3.12.0/lib/rspec/support/method_signature_verifier.rb#229
  def expect_arbitrary_keywords=(_arg0); end

  # source://rspec-support/3.12.0/lib/rspec/support/method_signature_verifier.rb#229
  def expect_unlimited_arguments; end

  # source://rspec-support/3.12.0/lib/rspec/support/method_signature_verifier.rb#229
  def expect_unlimited_arguments=(_arg0); end

  # source://rspec-support/3.12.0/lib/rspec/support/method_signature_verifier.rb#227
  def keywords; end

  # source://rspec-support/3.12.0/lib/rspec/support/method_signature_verifier.rb#252
  def keywords=(values); end

  # source://rspec-support/3.12.0/lib/rspec/support/method_signature_verifier.rb#227
  def max_count; end

  # source://rspec-support/3.12.0/lib/rspec/support/method_signature_verifier.rb#231
  def max_count=(number); end

  # source://rspec-support/3.12.0/lib/rspec/support/method_signature_verifier.rb#227
  def min_count; end

  # source://rspec-support/3.12.0/lib/rspec/support/method_signature_verifier.rb#238
  def min_count=(number); end
end

class RSpec::Support::MethodSignatureVerifier
  # source://rspec-support/3.12.0/lib/rspec/support/method_signature_verifier.rb#281
  def initialize(signature, args = T.unsafe(nil)); end

  # source://rspec-support/3.12.0/lib/rspec/support/method_signature_verifier.rb#324
  def error_message; end

  # source://rspec-support/3.12.0/lib/rspec/support/method_signature_verifier.rb#279
  def kw_args; end

  # source://rspec-support/3.12.0/lib/rspec/support/method_signature_verifier.rb#279
  def max_non_kw_args; end

  # source://rspec-support/3.12.0/lib/rspec/support/method_signature_verifier.rb#279
  def min_non_kw_args; end

  # source://rspec-support/3.12.0/lib/rspec/support/method_signature_verifier.rb#279
  def non_kw_args; end

  # source://rspec-support/3.12.0/lib/rspec/support/method_signature_verifier.rb#316
  def valid?; end

  # source://rspec-support/3.12.0/lib/rspec/support/method_signature_verifier.rb#288
  def with_expectation(expectation); end

  private

  # source://rspec-support/3.12.0/lib/rspec/support/method_signature_verifier.rb#355
  def arbitrary_kw_args?; end

  # source://rspec-support/3.12.0/lib/rspec/support/method_signature_verifier.rb#351
  def invalid_kw_args; end

  # source://rspec-support/3.12.0/lib/rspec/support/method_signature_verifier.rb#347
  def missing_kw_args; end

  # source://rspec-support/3.12.0/lib/rspec/support/method_signature_verifier.rb#363
  def split_args(*args); end

  # source://rspec-support/3.12.0/lib/rspec/support/method_signature_verifier.rb#359
  def unlimited_args?; end

  # source://rspec-support/3.12.0/lib/rspec/support/method_signature_verifier.rb#343
  def valid_non_kw_args?; end
end

class RSpec::Support::Mutex < ::Thread::Mutex
  class << self
    # source://rspec-support/3.12.0/lib/rspec/support/reentrant_mutex.rb#68
    def new; end
  end
end

# source://rspec-support/3.12.0/lib/rspec/support/reentrant_mutex.rb#66
RSpec::Support::Mutex::NEW_MUTEX_METHOD = T.let(T.unsafe(nil), Method)

module RSpec::Support::OS
  private

  # source://rspec-support/3.12.0/lib/rspec/support/ruby_features.rb#12
  def windows?; end

  # source://rspec-support/3.12.0/lib/rspec/support/ruby_features.rb#16
  def windows_file_path?; end

  class << self
    # source://rspec-support/3.12.0/lib/rspec/support/ruby_features.rb#12
    def windows?; end

    # source://rspec-support/3.12.0/lib/rspec/support/ruby_features.rb#16
    def windows_file_path?; end
  end
end

class RSpec::Support::ObjectFormatter
  # source://rspec-support/3.12.0/lib/rspec/support/object_formatter.rb#27
  def initialize(max_formatted_output_length = T.unsafe(nil)); end

  # source://rspec-support/3.12.0/lib/rspec/support/object_formatter.rb#32
  def format(object); end

  # source://rspec-support/3.12.0/lib/rspec/support/object_formatter.rb#11
  def max_formatted_output_length; end

  # source://rspec-support/3.12.0/lib/rspec/support/object_formatter.rb#11
  def max_formatted_output_length=(_arg0); end

  # source://rspec-support/3.12.0/lib/rspec/support/object_formatter.rb#68
  def prepare_array(array); end

  # source://rspec-support/3.12.0/lib/rspec/support/object_formatter.rb#92
  def prepare_element(element); end

  # source://rspec-support/3.12.0/lib/rspec/support/object_formatter.rb#56
  def prepare_for_inspection(object); end

  # source://rspec-support/3.12.0/lib/rspec/support/object_formatter.rb#74
  def prepare_hash(input_hash); end

  # source://rspec-support/3.12.0/lib/rspec/support/object_formatter.rb#111
  def recursive_structure?(object); end

  # source://rspec-support/3.12.0/lib/rspec/support/object_formatter.rb#84
  def sort_hash_keys(input_hash); end

  # source://rspec-support/3.12.0/lib/rspec/support/object_formatter.rb#104
  def with_entering_structure(structure); end

  private

  # source://rspec-support/3.12.0/lib/rspec/support/object_formatter.rb#266
  def truncate_string(str, start_index, end_index); end

  class << self
    # source://rspec-support/3.12.0/lib/rspec/support/object_formatter.rb#15
    def default_instance; end

    # source://rspec-support/3.12.0/lib/rspec/support/object_formatter.rb#19
    def format(object); end

    # source://rspec-support/3.12.0/lib/rspec/support/object_formatter.rb#23
    def prepare_for_inspection(object); end
  end
end

class RSpec::Support::ObjectFormatter::BaseInspector < ::Struct
  def formatter; end
  def formatter=(_); end

  # source://rspec-support/3.12.0/lib/rspec/support/object_formatter.rb#130
  def inspect; end

  def object; end
  def object=(_); end

  # source://rspec-support/3.12.0/lib/rspec/support/object_formatter.rb#134
  def pretty_print(pp); end

  class << self
    def [](*_arg0); end

    # source://rspec-support/3.12.0/lib/rspec/support/object_formatter.rb#126
    def can_inspect?(_object); end

    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

class RSpec::Support::ObjectFormatter::BigDecimalInspector < ::RSpec::Support::ObjectFormatter::BaseInspector
  # source://rspec-support/3.12.0/lib/rspec/support/object_formatter.rb#180
  def inspect; end

  class << self
    # source://rspec-support/3.12.0/lib/rspec/support/object_formatter.rb#176
    def can_inspect?(object); end
  end
end

class RSpec::Support::ObjectFormatter::DateTimeInspector < ::RSpec::Support::ObjectFormatter::BaseInspector
  # source://rspec-support/3.12.0/lib/rspec/support/object_formatter.rb#166
  def inspect; end

  class << self
    # source://rspec-support/3.12.0/lib/rspec/support/object_formatter.rb#160
    def can_inspect?(object); end
  end
end

# source://rspec-support/3.12.0/lib/rspec/support/object_formatter.rb#158
RSpec::Support::ObjectFormatter::DateTimeInspector::FORMAT = T.let(T.unsafe(nil), String)

class RSpec::Support::ObjectFormatter::DelegatorInspector < ::RSpec::Support::ObjectFormatter::BaseInspector
  # source://rspec-support/3.12.0/lib/rspec/support/object_formatter.rb#227
  def inspect; end

  class << self
    # source://rspec-support/3.12.0/lib/rspec/support/object_formatter.rb#223
    def can_inspect?(object); end
  end
end

class RSpec::Support::ObjectFormatter::DescribableMatcherInspector < ::RSpec::Support::ObjectFormatter::BaseInspector
  # source://rspec-support/3.12.0/lib/rspec/support/object_formatter.rb#190
  def inspect; end

  class << self
    # source://rspec-support/3.12.0/lib/rspec/support/object_formatter.rb#186
    def can_inspect?(object); end
  end
end

# source://rspec-support/3.12.0/lib/rspec/support/object_formatter.rb#9
RSpec::Support::ObjectFormatter::ELLIPSIS = T.let(T.unsafe(nil), String)

# source://rspec-support/3.12.0/lib/rspec/support/object_formatter.rb#245
RSpec::Support::ObjectFormatter::INSPECTOR_CLASSES = T.let(T.unsafe(nil), Array)

class RSpec::Support::ObjectFormatter::InspectableItem < ::Struct
  # source://rspec-support/3.12.0/lib/rspec/support/object_formatter.rb#116
  def inspect; end

  # source://rspec-support/3.12.0/lib/rspec/support/object_formatter.rb#120
  def pretty_print(pp); end

  def text; end
  def text=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

class RSpec::Support::ObjectFormatter::InspectableObjectInspector < ::RSpec::Support::ObjectFormatter::BaseInspector
  # source://rspec-support/3.12.0/lib/rspec/support/object_formatter.rb#240
  def inspect; end

  class << self
    # source://rspec-support/3.12.0/lib/rspec/support/object_formatter.rb#233
    def can_inspect?(object); end
  end
end

class RSpec::Support::ObjectFormatter::TimeInspector < ::RSpec::Support::ObjectFormatter::BaseInspector
  # source://rspec-support/3.12.0/lib/rspec/support/object_formatter.rb#147
  def inspect; end

  class << self
    # source://rspec-support/3.12.0/lib/rspec/support/object_formatter.rb#142
    def can_inspect?(object); end
  end
end

# source://rspec-support/3.12.0/lib/rspec/support/object_formatter.rb#140
RSpec::Support::ObjectFormatter::TimeInspector::FORMAT = T.let(T.unsafe(nil), String)

class RSpec::Support::ObjectFormatter::UninspectableObjectInspector < ::RSpec::Support::ObjectFormatter::BaseInspector
  # source://rspec-support/3.12.0/lib/rspec/support/object_formatter.rb#205
  def inspect; end

  # source://rspec-support/3.12.0/lib/rspec/support/object_formatter.rb#209
  def klass; end

  # source://rspec-support/3.12.0/lib/rspec/support/object_formatter.rb#214
  def native_object_id; end

  class << self
    # source://rspec-support/3.12.0/lib/rspec/support/object_formatter.rb#198
    def can_inspect?(object); end
  end
end

# source://rspec-support/3.12.0/lib/rspec/support/object_formatter.rb#196
RSpec::Support::ObjectFormatter::UninspectableObjectInspector::OBJECT_ID_FORMAT = T.let(T.unsafe(nil), String)

module RSpec::Support::RecursiveConstMethods
  # source://rspec-support/3.12.0/lib/rspec/support/recursive_const_methods.rb#43
  def const_defined_on?(mod, const_name); end

  # source://rspec-support/3.12.0/lib/rspec/support/recursive_const_methods.rb#51
  def constants_defined_on(mod); end

  # source://rspec-support/3.12.0/lib/rspec/support/recursive_const_methods.rb#47
  def get_const_defined_on(mod, const_name); end

  # source://rspec-support/3.12.0/lib/rspec/support/recursive_const_methods.rb#71
  def normalize_const_name(const_name); end

  # source://rspec-support/3.12.0/lib/rspec/support/recursive_const_methods.rb#62
  def recursive_const_defined?(const_name); end

  # source://rspec-support/3.12.0/lib/rspec/support/recursive_const_methods.rb#56
  def recursive_const_get(const_name); end
end

class RSpec::Support::ReentrantMutex
  # source://rspec-support/3.12.0/lib/rspec/support/reentrant_mutex.rb#15
  def initialize; end

  # source://rspec-support/3.12.0/lib/rspec/support/reentrant_mutex.rb#21
  def synchronize; end

  private

  # source://rspec-support/3.12.0/lib/rspec/support/reentrant_mutex.rb#33
  def enter; end

  # source://rspec-support/3.12.0/lib/rspec/support/reentrant_mutex.rb#38
  def exit; end
end

module RSpec::Support::Ruby
  private

  # source://rspec-support/3.12.0/lib/rspec/support/ruby_features.rb#27
  def jruby?; end

  # source://rspec-support/3.12.0/lib/rspec/support/ruby_features.rb#35
  def jruby_9000?; end

  # source://rspec-support/3.12.0/lib/rspec/support/ruby_features.rb#31
  def jruby_version; end

  # source://rspec-support/3.12.0/lib/rspec/support/ruby_features.rb#47
  def mri?; end

  # source://rspec-support/3.12.0/lib/rspec/support/ruby_features.rb#43
  def non_mri?; end

  # source://rspec-support/3.12.0/lib/rspec/support/ruby_features.rb#39
  def rbx?; end

  # source://rspec-support/3.12.0/lib/rspec/support/ruby_features.rb#51
  def truffleruby?; end

  class << self
    # source://rspec-support/3.12.0/lib/rspec/support/ruby_features.rb#27
    def jruby?; end

    # source://rspec-support/3.12.0/lib/rspec/support/ruby_features.rb#35
    def jruby_9000?; end

    # source://rspec-support/3.12.0/lib/rspec/support/ruby_features.rb#31
    def jruby_version; end

    # source://rspec-support/3.12.0/lib/rspec/support/ruby_features.rb#47
    def mri?; end

    # source://rspec-support/3.12.0/lib/rspec/support/ruby_features.rb#43
    def non_mri?; end

    # source://rspec-support/3.12.0/lib/rspec/support/ruby_features.rb#39
    def rbx?; end

    # source://rspec-support/3.12.0/lib/rspec/support/ruby_features.rb#51
    def truffleruby?; end
  end
end

module RSpec::Support::RubyFeatures
  private

  # source://rspec-support/3.12.0/lib/rspec/support/ruby_features.rb#83
  def caller_locations_supported?; end

  # source://rspec-support/3.12.0/lib/rspec/support/ruby_features.rb#132
  def distincts_kw_args_from_positional_hash?; end

  # source://rspec-support/3.12.0/lib/rspec/support/ruby_features.rb#74
  def fork_supported?; end

  # source://rspec-support/3.12.0/lib/rspec/support/ruby_features.rb#137
  def kw_args_supported?; end

  # source://rspec-support/3.12.0/lib/rspec/support/ruby_features.rb#193
  def module_prepends_supported?; end

  # source://rspec-support/3.12.0/lib/rspec/support/ruby_features.rb#189
  def module_refinement_supported?; end

  # source://rspec-support/3.12.0/lib/rspec/support/ruby_features.rb#79
  def optional_and_splat_args_supported?; end

  # source://rspec-support/3.12.0/lib/rspec/support/ruby_features.rb#141
  def required_kw_args_supported?; end

  # source://rspec-support/3.12.0/lib/rspec/support/ruby_features.rb#123
  def ripper_supported?; end

  # source://rspec-support/3.12.0/lib/rspec/support/ruby_features.rb#88
  def supports_exception_cause?; end

  # source://rspec-support/3.12.0/lib/rspec/support/ruby_features.rb#145
  def supports_rebinding_module_methods?; end

  # source://rspec-support/3.12.0/lib/rspec/support/ruby_features.rb#98
  def supports_taint?; end

  class << self
    # source://rspec-support/3.12.0/lib/rspec/support/ruby_features.rb#83
    def caller_locations_supported?; end

    # source://rspec-support/3.12.0/lib/rspec/support/ruby_features.rb#132
    def distincts_kw_args_from_positional_hash?; end

    # source://rspec-support/3.12.0/lib/rspec/support/ruby_features.rb#74
    def fork_supported?; end

    # source://rspec-support/3.12.0/lib/rspec/support/ruby_features.rb#137
    def kw_args_supported?; end

    # source://rspec-support/3.12.0/lib/rspec/support/ruby_features.rb#193
    def module_prepends_supported?; end

    # source://rspec-support/3.12.0/lib/rspec/support/ruby_features.rb#189
    def module_refinement_supported?; end

    # source://rspec-support/3.12.0/lib/rspec/support/ruby_features.rb#79
    def optional_and_splat_args_supported?; end

    # source://rspec-support/3.12.0/lib/rspec/support/ruby_features.rb#141
    def required_kw_args_supported?; end

    # source://rspec-support/3.12.0/lib/rspec/support/ruby_features.rb#123
    def ripper_supported?; end

    # source://rspec-support/3.12.0/lib/rspec/support/ruby_features.rb#88
    def supports_exception_cause?; end

    # source://rspec-support/3.12.0/lib/rspec/support/ruby_features.rb#145
    def supports_rebinding_module_methods?; end

    # source://rspec-support/3.12.0/lib/rspec/support/ruby_features.rb#98
    def supports_taint?; end
  end
end

# source://rspec-support/3.12.0/lib/rspec/support/method_signature_verifier.rb#385
RSpec::Support::StrictSignatureVerifier = RSpec::Support::MethodSignatureVerifier

module RSpec::Support::Version; end

# source://rspec-support/3.12.0/lib/rspec/support/version.rb#4
RSpec::Support::Version::STRING = T.let(T.unsafe(nil), String)

module RSpec::Support::Warnings
  # source://rspec-support/3.12.0/lib/rspec/support/warnings.rb#7
  def deprecate(deprecated, options = T.unsafe(nil)); end

  # source://rspec-support/3.12.0/lib/rspec/support/warnings.rb#15
  def warn_deprecation(message, options = T.unsafe(nil)); end

  # source://rspec-support/3.12.0/lib/rspec/support/warnings.rb#29
  def warn_with(message, options = T.unsafe(nil)); end

  # source://rspec-support/3.12.0/lib/rspec/support/warnings.rb#22
  def warning(text, options = T.unsafe(nil)); end
end

module RSpec::Support::WithKeywordsWhenNeeded
  private

  # source://rspec-support/3.12.0/lib/rspec/support/with_keywords_when_needed.rb#15
  def class_exec(klass, *args, **_arg2, &block); end

  class << self
    # source://rspec-support/3.12.0/lib/rspec/support/with_keywords_when_needed.rb#15
    def class_exec(klass, *args, **_arg2, &block); end
  end
end

module RSpec::Version; end

# source://rspec/3.12.0/lib/rspec/version.rb#3
RSpec::Version::STRING = T.let(T.unsafe(nil), String)
