# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `mime-types-data` gem.
# Please instead update this file by running `bin/tapioca gem mime-types-data`.

module MIME; end

class MIME::Type
  include ::Comparable

  # source://mime-types/3.4.1/lib/mime/type.rb#125
  def initialize(content_type); end

  # source://mime-types/3.4.1/lib/mime/type.rb#165
  def <=>(other); end

  # source://mime-types/3.4.1/lib/mime/type.rb#287
  def add_extensions(*extensions); end

  # source://mime-types/3.4.1/lib/mime/type.rb#441
  def ascii?; end

  # source://mime-types/3.4.1/lib/mime/type.rb#434
  def binary?; end

  # source://mime-types/3.4.1/lib/mime/type.rb#451
  def complete?; end

  # source://mime-types/3.4.1/lib/mime/type.rb#236
  def content_type; end

  # source://mime-types/3.4.1/lib/mime/type.rb#340
  def default_encoding; end

  # source://mime-types/3.4.1/lib/mime/type.rb#364
  def docs; end

  # source://mime-types/3.4.1/lib/mime/type.rb#364
  def docs=(_arg0); end

  # source://mime-types/3.4.1/lib/mime/type.rb#485
  def encode_with(coder); end

  # source://mime-types/3.4.1/lib/mime/type.rb#326
  def encoding; end

  # source://mime-types/3.4.1/lib/mime/type.rb#329
  def encoding=(enc); end

  # source://mime-types/3.4.1/lib/mime/type.rb#223
  def eql?(other); end

  # source://mime-types/3.4.1/lib/mime/type.rb#275
  def extensions; end

  # source://mime-types/3.4.1/lib/mime/type.rb#280
  def extensions=(value); end

  # source://mime-types/3.4.1/lib/mime/type.rb#371
  def friendly(lang = T.unsafe(nil)); end

  # source://mime-types/3.4.1/lib/mime/type.rb#396
  def i18n_key; end

  # source://mime-types/3.4.1/lib/mime/type.rb#514
  def init_with(coder); end

  # source://mime-types/3.4.1/lib/mime/type.rb#530
  def inspect; end

  # source://mime-types/3.4.1/lib/mime/type.rb#151
  def like?(other); end

  # source://mime-types/3.4.1/lib/mime/type.rb#249
  def media_type; end

  # source://mime-types/3.4.1/lib/mime/type.rb#360
  def obsolete; end

  # source://mime-types/3.4.1/lib/mime/type.rb#360
  def obsolete=(_arg0); end

  # source://mime-types/3.4.1/lib/mime/type.rb#360
  def obsolete?; end

  # source://mime-types/3.4.1/lib/mime/type.rb#301
  def preferred_extension; end

  # source://mime-types/3.4.1/lib/mime/type.rb#306
  def preferred_extension=(value); end

  # source://mime-types/3.4.1/lib/mime/type.rb#195
  def priority_compare(other); end

  # source://mime-types/3.4.1/lib/mime/type.rb#424
  def provisional; end

  # source://mime-types/3.4.1/lib/mime/type.rb#424
  def provisional=(_arg0); end

  # source://mime-types/3.4.1/lib/mime/type.rb#427
  def provisional?; end

  # source://mime-types/3.4.1/lib/mime/type.rb#255
  def raw_media_type; end

  # source://mime-types/3.4.1/lib/mime/type.rb#267
  def raw_sub_type; end

  # source://mime-types/3.4.1/lib/mime/type.rb#420
  def registered; end

  # source://mime-types/3.4.1/lib/mime/type.rb#420
  def registered=(_arg0); end

  # source://mime-types/3.4.1/lib/mime/type.rb#420
  def registered?; end

  # source://mime-types/3.4.1/lib/mime/type.rb#446
  def signature; end

  # source://mime-types/3.4.1/lib/mime/type.rb#446
  def signature=(_arg0); end

  # source://mime-types/3.4.1/lib/mime/type.rb#446
  def signature?; end

  # source://mime-types/3.4.1/lib/mime/type.rb#243
  def simplified; end

  # source://mime-types/3.4.1/lib/mime/type.rb#261
  def sub_type; end

  # source://mime-types/3.4.1/lib/mime/type.rb#476
  def to_h; end

  # source://mime-types/3.4.1/lib/mime/type.rb#469
  def to_json(*args); end

  # source://mime-types/3.4.1/lib/mime/type.rb#456
  def to_s; end

  # source://mime-types/3.4.1/lib/mime/type.rb#464
  def to_str; end

  # source://mime-types/3.4.1/lib/mime/type.rb#352
  def use_instead; end

  # source://mime-types/3.4.1/lib/mime/type.rb#357
  def use_instead=(_arg0); end

  # source://mime-types/3.4.1/lib/mime/type.rb#412
  def xref_urls; end

  # source://mime-types/3.4.1/lib/mime/type.rb#404
  def xrefs; end

  # source://mime-types/3.4.1/lib/mime/type.rb#407
  def xrefs=(xrefs); end

  private

  # source://mime-types/3.4.1/lib/mime/type.rb#583
  def content_type=(type_string); end

  # source://mime-types/3.4.1/lib/mime/type.rb#600
  def intern_string(string); end

  # source://mime-types/3.4.1/lib/mime/type.rb#611
  def xref_map(values, helper); end

  # source://mime-types/3.4.1/lib/mime/type.rb#619
  def xref_url_for_draft(value); end

  # source://mime-types/3.4.1/lib/mime/type.rb#627
  def xref_url_for_person(value); end

  # source://mime-types/3.4.1/lib/mime/type.rb#615
  def xref_url_for_rfc(value); end

  # source://mime-types/3.4.1/lib/mime/type.rb#623
  def xref_url_for_rfc_errata(value); end

  # source://mime-types/3.4.1/lib/mime/type.rb#631
  def xref_url_for_template(value); end

  class << self
    # source://mime-types/3.4.1/lib/mime/type.rb#550
    def i18n_key(content_type); end

    # source://mime-types/3.4.1/lib/mime/type.rb#558
    def match(content_type); end

    # source://mime-types/3.4.1/lib/mime/type.rb#544
    def simplified(content_type, remove_x_prefix: T.unsafe(nil)); end

    private

    # source://mime-types/3.4.1/lib/mime/type.rb#569
    def simplify_matchdata(matchdata, remove_x = T.unsafe(nil), joiner: T.unsafe(nil)); end
  end
end

class MIME::Type::Columnar < ::MIME::Type
  # source://mime-types/3.4.1/lib/mime/type/columnar.rb#16
  def initialize(container, content_type, extensions); end

  # source://mime-types/3.4.1/lib/mime/type/columnar.rb#27
  def docs(*args); end

  # source://mime-types/3.4.1/lib/mime/type/columnar.rb#27
  def docs=(*args); end

  # source://mime-types/3.4.1/lib/mime/type/columnar.rb#43
  def encode_with(coder); end

  # source://mime-types/3.4.1/lib/mime/type/columnar.rb#27
  def encoding(*args); end

  # source://mime-types/3.4.1/lib/mime/type/columnar.rb#27
  def encoding=(*args); end

  # source://mime-types/3.4.1/lib/mime/type/columnar.rb#27
  def friendly(*args); end

  # source://mime-types/3.4.1/lib/mime/type/columnar.rb#27
  def obsolete(*args); end

  # source://mime-types/3.4.1/lib/mime/type/columnar.rb#27
  def obsolete=(*args); end

  # source://mime-types/3.4.1/lib/mime/type/columnar.rb#27
  def obsolete?(*args); end

  # source://mime-types/3.4.1/lib/mime/type/columnar.rb#27
  def preferred_extension(*args); end

  # source://mime-types/3.4.1/lib/mime/type/columnar.rb#27
  def preferred_extension=(*args); end

  # source://mime-types/3.4.1/lib/mime/type/columnar.rb#27
  def provisional(*args); end

  # source://mime-types/3.4.1/lib/mime/type/columnar.rb#27
  def provisional=(*args); end

  # source://mime-types/3.4.1/lib/mime/type/columnar.rb#27
  def provisional?(*args); end

  # source://mime-types/3.4.1/lib/mime/type/columnar.rb#27
  def registered(*args); end

  # source://mime-types/3.4.1/lib/mime/type/columnar.rb#27
  def registered=(*args); end

  # source://mime-types/3.4.1/lib/mime/type/columnar.rb#27
  def registered?(*args); end

  # source://mime-types/3.4.1/lib/mime/type/columnar.rb#27
  def signature(*args); end

  # source://mime-types/3.4.1/lib/mime/type/columnar.rb#27
  def signature=(*args); end

  # source://mime-types/3.4.1/lib/mime/type/columnar.rb#27
  def signature?(*args); end

  # source://mime-types/3.4.1/lib/mime/type/columnar.rb#27
  def use_instead(*args); end

  # source://mime-types/3.4.1/lib/mime/type/columnar.rb#27
  def use_instead=(*args); end

  # source://mime-types/3.4.1/lib/mime/type/columnar.rb#27
  def xref_urls(*args); end

  # source://mime-types/3.4.1/lib/mime/type/columnar.rb#27
  def xrefs(*args); end

  # source://mime-types/3.4.1/lib/mime/type/columnar.rb#27
  def xrefs=(*args); end
end

class MIME::Type::InvalidContentType < ::ArgumentError
  # source://mime-types/3.4.1/lib/mime/type.rb#72
  def initialize(type_string); end

  # source://mime-types/3.4.1/lib/mime/type.rb#76
  def to_s; end
end

class MIME::Type::InvalidEncoding < ::ArgumentError
  # source://mime-types/3.4.1/lib/mime/type.rb#85
  def initialize(encoding); end

  # source://mime-types/3.4.1/lib/mime/type.rb#89
  def to_s; end
end

# source://mime-types/3.4.1/lib/mime/type.rb#96
MIME::Type::VERSION = T.let(T.unsafe(nil), String)

class MIME::Types
  include ::Enumerable
  extend ::Enumerable

  # source://mime-types/3.4.1/lib/mime/types.rb#75
  def initialize; end

  # source://mime-types/3.4.1/lib/mime/types.rb#125
  def [](type_id, complete: T.unsafe(nil), registered: T.unsafe(nil)); end

  # source://mime-types/3.4.1/lib/mime/types.rb#167
  def add(*types); end

  # source://mime-types/3.4.1/lib/mime/types.rb#188
  def add_type(type, quiet = T.unsafe(nil)); end

  # source://mime-types/3.4.1/lib/mime/types.rb#81
  def count; end

  # source://mime-types/3.4.1/lib/mime/types.rb#90
  def each; end

  # source://mime-types/3.4.1/lib/mime/types.rb#85
  def inspect; end

  # source://mime-types/3.4.1/lib/mime/types.rb#153
  def of(filename); end

  # source://mime-types/3.4.1/lib/mime/types.rb#153
  def type_for(filename); end

  private

  # source://mime-types/3.4.1/lib/mime/types.rb#201
  def add_type_variant!(mime_type); end

  # source://mime-types/3.4.1/lib/mime/types.rb#211
  def index_extensions!(mime_type); end

  # source://mime-types/3.4.1/lib/mime/types.rb#221
  def match(pattern); end

  # source://mime-types/3.4.1/lib/mime/types.rb#215
  def prune_matches(matches, complete, registered); end

  # source://mime-types/3.4.1/lib/mime/types.rb#205
  def reindex_extensions!(mime_type); end

  class << self
    # source://mime-types/3.4.1/lib/mime/types/registry.rb#14
    def [](type_id, complete: T.unsafe(nil), registered: T.unsafe(nil)); end

    # source://mime-types/3.4.1/lib/mime/types/registry.rb#39
    def add(*types); end

    # source://mime-types/3.4.1/lib/mime/types/registry.rb#19
    def count; end

    # source://mime-types/3.4.1/lib/mime/types/registry.rb#24
    def each; end

    # source://mime-types/3.4.1/lib/mime/types/logger.rb#12
    def logger; end

    # source://mime-types/3.4.1/lib/mime/types/logger.rb#12
    def logger=(_arg0); end

    # source://mime-types/3.4.1/lib/mime/types/registry.rb#7
    def new(*_arg0); end

    # source://mime-types/3.4.1/lib/mime/types/registry.rb#33
    def of(filename); end

    # source://mime-types/3.4.1/lib/mime/types/registry.rb#33
    def type_for(filename); end

    private

    # source://mime-types/3.4.1/lib/mime/types/registry.rb#75
    def __instances__; end

    # source://mime-types/3.4.1/lib/mime/types/registry.rb#55
    def __types__; end

    # source://mime-types/3.4.1/lib/mime/types/registry.rb#45
    def lazy_load?; end

    # source://mime-types/3.4.1/lib/mime/types/registry.rb#65
    def load_default_mime_types(mode = T.unsafe(nil)); end

    # source://mime-types/3.4.1/lib/mime/types/registry.rb#60
    def load_mode; end

    # source://mime-types/3.4.1/lib/mime/types/registry.rb#79
    def reindex_extensions(type); end
  end
end

class MIME::Types::Cache < ::Struct
  def data; end
  def data=(_); end
  def version; end
  def version=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end

    # source://mime-types/3.4.1/lib/mime/types/cache.rb#17
    def load(cache_file = T.unsafe(nil)); end

    def members; end
    def new(*_arg0); end

    # source://mime-types/3.4.1/lib/mime/types/cache.rb#46
    def save(types = T.unsafe(nil), cache_file = T.unsafe(nil)); end
  end
end

module MIME::Types::Columnar
  # source://mime-types/3.4.1/lib/mime/types/_columnar.rb#22
  def load_base_data(path); end

  private

  # source://mime-types/3.4.1/lib/mime/types/_columnar.rb#122
  def arr(line); end

  # source://mime-types/3.4.1/lib/mime/types/_columnar.rb#110
  def dict(line, array: T.unsafe(nil)); end

  # source://mime-types/3.4.1/lib/mime/types/_columnar.rb#41
  def each_file_line(name, lookup = T.unsafe(nil)); end

  # source://mime-types/3.4.1/lib/mime/types/_columnar.rb#134
  def flag(line); end

  # source://mime-types/3.4.1/lib/mime/types/_columnar.rb#70
  def load_docs; end

  # source://mime-types/3.4.1/lib/mime/types/_columnar.rb#63
  def load_encoding; end

  # source://mime-types/3.4.1/lib/mime/types/_columnar.rb#82
  def load_flags; end

  # source://mime-types/3.4.1/lib/mime/types/_columnar.rb#98
  def load_friendly; end

  # source://mime-types/3.4.1/lib/mime/types/_columnar.rb#76
  def load_preferred_extension; end

  # source://mime-types/3.4.1/lib/mime/types/_columnar.rb#104
  def load_use_instead; end

  # source://mime-types/3.4.1/lib/mime/types/_columnar.rb#92
  def load_xrefs; end

  # source://mime-types/3.4.1/lib/mime/types/_columnar.rb#130
  def opt(line); end

  class << self
    # source://mime-types/3.4.1/lib/mime/types/_columnar.rb#15
    def extended(obj); end
  end
end

# source://mime-types/3.4.1/lib/mime/types/_columnar.rb#13
MIME::Types::Columnar::LOAD_MUTEX = T.let(T.unsafe(nil), Thread::Mutex)

class MIME::Types::Container
  extend ::Forwardable

  # source://mime-types/3.4.1/lib/mime/types/container.rb#15
  def initialize(hash = T.unsafe(nil)); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def ==(*args, **_arg1, &block); end

  # source://mime-types/3.4.1/lib/mime/types/container.rb#20
  def [](key); end

  # source://mime-types/3.4.1/lib/mime/types/container.rb#24
  def []=(key, value); end

  # source://mime-types/3.4.1/lib/mime/types/container.rb#61
  def add(key, value); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def count(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def each(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def each_value(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def empty?(*args, **_arg1, &block); end

  # source://mime-types/3.4.1/lib/mime/types/container.rb#73
  def encode_with(coder); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def flat_map(*args, **_arg1, &block); end

  # source://mime-types/3.4.1/lib/mime/types/container.rb#77
  def init_with(coder); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def keys(*args, **_arg1, &block); end

  # source://mime-types/3.4.1/lib/mime/types/container.rb#65
  def marshal_dump; end

  # source://mime-types/3.4.1/lib/mime/types/container.rb#69
  def marshal_load(hash); end

  # source://mime-types/3.4.1/lib/mime/types/container.rb#34
  def merge(other); end

  # source://mime-types/3.4.1/lib/mime/types/container.rb#38
  def merge!(other); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def select(*args, **_arg1, &block); end

  # source://mime-types/3.4.1/lib/mime/types/container.rb#46
  def to_hash; end

  # source://forwardable/1.3.2/forwardable.rb#229
  def values(*args, **_arg1, &block); end

  protected

  # source://mime-types/3.4.1/lib/mime/types/container.rb#84
  def container; end

  # source://mime-types/3.4.1/lib/mime/types/container.rb#84
  def container=(_arg0); end

  # source://mime-types/3.4.1/lib/mime/types/container.rb#86
  def normalize; end
end

module MIME::Types::Data; end

# The path that will be used for loading the MIME::Types data. The
# default location is __FILE__/../../../../data, which is where the data
# lives in the gem installation of the mime-types-data library.
#
# The MIME::Types::Loader will load all JSON or columnar files contained
# in this path.
#
# System maintainer note: this is the constant to change when packaging
# mime-types for your system. It is recommended that the path be
# something like /usr/share/ruby/mime-types/.
#
# source://mime-types-data//lib/mime/types/data.rb#18
MIME::Types::Data::PATH = T.let(T.unsafe(nil), String)

# source://mime-types-data//lib/mime/types/data.rb#6
MIME::Types::Data::VERSION = T.let(T.unsafe(nil), String)

class MIME::Types::Loader
  # source://mime-types/3.4.1/lib/mime/types/loader.rb#31
  def initialize(path = T.unsafe(nil), container = T.unsafe(nil)); end

  # source://mime-types/3.4.1/lib/mime/types/loader.rb#27
  def container; end

  # source://mime-types/3.4.1/lib/mime/types/loader.rb#82
  def load(options = T.unsafe(nil)); end

  # source://mime-types/3.4.1/lib/mime/types/loader.rb#69
  def load_columnar; end

  # source://mime-types/3.4.1/lib/mime/types/loader.rb#59
  def load_json; end

  # source://mime-types/3.4.1/lib/mime/types/loader.rb#46
  def load_yaml; end

  # source://mime-types/3.4.1/lib/mime/types/loader.rb#24
  def path; end

  private

  # source://mime-types/3.4.1/lib/mime/types/loader.rb#156
  def columnar_path; end

  # source://mime-types/3.4.1/lib/mime/types/loader.rb#152
  def json_path; end

  # source://mime-types/3.4.1/lib/mime/types/loader.rb#148
  def yaml_path; end

  class << self
    # source://mime-types/3.4.1/lib/mime/types/loader.rb#92
    def load(options = T.unsafe(nil)); end

    # source://mime-types/3.4.1/lib/mime/types/loader.rb#126
    def load_from_json(filename); end

    # source://mime-types/3.4.1/lib/mime/types/loader.rb#105
    def load_from_yaml(filename); end

    private

    # source://mime-types/3.4.1/lib/mime/types/loader.rb#137
    def old_yaml?; end

    # source://mime-types/3.4.1/lib/mime/types/loader.rb#133
    def read_file(filename); end
  end
end

# source://mime-types/3.4.1/lib/mime/types.rb#70
MIME::Types::VERSION = T.let(T.unsafe(nil), String)

class MIME::Types::WarnLogger < ::Logger
  # source://mime-types/3.4.1/lib/mime/types/logger.rb#28
  def initialize(_one, _two = T.unsafe(nil), _three = T.unsafe(nil)); end
end

class MIME::Types::WarnLogger::WarnLogDevice < ::Logger::LogDevice
  # source://mime-types/3.4.1/lib/mime/types/logger.rb#17
  def initialize(*_arg0); end

  # source://mime-types/3.4.1/lib/mime/types/logger.rb#24
  def close; end

  # source://mime-types/3.4.1/lib/mime/types/logger.rb#20
  def write(m); end
end
